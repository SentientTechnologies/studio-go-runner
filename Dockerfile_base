FROM ubuntu:18.04

MAINTAINER karlmutch@gmail.com

ENV LANG C.UTF-8

ENV CUDA_10_DEB "https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-repo-ubuntu1804_10.1.243-1_amd64.deb"

ENV CUDA_PACKAGE_VERSION 10-1
ENV CUDA_FILESYS_VERSION 10.1
ENV NVIDIA_VERSION 440

ENV DEBIAN_FRONTEND noninteractive

RUN apt-get -y update && \
    apt-get -y upgrade && \
    apt-get -y install software-properties-common wget openssl ssh curl jq apt-utils && \
    apt-get -y install make git gcc && \
    apt-get install -y locales && \
    apt-get install -y language-pack-en && \
    update-locale "en_US.UTF-8" && \
    apt-get install -y --no-install-recommends keyboard-configuration ca-certificates apt-transport-https

RUN mkdir /usr/lib/nvidia && \
    cd /tmp && \
    apt-get install -y freeglut3 freeglut3-dev libxi-dev libxmu-dev && \
    apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub && \
    wget -q -O /tmp/cuda.deb ${CUDA_10_DEB} && \
    dpkg -i /tmp/cuda.deb && \
    apt-get -y update

RUN apt-get -y install --no-install-recommends nvidia-cuda-dev && \
    apt-get -y install --no-install-recommends cuda-nvml-dev-${CUDA_PACKAGE_VERSION} && \
    apt-get clean

RUN \
    ls /usr/lib | grep nvidia && \
    ln -s /usr/local/cuda-${CUDA_FILESYS_VERSION} /usr/local/cuda && \
    ln -s /usr/local/cuda/targets/x86_64-linux/include /usr/local/cuda/include && \
    ln -s /usr/lib/nvidia-${NVIDIA_VERSION}/libnvidia-ml.so /usr/lib/nvidia/libnvidia-ml.so && \
    ln -s /usr/lib/nvidia-${NVIDIA_VERSION}/libnvidia-ml.so.1 /usr/lib/nvidia/libnvidia-ml.so.1 && \
    ln -s /usr/lib/nvidia-${NVIDIA_VERSION}/libnvidia-ml.so.${NVIDIA_VERSION}.33.01 /usr/lib/nvidia/libnvidia-ml.so.${NVIDIA_VERSION}.33.01 && \
    apt-get -y install --no-install-recommends libcuinj64-9.1 && \
    rm /tmp/cuda*.deb && \
    apt-get -y autoclean && \
    apt-get -y autoremove && \
    apt-get clean

# Install the runtime components for nvidia

RUN \
    rm -rf /var/lib/apt/lists/* && \
    curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub | apt-key add - && \
    echo "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64 /" > /etc/apt/sources.list.d/cuda.list && \
    echo "deb https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64 /" > /etc/apt/sources.list.d/nvidia-ml.list && \
    apt-get update

RUN apt-get install -y --no-install-recommends \
        cuda-libraries-10-1 \
        cuda-cudart-10-1 \
        cuda-cufft-10-1 \
        cuda-curand-10-1 \
        cuda-cusolver-10-1 \
        cuda-cusparse-10-1 \
        cuda-runtime-10-1

RUN echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf && \
    echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf

ENV PATH /usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}
ENV LD_LIBRARY_PATH /usr/local/nvidia/lib:/usr/local/nvidia/lib64:/usr/lib/nvidia

# nvidia-container-runtime
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES compute,utility
ENV NVIDIA_REQUIRE_CUDA "cuda>=10.1"

# Pick up some TF dependencies
RUN apt-get install -y --no-install-recommends \
        build-essential \
        libhdf5-serial-dev \
        libzmq3-dev \
        pkg-config \
        software-properties-common \
        unzip && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

RUN wget -q -O /tmp/libpng3.deb https://launchpad.net/~ubuntu-security/+archive/ubuntu/ppa/+build/15108504/+files/libpng3_1.2.54-1ubuntu1.1_amd64.deb && \
    wget -q -O /tmp/libpng-dev.deb https://launchpad.net/~ubuntu-security/+archive/ubuntu/ppa/+build/15108504/+files/libpng12-dev_1.2.54-1ubuntu1.1_amd64.deb && \
    wget -q -O /tmp/libpng.deb https://launchpad.net/~ubuntu-security/+archive/ubuntu/ppa/+build/15108504/+files/libpng12-0_1.2.54-1ubuntu1.1_amd64.deb && \
    dpkg -i /tmp/libpng.deb && \
    dpkg -i /tmp/libpng3.deb && \
    dpkg -i /tmp/libpng-dev.deb

RUN apt-get update && \
    apt-get autoremove && \
    apt-get install -y git lshw

RUN apt-get install -y make build-essential libssl-dev zlib1g-dev \
    libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev \
    libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python-openssl

ENV PATH $HOME/.pyenv/bin:$PATH

RUN curl https://pyenv.run | /bin/bash && \
    echo "export PATH=\"$HOME/.pyenv/bin:$PATH\"" >> $HOME/.bashrc && \
    echo "eval \"\$(pyenv init -)\"" >> $HOME/.bashrc && \
    echo "eval \"\$(pyenv virtualenv-init -)\"" >> $HOME/.bashrc && \
    export PATH=$HOME/.pyenv/bin:$PATH && \
    eval "$(pyenv init -)" && \
    eval "$(pyenv virtualenv-init -)" && \
    pyenv install --list | grep " 3\.[5678]" && \
    pyenv install 3.8.1 && \
    pyenv install 3.7.6 && \
    pyenv install 3.6.10 && \
    pyenv install 3.5.9 && \
    pyenv global 3.6.10

RUN apt-get install -y python3-distutils && \
    curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py && \
    python3 get-pip.py pip==19.0.3 setuptools==44.0.0 wheel==0.33.6

RUN \
    apt-get -y install libssl-dev libcurl4-openssl-dev libsm6 libxrender-dev libxext-dev && \
    pip3 install tensorflow-gpu==1.15.2 && \
    apt-get clean

ENV GO_VERSION 1.14

RUN \
    apt-get update && apt-get install -y apt-transport-https && \
    curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - && \
    echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | tee -a /etc/apt/sources.list.d/kubernetes.list && \
    apt-get update && \
    apt-get install -y kubectl && \
    mkdir -p /usr/local/bin && \
    opsys=linux && \
    curl -s https://api.github.com/repos/kubernetes-sigs/kustomize/releases | grep browser_download | grep $opsys | cut -d '"' -f 4 | grep /kustomize/v | sort | tail -n 1 | xargs curl -o /usr/local/bin/kustomize -L && \
    chmod +x /usr/local/bin/kustomize

RUN \
    cd /var && \
    wget -q -O /tmp/go.tgz https://storage.googleapis.com/golang/go${GO_VERSION}.linux-amd64.tar.gz && \
    tar xzf /tmp/go.tgz && \
    rm /tmp/go.tgz

ENV GOROOT=/var/go

# Will be overitten by other images deriving from this base image
CMD ["/bin/bash"]

LABEL vendor="Cognizant, AI&A" \
      registry.version=0.0.4 \
      registry.repo=leafai/studio-go-runner-dev-base \
      registry.base=studio-go-runner-dev-base
