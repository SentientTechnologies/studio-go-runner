FROM ubuntu:18.04

MAINTAINER karlmutch@gmail.com

ENV LANG C.UTF-8

ENV CUDA_10_DEB "https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-repo-ubuntu1804_10.1.243-1_amd64.deb"

ENV CUDA_PACKAGE_VERSION 10-1
ENV CUDA_FILESYS_VERSION 10.1
ENV NVIDIA_VERSION 440

ENV DEBIAN_FRONTEND noninteractive


RUN apt-get -y update && \
    apt-get -y upgrade && \
    apt-get -y install software-properties-common wget openssl ssh curl jq apt-utils && \
    apt-get -y install make git gcc && \
    apt-get install -y locales && \
    apt-get install -y language-pack-en && \
    update-locale "en_US.UTF-8" && \
    apt-get install -y --no-install-recommends keyboard-configuration ca-certificates apt-transport-https

RUN mkdir /usr/lib/nvidia && \
    cd /tmp && \
    apt-get install -y freeglut3 freeglut3-dev libxi-dev libxmu-dev && \
    apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub && \
    wget -q -O /tmp/cuda.deb ${CUDA_10_DEB} && \
    dpkg -i /tmp/cuda.deb && \
    apt-get -y update

RUN apt-get -y install --no-install-recommends nvidia-cuda-dev && \
    apt-get -y install --no-install-recommends cuda-nvml-dev-${CUDA_PACKAGE_VERSION} && \
    apt-get clean

RUN \
    ls /usr/lib | grep nvidia && \
    ln -s /usr/local/cuda-${CUDA_FILESYS_VERSION} /usr/local/cuda && \
    ln -s /usr/local/cuda/targets/x86_64-linux/include /usr/local/cuda/include && \
    ln -s /usr/lib/nvidia-${NVIDIA_VERSION}/libnvidia-ml.so /usr/lib/nvidia/libnvidia-ml.so && \
    ln -s /usr/lib/nvidia-${NVIDIA_VERSION}/libnvidia-ml.so.1 /usr/lib/nvidia/libnvidia-ml.so.1 && \
    ln -s /usr/lib/nvidia-${NVIDIA_VERSION}/libnvidia-ml.so.${NVIDIA_VERSION}.33.01 /usr/lib/nvidia/libnvidia-ml.so.${NVIDIA_VERSION}.33.01 && \
    apt-get -y install --no-install-recommends libcuinj64-9.1 && \
    rm /tmp/cuda*.deb && \
    apt-get -y autoclean && \
    apt-get -y autoremove && \
    apt-get clean

# Install the runtime components for nvidia

RUN \
    rm -rf /var/lib/apt/lists/* && \
    curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub | apt-key add - && \
    echo "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64 /" > /etc/apt/sources.list.d/cuda.list && \
    echo "deb https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64 /" > /etc/apt/sources.list.d/nvidia-ml.list && \
    apt-get update

RUN apt-get install -y --no-install-recommends \
        cuda-libraries-10-1 \
        cuda-cudart-10-1 \
        cuda-cufft-10-1 \
        cuda-curand-10-1 \
        cuda-cusolver-10-1 \
        cuda-cusparse-10-1 \
        cuda-runtime-10-1

RUN echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf && \
    echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf

ENV PATH /usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}
ENV LD_LIBRARY_PATH /usr/local/nvidia/lib:/usr/local/nvidia/lib64:/usr/lib/nvidia

# nvidia-container-runtime
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES compute,utility
ENV NVIDIA_REQUIRE_CUDA "cuda>=10.1"

# Pick up some TF dependencies
RUN apt-get install -y --no-install-recommends \
        build-essential \
        libhdf5-serial-dev \
        libzmq3-dev \
        pkg-config \
        software-properties-common \
        unzip && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

RUN wget -q -O /tmp/libpng3.deb https://launchpad.net/~ubuntu-security/+archive/ubuntu/ppa/+build/15108504/+files/libpng3_1.2.54-1ubuntu1.1_amd64.deb && \
    wget -q -O /tmp/libpng-dev.deb https://launchpad.net/~ubuntu-security/+archive/ubuntu/ppa/+build/15108504/+files/libpng12-dev_1.2.54-1ubuntu1.1_amd64.deb && \
    wget -q -O /tmp/libpng.deb https://launchpad.net/~ubuntu-security/+archive/ubuntu/ppa/+build/15108504/+files/libpng12-0_1.2.54-1ubuntu1.1_amd64.deb && \
    dpkg -i /tmp/libpng.deb && \
    dpkg -i /tmp/libpng3.deb && \
    dpkg -i /tmp/libpng-dev.deb

RUN apt-get update && \
    apt-get autoremove && \
    apt-get install -y git lshw

RUN apt-get install -y gcc

ENV USER {{.duat.userName}}
ENV USER_ID {{.duat.userID}}
ENV USER_GROUP_ID {{.duat.userGroupID}}
ENV RUNNER_BUILD_LOG {{ env "RUNNER_BUILD_LOG" | default "build.log" }}

RUN groupadd -f -g ${USER_GROUP_ID} $USER} && \
    useradd -g ${USER_GROUP_ID} -u ${USER_ID} -ms /bin/bash ${USER}

USER ${USER}
WORKDIR /home/${USER}

ENV GO_VERSION 1.14

ENV GOPATH=/project
ENV PATH=$GOPATH/bin:$PATH
ENV PATH=$PATH:/home/${USER}/.local/bin:/home/${USER}/go/bin
ENV GOROOT=/home/${USER}/go
ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib/nvidia:/usr/lib/nvidia-${NVIDIA_VERSION}

RUN cd /home/${USER} && \
    mkdir -p /home/${USER}/go && \
    wget -q -O /tmp/go.tgz https://storage.googleapis.com/golang/go${GO_VERSION}.linux-amd64.tar.gz && \
    tar xzf /tmp/go.tgz && \
    rm /tmp/go.tgz

RUN mkdir -p /home/${USER}/.local/bin && \
    wget -q -O /home/${USER}/.local/bin/minio https://dl.minio.io/server/minio/release/linux-amd64/minio && \
    chmod +x /home/${USER}/.local/bin/minio

VOLUME /project
WORKDIR /project/src/github.com/leaf-ai/studio-go-runner

# delete the following once initial test is running
#
ENV AMQP_URL "amqp://guest:guest@${RABBITMQ_SERVICE_SERVICE_HOST}:${RABBITMQ_SERVICE_SERVICE_PORT}/%2f?connection_attempts=2&retry_delay=.5&socket_timeout=5"

CMD /bin/bash -c 'set -e ; set -o pipefail ; (go get github.com/karlmutch/duat && go get github.com/karlmutch/enumer && dep ensure && go build -o $GOPATH/bin/build -tags NO_CUDA *.go && $GOPATH/bin/build -r -dirs internal && $GOPATH/bin/build -dirs cmd/runner) 2>&1 | tee $RUNNER_BUILD_LOG'

# Done last to prevent lots of disruption when bumping versions
LABEL vendor="Sentient Technologies INC" \
      ai.sentient.module.version={{.duat.version}} \
      ai.sentient.module.name={{.duat.module}}
