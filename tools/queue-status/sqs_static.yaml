# Copyright (c) 2021 Cognizant Digital Business, Evolutionary AI. All rights reserved. Issued under the Apache 2.0 License.
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  annotations:
  name: studioml-go-runner-ecr-cred
spec:
  concurrencyPolicy: Allow
  failedJobsHistoryLimit: 1
  jobTemplate:
    metadata:
      creationTimestamp: null
    spec:
      template:
        metadata:
          creationTimestamp: null
        spec:
          containers:
          - name: studioml-go-runner-ecr-cred
            command:
            - /bin/sh
            - -c
            - |-
              ACCOUNT={{ expandenv "$AWS_ACCOUNT" }}
              REGION={{ expandenv "$AWS_DEFAULT_REGION" }}
              SECRET_NAME=studioml-go-docker-key
              EMAIL=[email address]
              TOKEN=`aws ecr get-login --region ${REGION} --registry-ids ${ACCOUNT} | cut -d' ' -f6`
              echo "ENV variables setup done."
              kubectl delete secret --ignore-not-found $SECRET_NAME
              kubectl create secret docker-registry $SECRET_NAME \
              --docker-server=https://${ACCOUNT}.dkr.ecr.${REGION}.amazonaws.com \
              --docker-username=AWS \
              --docker-password="${TOKEN}" \
              --docker-email="${EMAIL}"
              echo "Secret created by name. $SECRET_NAME"
              kubectl patch serviceaccount default -p '{"imagePullSecrets":[{"name":"'$SECRET_NAME'"}]}'
              echo "All done."
            env:
            - name: AWS_DEFAULT_REGION
              value: {{ expandenv "$AWS_DEFAULT_REGION" }}
            - name: AWS_ACCESS_KEY_ID
              value: {{ expandenv "$AWS_ACCESS_KEY_ID" }}
            - name: AWS_SECRET_ACCESS_KEY
              value: {{ expandenv "$AWS_SECRET_ACCESS_KEY" }}
            image: odaniait/aws-kubectl:latest
            imagePullPolicy: IfNotPresent
            resources: {}
            securityContext:
              capabilities: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
          dnsPolicy: Default
          hostNetwork: true
          restartPolicy: Never
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
  schedule: 0 */6 * * *
  successfulJobsHistoryLimit: 3
  suspend: false
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: studioml-account
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: studioml-role
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: studioml-role-bind
subjects:
- kind: ServiceAccount
  name: studioml-account
roleRef:
  kind: ClusterRole
  name: studioml-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Secret
metadata:
  name: studioml-signing
type: Opaque
data:
  info: RHVtbXkgU2VjcmV0IHNvIHJlc291cmNlIHJlbWFpbnMgcHJlc2VudA==
---
apiVersion: v1
kind: Secret
metadata:
  name: studioml-report-keys
type: Opaque
data:
  info: RHVtbXkgU2VjcmV0IHNvIHJlc291cmNlIHJlbWFpbnMgcHJlc2VudA==
