# This example is based off the waveworks Kubeflow template found at
# https://github.com/weaveworks/eksctl/blob/main/examples/23-kubeflow-spot-instance.yaml
#
# This example takes a less agressive approach to the hardware being requested
#
apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: {{ expandenv "$AWS_CLUSTER_NAME" }}
  region: us-east-2
  version: '1.19'
  tags:
    # Add more cloud tags if needed for billing
    environment: {{ expandenv "$AWS_CLUSTER_NAME" }}

availabilityZones: ["us-east-2a","us-east-2b", "us-east-2c"]

cloudWatch:
    clusterLogging:
        # enable specific types of cluster control plane logs
        enableTypes: ["audit", "authenticator", "controllerManager"]
        # all supported types: "api", "audit", "authenticator", "controllerManager", "scheduler"
        # supported special values: "*" and "all"

nodeGroups:
  - name: overhead
    desiredCapacity: 2
    ssh: # import public key from file
      publicKeyPath: ~/.ssh/id_rsa.pub
      allow: true
    minSize: 0
    maxSize: 3
    # Set one nodegroup with 100GB volumes for non GPU components to get deployed.
    volumeSize: 100
    volumeType: gp2
    instanceType: m4.xlarge
    availabilityZones: ["us-east-2a", "us-east-2b", "us-east-2c"]
    labels:
      node-class: "worker-node"
    tags:
      # EC2 tags required for cluster-autoscaler auto-discovery
      k8s.io/cluster-autoscaler/node-template/label/lifecycle: OnDemand
      k8s.io/cluster-autoscaler/node-template/label/aws.amazon.com/spot: "false"
      k8s.io/cluster-autoscaler/node-template/label/gpu-count: "0"
      k8s.io/cluster-autoscaler/enabled: "true"
      k8s.io/cluster-autoscaler/{{ expandenv "$AWS_CLUSTER_NAME" }}: "owned"
    iam:
      withAddonPolicies:
        albIngress: true
        autoScaler: true
        cloudWatch: true


  - name: 1-gpu-spot-p2-xlarge
    ssh: # import public key from file
      publicKeyPath: ~/.ssh/id_rsa.pub
      allow: true
    desiredCapacity: 0
    minSize: 0
    maxSize: 10
    instancesDistribution:
      # set your own max price. AWS spot instance prices no longer cross OnDemand price. 
      # Comment out the field to default to OnDemand as max price.
      # For information about current spot prices please visit, https://aws.amazon.com/ec2/spot/pricing/
      maxPrice: 3.0
      instanceTypes: ["p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge"]
      onDemandBaseCapacity: 0
      onDemandPercentageAboveBaseCapacity: 0
      spotAllocationStrategy: capacity-optimized
    labels:
      lifecycle: Ec2Spot
      aws.amazon.com/spot: "true"
      gpu-count: "1"
    # Stick to one AZ for all GPU nodes. 
    # In case of termination, this will prevent volumes from being unavailable 
    # if the new instance got spun up in another AZ.
    availabilityZones: ["us-east-2a", "us-east-2b", "us-east-2c"]
    taints:
      spotInstance: "true:PreferNoSchedule"
    tags:
      k8s.io/cluster-autoscaler/node-template/label/lifecycle: Ec2Spot
      k8s.io/cluster-autoscaler/node-template/label/aws.amazon.com/spot: "true"
      k8s.io/cluster-autoscaler/node-template/label/gpu-count: "1"
      k8s.io/cluster-autoscaler/node-template/taint/spotInstance: "true:PreferNoSchedule"
      k8s.io/cluster-autoscaler/enabled: "true"
      k8s.io/cluster-autoscaler/{{ expandenv "$AWS_CLUSTER_NAME" }}: "owned"
    iam:
      withAddonPolicies:
        autoScaler: true
        cloudWatch: true
        albIngress: true


#gitops:
#  flux:
#    gitProvider: github             # required. options are github or gitlab
#    owner: karlmutch                # required
#    repository: cluster-gitops      # required
#    personal: true                  # optional. if left false, assumes 'owner' is an org
#    branch: main                    # optional
#    namespace: "gitops-system"      # optional
#    path: "clusters/{{ expandenv "$AWS_CLUSTER_NAME" }}"       # optional

