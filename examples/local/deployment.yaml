# Copyright (c) 2020 Cognizant Digital Business, Evolutionary AI. All rights reserved. Issued under the Apache 2.0 License.
---
apiVersion: v1
kind: Namespace
metadata:
  name: {{ default "local-go-runner" .Namespace }}
---
apiVersion: v1
kind: ConfigMap
metadata:
 name: studioml-env
 namespace: {{ default "local-go-runner" .Namespace }}
data:
 LOGXI_FORMAT: "happy,maxcol=1024"
 LOGXI: "*=DBG"
 MESSAGE_CRYPT: "./certs/message"
 RABBITMQ_DEFAULT_USER: "UserUser"
 RABBITMQ_DEFAULT_PASS: "PasswordPassword"
 MINIO_ACCESS_KEY: "UserUser"
 MINIO_SECRET_KEY: "PasswordPassword"
 MINIO_TEST_SERVER: "${MINIO_SERVICE_SERVICE_HOST}:${MINIO_SERVICE_SERVICE_PORT}"
 AMQP_URL: "amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@${RABBITMQ_SERVICE_SERVICE_HOST}:${RABBITMQ_SERVICE_SERVICE_PORT}/%2f?connection_attempts=2&retry_delay=.5&socket_timeout=5"
 CACHE_SIZE: "10Gib"
 CACHE_DIR: "/tmp/cache"
 CLEAR_TEXT_MESSAGES: "true"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: studioml-account
  namespace: {{ default "local-go-runner" .Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: studioml-role
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: studioml-role-bind
subjects:
- kind: ServiceAccount
  name: studioml-account
  namespace: {{ default "local-go-runner" .Namespace }}
roleRef:
  kind: ClusterRole
  name: studioml-role
  apiGroup: rbac.authorization.k8s.io
---
# This secret is an open abitrary secret used to confirm the functional encryption and
# MUST never be used for a production system.
apiVersion: v1
kind: Secret
metadata:
  name: studioml-runner-passphrase-secret
  namespace: {{ default "local-go-runner" .Namespace }}
type: Opaque
data:
  ssh-passphrase: UGFzc1BocmFzZQ==
---
# This secret is an open abitrary secret used to confirm the functional encryption and
# MUST never be used for a production system.
apiVersion: v1
kind: Secret
metadata:
  name: studioml-runner-key-secret
  namespace: {{ default "local-go-runner" .Namespace }}
type: Opaque
data:
  ssh-privatekey: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpQcm9jLVR5cGU6IDQsRU5DUllQVEVECkRFSy1JbmZvOiBBRVMtMTI4LUNCQyw5MjVGMkVCOTgwNjM4OTFENUM0Q0U4MzhFNUEzODdERQoKOG1UOFlNY2RxS2o5M0F6TmRrUGd0R25LQkhwMzB1NlFENWUydC9FbXRLQ2dtQzcyVUVyR1N1a3dJamMvRENPNgptWWRIaU5BYnAxVEloY0ZyNms4eDVFUHRMRjlsUlhnV1FQT1lIUFh5K3NDTXpnNmRDSDZqVXNIQzUrbFFtRGY5ClRvUTdYdVdpUUVFbVhVdUcwNS9kMjYyWHFocktIR0hGOEMwUGdBQ0xoV1g0MW1mMEhpY05DY015WXJ1eURySWkKcDg5SjUrSEZRYzA1QkxuYnBHMDUyNWhyZDhuYWwyTHNUVjExaVpZaGxHVDlUWWM1b3dOUmEvWjlldml6QWdSOApkSkRoR2Q1bkVvN0NjaGI4VzczYVdPbjVrRmtscVk0NzRQMnZzOE13RDFXMjZCYTF2Z25ydWlHeWhoanorWXJsCnZ5MDNueUx1R3BPb24rNFRvTFlhWFRlY0VaYUtIMmNISFZBU0JkL3ZOaFEwTkIvTGgzNmhCTGJjc1kxaDZSM1EKMmxWZGVzRG5LREFEM2JSM3dhaXJGc2tYald2a2Y5UzFBeWN5NldlSGErck15NmlIRy9mdXdFUDlvai9ZR2grZgpmUm83M3RpbVRYWW5NRU8zME02SVBVSkM2T2RCQkphVkg5TzZ1cGRTKzBkU0o4RmZSZXNXRmJheCt3aHFldnFkCkpVeGdHdXp0N2xWanF0Q2Z2b2pnM3gyanB4UnpyRVhKWlRzajlDck51STk0R2lBOVc0aTl1YVR5cmo5empOTlAKa29pQU0rbTFtUGU1VC9ETTVLb3UwR2lvUVBtYlF6Zjh6aGFDR1doVVRvbUVEUWJSbTJhMlUzTllWa0xrQzhJVgpJY3BPOEplSUlxcHJsRW9JVTVGRGQxMU8yMkZSNExyS3VIS0dGaHlxY0F2MGU2SGxDcnZYMW1qZlllUVlUQnoyCkhvV0ErQnNuQXdaWHhwbzdMVzhaMU42S0ZlWFdPc0xyTlpUY3pFY0ZROWZzblk3aUtyTHN2N2tyUHArMHFoNWMKUXBuUDdkSGsycENHWmVXVnBrSU43NXk5QjNQcjd4YmdoalR5SW01cjhQcHNjVXRSdzVmaEVrSkVtWUVFQ3pIRQptN2ZTVzNMU2tuaFZBbXpNUzMyd3ppVjZrWWhiWWgxMmNYSHAvTVZKd3NUSXg1WkpXSURzaWJSS3h1RVhGYTFBCnNwMXY1Wk9Xek9aVDMrZ3NDVitFWExON2o5aG84bkxWRGxFYWJ2UG92NDhFVHBnV3lMV2JsRm5oVnI0Q3psNHcKN1B5cm5hVk5mdUNtS1BFcXVaZ3V3djVuSHdWOUdYOE5vNFZISEpPRCt5YnFZQ2VOMTA0T1NnSi9kaTFTdS9mYgpwQmo3SDFaS3FVRnY0ckYyQklUcFZON2g1emhWN0w2N0Jzd3pNYnRZMTJGRDVvMzhPM0NMK1dsZHZINDB6NW5nClc4UDhyeU5rVW45OU5oZ0VDNHFQVk40clJIYTAzV2pFalY5MXhFcWJZTVErVTc4L0o0Y1FnT3pjV3E3TzJCUXAKUkJLMDM5d1FYd1IrdTJlRFpUY1lnYVorN3haWU9NUVdybVpnVzB5S3I3eXVKQS8yWVVnQTNzM2ZrWVRWL0cxVwpCc0FYZ25yajhKQlE5R3lvMDFhaWs5SDJUYkVmakhSOW04WEJ0VTY4QWdLUlg1b0dZWlJ6STZwdmo2V0xrVmVLClJoc2MvRXRYVnM2b3N6TjF1KzR1SlMyRWtFT21Wbm4xQWRhUnZTb2FWMCtzMEdkMS84L1hqSW5UbUk3KzR6T1EKM1FKektEQ1A4dHQwaC8ycTNkM3ZsK1psblVUQ1g0UUVlZ2RZNU9vZFhsL3ZIc1g3UDJCaGNHLy8xdjNuMXE5dApCL1grejRMTVJhWk9YbzBRcXpVRTZBcGx3eEVqdEZVbGU1UUYvclJUZGV1MytOWUlIZ2JtNHF3VHk3RDAwYzA2CjlMMm5OSmFLTk8wVldhZHBxS3p0ZTF4SWdRUTNobE1UQ2JwU3VBRnNVN2hpUGEzdXphaDQ2ODl3V2hjZWMzQ3gKUHpaejc5b3FobVhsZGxJUFFjbGt1RWFOWEdWQnBCSXBmT0x3YlRaM0VTSFYzOEFWdGR1RHJ3S3U0ZXRDS1NzRQpjd29MRDRreXp0SUVWMkxxd1E0enBGZ1VrWHRpT0RVWnBxVUJyOVJoU0hUSG4zS3dHSmI4NzBJRGJhMVR2Y3R4CmhlamovME1tVEhuWEcxZlU5MmRqYUh6ejBiZWkram0wVDRScTh6M3lITWcwSzhSRTE3NDg3ZkRzYWxWR3JUdTEKMDZUUnQvZFRNUGZ4Uy8vajVuVDA0VFpraVAweUVSZTNPNkFvRVZhdUdSRHNSaE9nSWw1MXdiK0pkbGI1cTdMaQprdjcyRWxhaHBTVFFFbVIxUU1EeTVDV3U4VlQrTkZXSUZNK1N6SUcraStQaXhaVmtIU3VKak80Q0FmRWI5VitpCkQybFpOa1IyRkdkdGV6cjRTM0N6Y1dLdHdOcmtVbytWeDVCSlNsYThNZDd2THlGdEVqZ1lhbVlrdVErOGdmUG0KbnhkRHc2ZTcvdU1ldTRBQ3ZDUTBZbG5pdEc2TWE4UFZRUC90WDRFMy9iMEdhSVZEdDMrOWlVYjlLcFVoU0h2aQpsQXdpck0vVXhxV09SM3BUL1BkMWFPczJEMS8xdGdVZnJIMGswemJiQTN2SDNzSlg0d0VKQjExd0J1V1dicXJNCmhzRFRESGVheEFuRVRSdVZiODM2aUl2WFo5ODgrYUtXb2VuSWw3eXlmei9UbnBuYkhBRWJ2MkFIN0xHUld4cHgKUzZRK0FFT0tFdVp6NzRLY1dFeVpJajRSTGRLRytCVHdJSnE2YkZSQVpiQUxqcmdVQ2ZFWmVkN0dvNTVoU0JregpBQTFXbzJQazRWMC9kV1VuSUtXdURzZHdka0pSVEgyc0FudlNNbm85bmVLUWR2WHNxaXl4bGhDZnQ1bGRhempyCjYyUllpSXBZRE9QWllUc1ZNY1ZMNWZlM0pNbFpvc3JYZVBSdUdZaHhIVUhaeHFpZXVtK3N2UXpLNHIwQXBGNVIKTGhzM0RSSkJwMEZ2c1dtNFk4emlXWXBmT09JQ1Z2TlRuVUFRU2dGRW5PSWNxYk1uRDQ2aWFtU3RxQ1lBZ0YxdQpHRW1TNU9ydUFoVEh5TTcyVlhNdWRNeUZHVXQ4TFc0OWcwOExPQmNka254ZUpOcHdpNEtqcitJQmNDSU1NR2V4CmM3T1AvTEZxdi9XdHU1cDVLUFV0K3RYeEcwcWJLaEs4UXNlMkg4Nmk3M3Y0bG9TempDOWs3TnZreHd1SVM2Mm4KNjNjb2wxdmVacDlQSytkdUpmK1pRTXVIMkR6UmF3Nk9ucnMzTW53QjZlNXNQSnNFeDZybEZOUTN4V3ljV0QzeApkenJWRWk0MHIwUTNVcGhNUHg2V1lCcUtHVXlRajVKSXpHVjh1R1dTNENrdllvdlBIdTVmcjY1SUI4UEtXTyt6CjhZakpiNmlzbkpyTEdrTXpYL1RPZWpsbkFURmtHRFdaV2RKdlJwOWQ0VHE5THNNVXhuaHltbkNmZmI4cXVaKzUKL3JvdFN6RFp6eFFkSjY0K0NEZXVmU2taOXJaR0M3alQ0T09Nc2QyWGpTQzJpdmJQTDNqdkVrQUFWNlNSZE1COAorMG5BTnRZQXFiVlFBam85aER0NlNPQ2FoQ3FWTnRuRnBUUjd2c1dvRG1CbENUL2wrK0lqWTg3OVZrN0RYdG04Ckh5SHlWU0k2REM2bkdWdzlPNENJaXVZTllEc1dEcHRyS3pLNUcrWHN1ZmxlS3dzRCtTRHYvbzJJMlg5b2FtZUgKZWJPK2NkV0ozais4VXhjaVQvQ0N5MUMzYXRwQTFHUEttcXMzUGZXRjI5WkFqaDY1S244b0ZPM3duZ0VyMkI3TApPcENlWkFoVzJob0FTOTJBWFlSTmJUa1lRSzBnVm5kOEZJWUk3a0txcjRGM0xBdXhyYlVwd2VqOVlZSnZvb0VwCm91cUpIdG90NkVmVG11OEY4dXlWRmJOUlhYVld2RkltRmtTYkVPY25SRnFhcDdEa0hFcFRmVHE2ZGF0VWxLRjcKNDh0N2lJRnNXR3RNVDNOdTZRZXJBVVV3WWNKcVhOK3R5eS9ieGpwaFRYRVQ1RitZc0dQb05pQ1V5Mmltek4vOQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
  ssh-publickey: LS0tLS1CRUdJTiBSU0EgUFVCTElDIEtFWS0tLS0tCk1JSUNDZ0tDQWdFQXdhbDFTWFlvbW5HR3lKRjRzQ2JzaUFyeW9JemI3RFhNci9PN2xINDJ0eHJSanZmY29tK1IKeHhQVmVyMllyVFpRZ3c0bmJ2OER6VXhKZUQzRjFKWXVudkxkZXBRQTlRcjJjYkFRNVdxdnlJRkhXOFZQK2VsWgpFdTByZ0RBdm42SXppT1plZGw1dS9LQVZSZnNqVSszRU93OFgrdlUvK2lwUmFZRjVPNTlXQkd0cWd6UnVPQjhKCjdFUFVpc3QvUWs1ZkVkSlo4cUlyQUtmTDlaSTNwWjlUOHhuRVVsVXdvMTcyR0o3c0NmZUFZeElaMC9YUkphZVIKa2RwM1lmMi94WFlZdytpcExUQmQ2cFBRWUF5NFcyMHVFOTBRR1JMRHV0eGJnM3NySzRYbWRFWGF0ZmE5MGFvagpscUJXOVcwTFV2djZHYlNydWE5TzBrVWdVN2NqdGpxRWd3ZmJBbHR5MUF3UjFGTzhjUTYyTVp5Wk50bVVsSm1lCmZrTjYzRThuR0FsMkRFU1hrL2xCN3lsTXloOXNwTjFCbVlXOTcxU2ZzZVVsK1dmajZJZzNuZFQ4US9ReWd5dFAKdnV0ZnBpZXEyRWpWdnlBSnF1QzRkQlAxZ0FMMExRNTZmYWY5WjEwa2x1S3duUnJUZEZSMHUxci9UYldVZmZJTApIeU4zZWdzb3Nqd1RhZTRPUW51SjQ2ck8wM1dnNEc0UStZTEYrRWRBeUFWOVNNWlZhSTR0ZlhQMlYwR2dVWkhUCmNnbk1WZFAxTmVvS252aEgwQ0hvTzF1NDZGVGxWOTQ4VTZ5a3ZKSlVSUG5GVXo3T09qKzJqb3ppWkVkLzdqZWsKMCtRb0dzY2h5SXpxRmJDQUtQS3FLMnZKQ1pPUHRRWVR3VVc3bGgrQXFpUU9mdE1xbk1mWXhJRUNBd0VBQVE9PQotLS0tLUVORCBSU0EgUFVCTElDIEtFWS0tLS0tCg==
---
apiVersion: v1
kind: Secret
metadata:
  name: studioml-signing
  namespace: {{ default "local-go-runner" .Namespace }}
type: Opaque
data:
  info: RHVtbXkgU2VjcmV0IHNvIHJlc291cmNlIHJlbWFpbnMgcHJlc2VudA==
---
apiVersion: v1
kind: Secret
metadata:
  name: studioml-report-keys
  namespace: {{ default "local-go-runner" .Namespace }}
type: Opaque
data:
  info: RHVtbXkgU2VjcmV0IHNvIHJlc291cmNlIHJlbWFpbnMgcHJlc2VudA==
---
# This service exposes rabbit MQ to the cluster members
apiVersion: v1
kind: Service
metadata:
  labels:
    component: rabbitmq
  name: rabbitmq-service
  namespace: {{ default "local-go-runner" .Namespace }}
spec:
  type: NodePort
  ports:
  - name: rmq-client
    port: 5672
  - name: rmq-admin
    port: 15672
  selector:
    app: taskQueue
    component: rabbitmq
---
# The replication controller encapsulates the pod(s) used to run RabbitMQ
apiVersion: v1
kind: ReplicationController
metadata:
  labels:
    component: rabbitmq
  name: rabbitmq-controller
  namespace: {{ default "local-go-runner" .Namespace }}
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: taskQueue
        component: rabbitmq
    spec:
      containers:
      - image: rabbitmq
        name: rabbitmq
        ports:
        - containerPort: 5672
        - containerPort: 15672
        resources:
          limits:
            cpu: 1
            ephemeral-storage: "4Gi"
          requests:
            ephemeral-storage: "4Gi"
        envFrom:
        - configMapRef:
            name: studioml-env
        lifecycle:
          postStart:
            exec:
              command:
                - "/bin/bash"
                - "-c"
                - >
                  set -euo pipefail ;
                  IFS=$'\n\t' ;
                  echo "Starting the install of the management plugin" ;
                  sleep 30 ;
                  rabbitmq-plugins enable rabbitmq_management ;
                  apt-get -y update ; apt-get install -y wget python ;
                  wget -q -O /usr/local/bin/rabbitmqadmin http://localhost:15672/cli/rabbitmqadmin ;
                  chmod +x /usr/local/bin/rabbitmqadmin
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  # This name uniquely identifies the PVC. Will be used in deployment below.
  name: minio-pv-claim
  namespace: {{ default "local-go-runner" .Namespace }}
  labels:
    app: minio-storage-claim
spec:
  # Read more about access modes here: https://kubernetes.io/docs/user-guide/persistent-volumes/#access-modes
  accessModes:
    - ReadWriteOnce
  resources:
    # This is the request for storage. Should be available in the cluster.
    requests:
      storage: 15Gi
  # Uncomment and add storageClass specific to your requirements below. Read more https://kubernetes.io/docs/concepts/storage/persistent-volumes/#class-1
  #storageClassName:
---
apiVersion: apps/v1
kind: Deployment
metadata:
  # This name uniquely identifies the Deployment
  name: minio-deployment
  namespace: {{ default "local-go-runner" .Namespace }}
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        # Label is used as selector in the service.
        app: minio
    spec:
      # Refer to the PVC created earlier
      volumes:
      - name: storage
        persistentVolumeClaim:
          # Name of the PVC created earlier
          claimName: minio-pv-claim
      containers:
      - name: minio
        # Pulls the default Minio image from Docker Hub
        image: minio/minio:RELEASE.2020-05-08T02-40-49Z
        args:
        - server
        - /storage
        envFrom:
        - configMapRef:
            name: studioml-env
        ports:
        - containerPort: 9000
        # Mount the volume into the pod
        volumeMounts:
        - name: storage # must match the volume name, above
          mountPath: "/storage"
        # Readiness probe detects situations when MinIO server instance
        # is not ready to accept traffic. Kubernetes doesn't forward
        # traffic to the pod while readiness checks fail.
        readinessProbe:
          httpGet:
            path: /minio/health/ready
            port: 9000
          initialDelaySeconds: 120
          periodSeconds: 20
        # Liveness probe detects situations where MinIO server instance
        # is not working properly and needs restart. Kubernetes automatically
        # restarts the pods if liveness checks fail.
        livenessProbe:
          httpGet:
            path: /minio/health/live
            port: 9000
          initialDelaySeconds: 120
          periodSeconds: 20
---
apiVersion: v1
kind: Service
metadata:
  name: minio-service
  namespace: {{ default "local-go-runner" .Namespace }}
spec:
  type: NodePort
  ports:
    - port: 9000
      targetPort: 9000
      protocol: TCP
  selector:
    app: minio
---
apiVersion: apps/v1
kind: Deployment
metadata:
 name: studioml-go-runner-deployment
 namespace: {{ default "local-go-runner" .Namespace }}
 labels:
   app: studioml-go-runner
spec:
 progressDeadlineSeconds: 360
 selector:
   matchLabels:
     app: studioml-go-runner
 replicas: 1
 strategy:
   type: RollingUpdate
 template:
   metadata:
     labels:
       app: studioml-go-runner
   spec:
      serviceAccountName: studioml-account
      automountServiceAccountToken: true
      containers:
      - name: studioml-go-runner
        envFrom:
        - configMapRef:
            name: studioml-env
        image: {{ .Image }}
        imagePullPolicy: Always
        resources:
          limits:
            memory: "8Gi"
            cpu: "2"
        volumeMounts:
        - name: message-encryption
          mountPath: "/runner/certs/message/encryption"
          readOnly: true
        - name: encryption-passphrase
          mountPath: "/runner/certs/message/passphrase"
          readOnly: true
        - name: queue-signing
          mountPath: "/runner/certs/queues/signing"
          readOnly: true
        - name: response-queue-signing
          mountPath: "/runner/certs/queues/reponse-encrypt"
          readOnly: true
      nodeSelector:
        beta.kubernetes.io/os: linux
      volumes:
        - name: message-encryption
          secret:
            optional: false
            secretName: studioml-runner-key-secret
            items:
            - key: ssh-privatekey
              path: ssh-privatekey
            - key: ssh-publickey
              path: ssh-publickey
        - name: encryption-passphrase
          secret:
            optional: false
            secretName: studioml-runner-passphrase-secret
            items:
            - key: ssh-passphrase
              path: ssh-passphrase
        - name: queue-signing
          secret:
            optional: false
            secretName: studioml-signing
        - name: reponse-queue-signing
          secret:
            optional: false
            secretName: studioml-report-keys
