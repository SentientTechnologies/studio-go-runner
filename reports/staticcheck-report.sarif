{
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Go Static Analysis",
          "rules": [
            {
              "id": "compile",
              "help": {
                "text": "build constraints exclude all Go files in /app/vendor/github.com/karlmutch/go-nvml.",
                "markdown": "build constraints exclude all Go files in /app/vendor/github.com/karlmutch/go-nvml."
              },
              "name": "",
              "properties": {
                "tags": [
                  "Scan"
                ],
                "precision": "high"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "build constraints exclude all Go files in /app/vendor/github.com/karlmutch/go-nvml."
              },
              "helpUri": "https://staticcheck.io/docs/checks#compile",
              "shortDescription": {
                "text": "build constraints exclude all Go files in /app/vendor/github.com/karlmutch/go-nvml."
              }
            },
            {
              "id": "ST1017",
              "help": {
                "text": "don't use Yoda conditions.",
                "markdown": "don't use Yoda conditions."
              },
              "name": "",
              "properties": {
                "tags": [
                  "Scan"
                ],
                "precision": "high"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "don't use Yoda conditions."
              },
              "helpUri": "https://staticcheck.io/docs/checks#ST1017",
              "shortDescription": {
                "text": "don't use Yoda conditions."
              }
            },
            {
              "id": "S1004",
              "help": {
                "text": "should use !bytes.Equal(minifiedRequest, finalPayload) instead.",
                "markdown": "should use !bytes.Equal(minifiedRequest, finalPayload) instead."
              },
              "name": "",
              "properties": {
                "tags": [
                  "Scan"
                ],
                "precision": "high"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "should use !bytes.Equal(minifiedRequest, finalPayload) instead."
              },
              "helpUri": "https://staticcheck.io/docs/checks#S1004",
              "shortDescription": {
                "text": "should use !bytes.Equal(minifiedRequest, finalPayload) instead."
              }
            },
            {
              "id": "S1000",
              "help": {
                "text": "should use for range instead of for { select {} }.",
                "markdown": "should use for range instead of for { select {} }."
              },
              "name": "",
              "properties": {
                "tags": [
                  "Scan"
                ],
                "precision": "high"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "should use for range instead of for { select {} }."
              },
              "helpUri": "https://staticcheck.io/docs/checks#S1000",
              "shortDescription": {
                "text": "should use for range instead of for { select {} }."
              }
            },
            {
              "id": "S1005",
              "help": {
                "text": "unnecessary assignment to the blank identifier.",
                "markdown": "unnecessary assignment to the blank identifier."
              },
              "name": "",
              "properties": {
                "tags": [
                  "Scan"
                ],
                "precision": "high"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "fullDescription": {
                "text": "unnecessary assignment to the blank identifier."
              },
              "helpUri": "https://staticcheck.io/docs/checks#S1005",
              "shortDescription": {
                "text": "unnecessary assignment to the blank identifier."
              }
            },
            {
              "id": "SA4006",
              "help": {
                "text": "this value of data is never used.",
                "markdown": "this value of data is never used."
              },
              "name": "",
              "properties": {
                "tags": [
                  "Scan"
                ],
                "precision": "high"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "this value of data is never used."
              },
              "helpUri": "https://staticcheck.io/docs/checks#SA4006",
              "shortDescription": {
                "text": "this value of data is never used."
              }
            },
            {
              "id": "SA4017",
              "help": {
                "text": "New is a pure function but its return value is ignored.",
                "markdown": "New is a pure function but its return value is ignored."
              },
              "name": "",
              "properties": {
                "tags": [
                  "Scan"
                ],
                "precision": "high"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "New is a pure function but its return value is ignored."
              },
              "helpUri": "https://staticcheck.io/docs/checks#SA4017",
              "shortDescription": {
                "text": "New is a pure function but its return value is ignored."
              }
            }
          ],
          "version": "1.0.0-scan",
          "fullName": "Go Static Analysis"
        }
      },
      "conversion": {
        "tool": {
          "driver": {
            "name": "@ShiftLeft/sast-scan"
          }
        },
        "invocation": {
          "arguments": [
            "-f",
            "json",
            "./..."
          ],
          "executionSuccessful": true,
          "commandLine": "-f json ./...",
          "endTimeUtc": "2021-02-23T00:48:37Z",
          "workingDirectory": {
            "uri": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner"
          }
        }
      },
      "invocations": [
        {
          "executionSuccessful": true,
          "endTimeUtc": "2021-02-23T00:48:37Z",
          "workingDirectory": {
            "uri": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner"
          }
        }
      ],
      "properties": {
        "metrics": {
          "total": 9,
          "critical": 0,
          "high": 0,
          "medium": 8,
          "low": 1
        }
      },
      "results": [
        {
          "message": {
            "markdown": "",
            "text": "build constraints exclude all Go files in /app/vendor/github.com/karlmutch/go-nvml."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": ""
                  },
                  "startLine": 1
                },
                "artifactLocation": {
                  "uri": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner"
                },
                "contextRegion": {
                  "snippet": {
                    "text": ""
                  },
                  "endLine": 4,
                  "startLine": 1
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM",
            "issue_tags": {}
          },
          "baselineState": "new",
          "partialFingerprints": {
            "scanFileHash": "b6cee314495461eb"
          },
          "ruleId": "compile",
          "ruleIndex": 0
        },
        {
          "message": {
            "markdown": "",
            "text": "don't use Yoda conditions."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "\treturn 0 == bytes.Compare(buffer, signature), nil\n"
                  },
                  "startLine": 40
                },
                "artifactLocation": {
                  "uri": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/internal/aws/aws.go"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\n\treturn 0 == bytes.Compare(buffer, signature), nil\n"
                  },
                  "endLine": 40,
                  "startLine": 39
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM",
            "issue_tags": {}
          },
          "baselineState": "new",
          "partialFingerprints": {
            "scanPrimaryLocationHash": "33207201f681a187",
            "scanFileHash": "2f6856bde369c9e1"
          },
          "ruleId": "ST1017",
          "ruleIndex": 1
        },
        {
          "message": {
            "markdown": "",
            "text": "should use !bytes.Equal(minifiedRequest, finalPayload) instead."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "\tif bytes.Compare(minifiedRequest, finalPayload) != 0 {\n"
                  },
                  "startLine": 145
                },
                "artifactLocation": {
                  "uri": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/internal/defense/envelope_test.go"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\n\tif bytes.Compare(minifiedRequest, finalPayload) != 0 {\n"
                  },
                  "endLine": 145,
                  "startLine": 144
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM",
            "issue_tags": {}
          },
          "baselineState": "new",
          "partialFingerprints": {
            "scanPrimaryLocationHash": "4e4a3aa2800824ef",
            "scanFileHash": "0ff854873717758d"
          },
          "ruleId": "S1004",
          "ruleIndex": 2
        },
        {
          "message": {
            "markdown": "",
            "text": "don't use Yoda conditions."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "\tif 0 != bytes.Compare(msg, out) {\n"
                  },
                  "startLine": 78
                },
                "artifactLocation": {
                  "uri": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/internal/defense/rsa_test.go"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\n\tif 0 != bytes.Compare(msg, out) {\n"
                  },
                  "endLine": 78,
                  "startLine": 77
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM",
            "issue_tags": {}
          },
          "baselineState": "new",
          "partialFingerprints": {
            "scanPrimaryLocationHash": "98d989d1e228a768",
            "scanFileHash": "60944b5c4760f63e"
          },
          "ruleId": "ST1017",
          "ruleIndex": 1
        },
        {
          "message": {
            "markdown": "",
            "text": "should use for range instead of for { select {} }."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "\t\tfor {\n"
                  },
                  "startLine": 93
                },
                "artifactLocation": {
                  "uri": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/internal/shell/run_python.go"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\tgo func() {\n\t\tfor {\n"
                  },
                  "endLine": 93,
                  "startLine": 92
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM",
            "issue_tags": {}
          },
          "baselineState": "new",
          "partialFingerprints": {
            "scanPrimaryLocationHash": "c7b9afabe502631a",
            "scanFileHash": "81fabbf406b37f73"
          },
          "ruleId": "S1000",
          "ruleIndex": 3
        },
        {
          "message": {
            "markdown": "",
            "text": "unnecessary assignment to the blank identifier."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "\tfor key, _ := range index.models[endpoint] {\n"
                  },
                  "startLine": 94
                },
                "artifactLocation": {
                  "uri": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tools/serving-bridge/model.go"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\n\tfor key, _ := range index.models[endpoint] {\n"
                  },
                  "endLine": 94,
                  "startLine": 93
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "LOW",
            "issue_tags": {}
          },
          "baselineState": "new",
          "partialFingerprints": {
            "scanPrimaryLocationHash": "b17ab5afc6c1b45d",
            "scanFileHash": "4481bd7fb8e4ab18"
          },
          "ruleId": "S1005",
          "ruleIndex": 4
        },
        {
          "message": {
            "markdown": "",
            "text": "this value of data is never used."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "\tdata := []byte{}\n"
                  },
                  "startLine": 44
                },
                "artifactLocation": {
                  "uri": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tools/serving-bridge/tfx_config.go"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\n\tdata := []byte{}\n"
                  },
                  "endLine": 44,
                  "startLine": 43
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM",
            "issue_tags": {}
          },
          "baselineState": "new",
          "partialFingerprints": {
            "scanPrimaryLocationHash": "7e6bb61d90fc1949",
            "scanFileHash": "9e27b59b6b5e0b35"
          },
          "ruleId": "SA4006",
          "ruleIndex": 5
        },
        {
          "message": {
            "markdown": "",
            "text": "this value of errGo is never used."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "\t\terrGo := errors.New(\"\")\n"
                  },
                  "startLine": 48
                },
                "artifactLocation": {
                  "uri": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tools/serving-bridge/tfx_config.go"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\tif len(cfg.tfxConfigFn) != 0 {\n\t\terrGo := errors.New(\"\")\n"
                  },
                  "endLine": 48,
                  "startLine": 47
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM",
            "issue_tags": {}
          },
          "baselineState": "new",
          "partialFingerprints": {
            "scanPrimaryLocationHash": "5bbf1e5c631a19fd",
            "scanFileHash": "9e27b59b6b5e0b35"
          },
          "ruleId": "SA4006",
          "ruleIndex": 5
        },
        {
          "message": {
            "markdown": "",
            "text": "New is a pure function but its return value is ignored."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "\t\terrGo := errors.New(\"\")\n"
                  },
                  "startLine": 48
                },
                "artifactLocation": {
                  "uri": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tools/serving-bridge/tfx_config.go"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\tif len(cfg.tfxConfigFn) != 0 {\n\t\terrGo := errors.New(\"\")\n"
                  },
                  "endLine": 48,
                  "startLine": 47
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "MEDIUM",
            "issue_severity": "MEDIUM",
            "issue_tags": {}
          },
          "baselineState": "new",
          "partialFingerprints": {
            "scanPrimaryLocationHash": "5bbf1e5c631a19fd",
            "scanFileHash": "9e27b59b6b5e0b35"
          },
          "ruleId": "SA4017",
          "ruleIndex": 6
        }
      ],
      "automationDetails": {
        "description": {
          "text": "Static Analysis Security Test results using @ShiftLeft/sast-scan"
        },
        "guid": "bcba3b14-5d25-4507-b9c4-da8e3fa863ff"
      },
      "versionControlProvenance": [
        {
          "branch": "feature/376_AWS_MMQ",
          "repositoryUri": "https://github.com/leaf-ai/studio-go-runner",
          "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace"
        }
      ]
    }
  ],
  "version": "2.1.0",
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "inlineExternalProperties": [
    {
      "guid": "bcba3b14-5d25-4507-b9c4-da8e3fa863ff",
      "runGuid": "d802fabb-b8a2-45c6-a211-5ee6e1dc2133"
    }
  ]
}