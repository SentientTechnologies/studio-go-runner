{"findings": [{"app": "studio-go-runner", "type": "extscan", "title": "TLS MinVersion too low.", "description": "The software does not validate, or incorrectly validates, a certificate.\n\n## Additional information\n\n**[CWE-295](https://cwe.mitre.org/data/definitions/295.html)**", "internal_id": "CWE-295/bf0cfd9b77a3aed7a50ca66ee8063e7c", "severity": "moderate", "owasp_category": "a3-sensitive-data-exposure", "category": "CWE-295", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "TLS MinVersion too low.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/internal/s3/s3.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CWE-295", "ruleName": "", "contextText": "// Copyright 2018-2021 (c) The Go Service Components authors. All rights reserved. Issued under the Apache 2.0 License.\n", "snippetText": "// Copyright 2018-2021 (c) The Go Service Components authors. All rights reserved. Issued under the Apache 2.0 License.\n\n"}, "tags": [{"key": "cwe_category", "value": "295", "shiftleft_managed": true}]}, {"app": "studio-go-runner", "type": "extscan", "title": "TLS MinVersion too low.", "description": "The software does not validate, or incorrectly validates, a certificate.\n\n## Additional information\n\n**[CWE-295](https://cwe.mitre.org/data/definitions/295.html)**", "internal_id": "CWE-295/bf0cfd9b77a3aed7a50ca66ee8063e7c", "severity": "moderate", "owasp_category": "a3-sensitive-data-exposure", "category": "CWE-295", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "TLS MinVersion too low.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/internal/s3/s3.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CWE-295", "ruleName": "", "contextText": "// Copyright 2018-2021 (c) The Go Service Components authors. All rights reserved. Issued under the Apache 2.0 License.\n", "snippetText": "// Copyright 2018-2021 (c) The Go Service Components authors. All rights reserved. Issued under the Apache 2.0 License.\n\n"}, "tags": [{"key": "cwe_category", "value": "295", "shiftleft_managed": true}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Potential file inclusion via variable.", "description": "The software uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the software does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\n\n## Additional information\n\n**[CWE-22](https://cwe.mitre.org/data/definitions/22.html)**", "internal_id": "CWE-22/db7477ccfee220c632271db41f969279", "severity": "moderate", "owasp_category": "a5-broken-access-control", "category": "CWE-22", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Potential file inclusion via variable.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/internal/s3/s3.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 425, "ruleId": "CWE-22", "ruleName": "", "contextText": "\t\t\t\tfile, errGo := os.OpenFile(path, os.O_CREATE|os.O_TRUNC|os.O_WRONLY, os.FileMode(header.Mode))\n", "snippetText": "\n\t\t\t\tfile, errGo := os.OpenFile(path, os.O_CREATE|os.O_TRUNC|os.O_WRONLY, os.FileMode(header.Mode))\n"}, "tags": [{"key": "cwe_category", "value": "22", "shiftleft_managed": true}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Potential file inclusion via variable.", "description": "The software uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the software does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\n\n## Additional information\n\n**[CWE-22](https://cwe.mitre.org/data/definitions/22.html)**", "internal_id": "CWE-22/4427834d490be7c5bb0412c80bc81475", "severity": "moderate", "owasp_category": "a5-broken-access-control", "category": "CWE-22", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Potential file inclusion via variable.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/internal/runner/reverse_file.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 43, "ruleId": "CWE-22", "ruleName": "", "contextText": "\treaderFile, errGo := os.Open(fn)\n", "snippetText": "\treader = &ReverseReader{}\n\treaderFile, errGo := os.Open(fn)\n"}, "tags": [{"key": "cwe_category", "value": "22", "shiftleft_managed": true}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Potential file inclusion via variable.", "description": "The software uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the software does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\n\n## Additional information\n\n**[CWE-22](https://cwe.mitre.org/data/definitions/22.html)**", "internal_id": "CWE-22/81ba9a68e47b2e22b9e1307909bf80ee", "severity": "moderate", "owasp_category": "a5-broken-access-control", "category": "CWE-22", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Potential file inclusion via variable.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/internal/runner/objectstore.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 417, "ruleId": "CWE-22", "ruleName": "", "contextText": "\t\tfile, errGo := os.OpenFile(partial, os.O_CREATE|os.O_EXCL|os.O_WRONLY, 0600)\n", "snippetText": "\t\t//\n\t\tfile, errGo := os.OpenFile(partial, os.O_CREATE|os.O_EXCL|os.O_WRONLY, 0600)\n"}, "tags": [{"key": "cwe_category", "value": "22", "shiftleft_managed": true}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Potential file inclusion via variable.", "description": "The software uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the software does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\n\n## Additional information\n\n**[CWE-22](https://cwe.mitre.org/data/definitions/22.html)**", "internal_id": "CWE-22/f084150ee84f99ecb709dfd13dd76b06", "severity": "moderate", "owasp_category": "a5-broken-access-control", "category": "CWE-22", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Potential file inclusion via variable.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/internal/runner/localstorage.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 141, "ruleId": "CWE-22", "ruleName": "", "contextText": "\t\t\tfile, errGo := os.OpenFile(path, os.O_CREATE|os.O_TRUNC|os.O_WRONLY, info.Mode())\n", "snippetText": "\n\t\t\tfile, errGo := os.OpenFile(path, os.O_CREATE|os.O_TRUNC|os.O_WRONLY, info.Mode())\n"}, "tags": [{"key": "cwe_category", "value": "22", "shiftleft_managed": true}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Potential file inclusion via variable.", "description": "The software uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the software does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\n\n## Additional information\n\n**[CWE-22](https://cwe.mitre.org/data/definitions/22.html)**", "internal_id": "CWE-22/90db8fc0080bd8887c1762ae6776e457", "severity": "moderate", "owasp_category": "a5-broken-access-control", "category": "CWE-22", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Potential file inclusion via variable.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/internal/io/io.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 72, "ruleId": "CWE-22", "ruleName": "", "contextText": "\tsrc, errGo := os.Open(srcFN)\n", "snippetText": "\n\tsrc, errGo := os.Open(srcFN)\n"}, "tags": [{"key": "cwe_category", "value": "22", "shiftleft_managed": true}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Potential file inclusion via variable.", "description": "The software uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the software does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\n\n## Additional information\n\n**[CWE-22](https://cwe.mitre.org/data/definitions/22.html)**", "internal_id": "CWE-22/6a9362804d71fddb107072fe8ed9a0e6", "severity": "moderate", "owasp_category": "a5-broken-access-control", "category": "CWE-22", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Potential file inclusion via variable.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/internal/defense/secret_store.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 93, "ruleId": "CWE-22", "ruleName": "", "contextText": "\tif passphrase, errGo = ioutil.ReadFile(filepath.Join(passphraseDir, \"ssh-passphrase\")); errGo != nil {\n", "snippetText": "\t}\n\tif passphrase, errGo = ioutil.ReadFile(filepath.Join(passphraseDir, \"ssh-passphrase\")); errGo != nil {\n"}, "tags": [{"key": "cwe_category", "value": "22", "shiftleft_managed": true}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Potential file inclusion via variable.", "description": "The software uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the software does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\n\n## Additional information\n\n**[CWE-22](https://cwe.mitre.org/data/definitions/22.html)**", "internal_id": "CWE-22/8f69572257a46daa1b67737a5163dd1a", "severity": "moderate", "owasp_category": "a5-broken-access-control", "category": "CWE-22", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Potential file inclusion via variable.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/internal/defense/secret_store.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 90, "ruleId": "CWE-22", "ruleName": "", "contextText": "\tif privatePEM, errGo = ioutil.ReadFile(filepath.Join(cryptoDir, \"ssh-privatekey\")); errGo != nil {\n", "snippetText": "\t}\n\tif privatePEM, errGo = ioutil.ReadFile(filepath.Join(cryptoDir, \"ssh-privatekey\")); errGo != nil {\n"}, "tags": [{"key": "cwe_category", "value": "22", "shiftleft_managed": true}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Potential file inclusion via variable.", "description": "The software uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the software does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\n\n## Additional information\n\n**[CWE-22](https://cwe.mitre.org/data/definitions/22.html)**", "internal_id": "CWE-22/bd4b11665c13cd97576876ce17963536", "severity": "moderate", "owasp_category": "a5-broken-access-control", "category": "CWE-22", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Potential file inclusion via variable.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/internal/defense/secret_store.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 87, "ruleId": "CWE-22", "ruleName": "", "contextText": "\tif publicPEM, errGo = ioutil.ReadFile(filepath.Join(cryptoDir, \"ssh-publickey\")); errGo != nil {\n", "snippetText": "\n\tif publicPEM, errGo = ioutil.ReadFile(filepath.Join(cryptoDir, \"ssh-publickey\")); errGo != nil {\n"}, "tags": [{"key": "cwe_category", "value": "22", "shiftleft_managed": true}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Potential file inclusion via variable.", "description": "The software uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the software does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\n\n## Additional information\n\n**[CWE-22](https://cwe.mitre.org/data/definitions/22.html)**", "internal_id": "CWE-22/9297d062b11572021a3e673703a6f3f5", "severity": "moderate", "owasp_category": "a5-broken-access-control", "category": "CWE-22", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Potential file inclusion via variable.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/internal/defense/dynamic_store.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 238, "ruleId": "CWE-22", "ruleName": "", "contextText": "\tdata, errGo := ioutil.ReadFile(fn)\n", "snippetText": "func (s *DynamicStore) update(fn string) (err kv.Error) {\n\tdata, errGo := ioutil.ReadFile(fn)\n"}, "tags": [{"key": "cwe_category", "value": "22", "shiftleft_managed": true}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Potential file inclusion via variable.", "description": "The software uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the software does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\n\n## Additional information\n\n**[CWE-22](https://cwe.mitre.org/data/definitions/22.html)**", "internal_id": "CWE-22/8a7e7bca29e68909081cfd0903d1a368", "severity": "moderate", "owasp_category": "a5-broken-access-control", "category": "CWE-22", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Potential file inclusion via variable.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/cmd/runner/studio_run.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1323, "ruleId": "CWE-22", "ruleName": "", "contextText": "\t\t\t\t\toutput, errGo := ioutil.ReadFile(outputFN)\n", "snippetText": "\t\t\t\t\t// that\n\t\t\t\t\toutput, errGo := ioutil.ReadFile(outputFN)\n"}, "tags": [{"key": "cwe_category", "value": "22", "shiftleft_managed": true}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Potential file inclusion via variable.", "description": "The software uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the software does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\n\n## Additional information\n\n**[CWE-22](https://cwe.mitre.org/data/definitions/22.html)**", "internal_id": "CWE-22/7edc83bdae7f8a5f23e4ba3d59a81941", "severity": "moderate", "owasp_category": "a5-broken-access-control", "category": "CWE-22", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Potential file inclusion via variable.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/cmd/runner/studio_run.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 527, "ruleId": "CWE-22", "ruleName": "", "contextText": "\tarchive, errGo := os.Open(archiveName)\n", "snippetText": "\n\tarchive, errGo := os.Open(archiveName)\n"}, "tags": [{"key": "cwe_category", "value": "22", "shiftleft_managed": true}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Potential file inclusion via variable.", "description": "The software uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the software does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\n\n## Additional information\n\n**[CWE-22](https://cwe.mitre.org/data/definitions/22.html)**", "internal_id": "CWE-22/4403c2073c80f8de8751b369daafe406", "severity": "moderate", "owasp_category": "a5-broken-access-control", "category": "CWE-22", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Potential file inclusion via variable.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/cmd/runner/processor.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1243, "ruleId": "CWE-22", "ruleName": "", "contextText": "\tf, errGo := os.OpenFile(fn, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0600)\n", "snippetText": "\t}\n\tf, errGo := os.OpenFile(fn, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0600)\n"}, "tags": [{"key": "cwe_category", "value": "22", "shiftleft_managed": true}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Potential file inclusion via variable.", "description": "The software uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the software does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\n\n## Additional information\n\n**[CWE-22](https://cwe.mitre.org/data/definitions/22.html)**", "internal_id": "CWE-22/3d4b488e70ad55f29b2b067a8cf69413", "severity": "moderate", "owasp_category": "a5-broken-access-control", "category": "CWE-22", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Potential file inclusion via variable.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/cmd/runner/processor.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 439, "ruleId": "CWE-22", "ruleName": "", "contextText": "\tjsonDestination, errGo := os.OpenFile(jsonDest, os.O_TRUNC|os.O_CREATE|os.O_WRONLY, 0600)\n", "snippetText": "\t// If we need to scrape the file then we should scan it line by line\n\tjsonDestination, errGo := os.OpenFile(jsonDest, os.O_TRUNC|os.O_CREATE|os.O_WRONLY, 0600)\n"}, "tags": [{"key": "cwe_category", "value": "22", "shiftleft_managed": true}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Potential file inclusion via variable.", "description": "The software uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the software does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\n\n## Additional information\n\n**[CWE-22](https://cwe.mitre.org/data/definitions/22.html)**", "internal_id": "CWE-22/c4db89a0731e4413b9d6ba50cb888241", "severity": "moderate", "owasp_category": "a5-broken-access-control", "category": "CWE-22", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Potential file inclusion via variable.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/cmd/runner/processor.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 423, "ruleId": "CWE-22", "ruleName": "", "contextText": "\tdestination, errGo := os.OpenFile(dest, os.O_TRUNC|os.O_CREATE|os.O_WRONLY, 0600)\n", "snippetText": "\n\tdestination, errGo := os.OpenFile(dest, os.O_TRUNC|os.O_CREATE|os.O_WRONLY, 0600)\n"}, "tags": [{"key": "cwe_category", "value": "22", "shiftleft_managed": true}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Potential HTTP request made with variable url.", "description": "The software constructs a string for a command to executed by a separate component in another control sphere, but it does not properly delimit the intended arguments, options, or switches within that command string.\n\n## Additional information\n\n**[CWE-88](https://cwe.mitre.org/data/definitions/88.html)**", "internal_id": "CWE-88/6b2b4adce92992ff5be7471ed2c7d222", "severity": "moderate", "owasp_category": "", "category": "CWE-88", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Potential HTTP request made with variable url.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/cmd/runner/studio_run.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 340, "ruleId": "CWE-88", "ruleName": "", "contextText": "\tresp, errGo := http.Get(download)\n", "snippetText": "\t// Get the data\n\tresp, errGo := http.Get(download)\n"}, "tags": [{"key": "cwe_category", "value": "88", "shiftleft_managed": true}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Potential DoS vulnerability via decompression bomb.", "description": "The software does not handle or incorrectly handles a compressed input with a very high compression ratio that produces a large output.\n\n## Additional information\n\n**[CWE-409](https://cwe.mitre.org/data/definitions/409.html)**", "internal_id": "CWE-409/e6ab1fe9d2163bb5011afd4bb20c059d", "severity": "moderate", "owasp_category": "", "category": "CWE-409", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Potential DoS vulnerability via decompression bomb.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/internal/s3/s3.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 430, "ruleId": "CWE-409", "ruleName": "", "contextText": "\t\t\t\t_, errGo = io.Copy(file, tarReader)\n", "snippetText": "\n\t\t\t\t_, errGo = io.Copy(file, tarReader)\n"}, "tags": [{"key": "cwe_category", "value": "409", "shiftleft_managed": true}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Potential DoS vulnerability via decompression bomb.", "description": "The software does not handle or incorrectly handles a compressed input with a very high compression ratio that produces a large output.\n\n## Additional information\n\n**[CWE-409](https://cwe.mitre.org/data/definitions/409.html)**", "internal_id": "CWE-409/0046d148127c5cc9eebbfff5c51a131e", "severity": "moderate", "owasp_category": "", "category": "CWE-409", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Potential DoS vulnerability via decompression bomb.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/internal/runner/localstorage.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 146, "ruleId": "CWE-409", "ruleName": "", "contextText": "\t\t\t_, errGo = io.Copy(file, tarReader)\n", "snippetText": "\n\t\t\t_, errGo = io.Copy(file, tarReader)\n"}, "tags": [{"key": "cwe_category", "value": "409", "shiftleft_managed": true}]}, {"app": "studio-go-runner", "type": "extscan", "title": "File traversal when extracting zip/tar archive.", "description": "The software uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the software does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\n\n## Additional information\n\n**[CWE-22](https://cwe.mitre.org/data/definitions/22.html)**", "internal_id": "CWE-22/f22e3b704430987ebdc47292e3551c53", "severity": "moderate", "owasp_category": "a5-broken-access-control", "category": "CWE-22", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "File traversal when extracting zip/tar archive.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/internal/s3/s3.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 397, "ruleId": "CWE-22", "ruleName": "", "contextText": "\t\t\tpath, _ := filepath.Abs(filepath.Join(output, header.Name))\n", "snippetText": "\n\t\t\tpath, _ := filepath.Abs(filepath.Join(output, header.Name))\n"}, "tags": [{"key": "cwe_category", "value": "22", "shiftleft_managed": true}]}, {"app": "studio-go-runner", "type": "extscan", "title": "File traversal when extracting zip/tar archive.", "description": "The software uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the software does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\n\n## Additional information\n\n**[CWE-22](https://cwe.mitre.org/data/definitions/22.html)**", "internal_id": "CWE-22/0fda34441425c1443c26a1b5d4098fe9", "severity": "moderate", "owasp_category": "a5-broken-access-control", "category": "CWE-22", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "File traversal when extracting zip/tar archive.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/internal/runner/localstorage.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 128, "ruleId": "CWE-22", "ruleName": "", "contextText": "\t\t\tpath, _ := filepath.Abs(filepath.Join(output, header.Name))\n", "snippetText": "\n\t\t\tpath, _ := filepath.Abs(filepath.Join(output, header.Name))\n"}, "tags": [{"key": "cwe_category", "value": "22", "shiftleft_managed": true}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Expect file permissions to be 0600 or less.", "description": "The product, upon installation, sets incorrect permissions for an object that exposes it to an unintended actor.\n\n## Additional information\n\n**[CWE-276](https://cwe.mitre.org/data/definitions/276.html)**", "internal_id": "CWE-276/14b3fc889ad00c292981cd81b20f498f", "severity": "moderate", "owasp_category": "", "category": "CWE-276", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Expect file permissions to be 0600 or less.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/cmd/runner/studio_run.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 359, "ruleId": "CWE-276", "ruleName": "", "contextText": "\tif errGo := os.Chmod(fn, 0777); errGo != nil {\n", "snippetText": "\t// Having downloaded the administration CLI tool set it to be executable\n\tif errGo := os.Chmod(fn, 0777); errGo != nil {\n"}, "tags": [{"key": "cwe_category", "value": "276", "shiftleft_managed": true}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Expect file permissions to be 0600 or less.", "description": "The product, upon installation, sets incorrect permissions for an object that exposes it to an unintended actor.\n\n## Additional information\n\n**[CWE-276](https://cwe.mitre.org/data/definitions/276.html)**", "internal_id": "CWE-276/98e0e25ed6c2be91dd8efba40d45bd42", "severity": "moderate", "owasp_category": "", "category": "CWE-276", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Expect file permissions to be 0600 or less.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/build.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 173, "ruleId": "CWE-276", "ruleName": "", "contextText": "\tlicf, errGo := os.OpenFile(\"licenses.manifest\", os.O_WRONLY|os.O_CREATE, 0644)\n", "snippetText": "\t}\n\tlicf, errGo := os.OpenFile(\"licenses.manifest\", os.O_WRONLY|os.O_CREATE, 0644)\n"}, "tags": [{"key": "cwe_category", "value": "276", "shiftleft_managed": true}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Expect WriteFile permissions to be 0600 or less.", "description": "The product, upon installation, sets incorrect permissions for an object that exposes it to an unintended actor.\n\n## Additional information\n\n**[CWE-276](https://cwe.mitre.org/data/definitions/276.html)**", "internal_id": "CWE-276/3ccb6d7a73e49a54ff3cf970db82ed7a", "severity": "moderate", "owasp_category": "", "category": "CWE-276", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Expect WriteFile permissions to be 0600 or less.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/internal/runner/singularity.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 263, "ruleId": "CWE-276", "ruleName": "", "contextText": "\tif errGo := ioutil.WriteFile(fn, content.Bytes(), 0700); errGo != nil {\n", "snippetText": "\n\tif errGo := ioutil.WriteFile(fn, content.Bytes(), 0700); errGo != nil {\n"}, "tags": [{"key": "cwe_category", "value": "276", "shiftleft_managed": true}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Expect WriteFile permissions to be 0600 or less.", "description": "The product, upon installation, sets incorrect permissions for an object that exposes it to an unintended actor.\n\n## Additional information\n\n**[CWE-276](https://cwe.mitre.org/data/definitions/276.html)**", "internal_id": "CWE-276/e10f6d64818a3c752cbfad291dbf8893", "severity": "moderate", "owasp_category": "", "category": "CWE-276", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Expect WriteFile permissions to be 0600 or less.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/internal/runner/singularity.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 206, "ruleId": "CWE-276", "ruleName": "", "contextText": "\tif errGo := ioutil.WriteFile(fn, content.Bytes(), 0700); errGo != nil {\n", "snippetText": "\n\tif errGo := ioutil.WriteFile(fn, content.Bytes(), 0700); errGo != nil {\n"}, "tags": [{"key": "cwe_category", "value": "276", "shiftleft_managed": true}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Expect WriteFile permissions to be 0600 or less.", "description": "The product, upon installation, sets incorrect permissions for an object that exposes it to an unintended actor.\n\n## Additional information\n\n**[CWE-276](https://cwe.mitre.org/data/definitions/276.html)**", "internal_id": "CWE-276/ef53664bfa7e46ba26815fedd499b74f", "severity": "moderate", "owasp_category": "", "category": "CWE-276", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Expect WriteFile permissions to be 0600 or less.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/internal/runner/pythonenv.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 342, "ruleId": "CWE-276", "ruleName": "", "contextText": "\tif errGo = ioutil.WriteFile(p.Script, content.Bytes(), 0700); errGo != nil {\n", "snippetText": "\n\tif errGo = ioutil.WriteFile(p.Script, content.Bytes(), 0700); errGo != nil {\n"}, "tags": [{"key": "cwe_category", "value": "276", "shiftleft_managed": true}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Expect WriteFile permissions to be 0600 or less.", "description": "The product, upon installation, sets incorrect permissions for an object that exposes it to an unintended actor.\n\n## Additional information\n\n**[CWE-276](https://cwe.mitre.org/data/definitions/276.html)**", "internal_id": "CWE-276/95031edd03c6ffc2fa39b1c143151cb5", "severity": "moderate", "owasp_category": "", "category": "CWE-276", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Expect WriteFile permissions to be 0600 or less.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/cmd/runner/studio_run.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1276, "ruleId": "CWE-276", "ruleName": "", "contextText": "\t\t\tif errGo := ioutil.WriteFile(script, cmdLine.Bytes(), 0700); errGo != nil {\n", "snippetText": "\t\t\tscript := filepath.Join(tmpDir, \"response-capture.sh\")\n\t\t\tif errGo := ioutil.WriteFile(script, cmdLine.Bytes(), 0700); errGo != nil {\n"}, "tags": [{"key": "cwe_category", "value": "276", "shiftleft_managed": true}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Deferring unsafe method \"Close\" on type \"*os.File\".", "description": "The software does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the software.\n\n## Additional information\n\n**[CWE-703](https://cwe.mitre.org/data/definitions/703.html)**", "internal_id": "CWE-703/e9fd5988f662935de733aa8209271f2d", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CWE-703", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Deferring unsafe method \"Close\" on type \"*os.File\".", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/internal/s3/s3.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 482, "ruleId": "CWE-703", "ruleName": "", "contextText": "\tdefer file.Close()\n", "snippetText": "\t}\n\tdefer file.Close()\n"}, "tags": [{"key": "cwe_category", "value": "703", "shiftleft_managed": true}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Deferring unsafe method \"Close\" on type \"*os.File\".", "description": "The software does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the software.\n\n## Additional information\n\n**[CWE-703](https://cwe.mitre.org/data/definitions/703.html)**", "internal_id": "CWE-703/5980c1bd9b6879e62fcb7e7afa210a49", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CWE-703", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Deferring unsafe method \"Close\" on type \"*os.File\".", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/internal/s3/s3.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 450, "ruleId": "CWE-703", "ruleName": "", "contextText": "\t\tdefer f.Close()\n", "snippetText": "\t\t}\n\t\tdefer f.Close()\n"}, "tags": [{"key": "cwe_category", "value": "703", "shiftleft_managed": true}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Deferring unsafe method \"Close\" on type \"*os.File\".", "description": "The software does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the software.\n\n## Additional information\n\n**[CWE-703](https://cwe.mitre.org/data/definitions/703.html)**", "internal_id": "CWE-703/04c8430bfbe9908071fd8916ace75595", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CWE-703", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Deferring unsafe method \"Close\" on type \"*os.File\".", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/internal/runner/localstorage.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 158, "ruleId": "CWE-703", "ruleName": "", "contextText": "\t\tdefer f.Close()\n", "snippetText": "\t\t}\n\t\tdefer f.Close()\n"}, "tags": [{"key": "cwe_category", "value": "703", "shiftleft_managed": true}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Deferring unsafe method \"Close\" on type \"*os.File\".", "description": "The software does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the software.\n\n## Additional information\n\n**[CWE-703](https://cwe.mitre.org/data/definitions/703.html)**", "internal_id": "CWE-703/6ba3f90f595b9c17314a8925e09ebd50", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CWE-703", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Deferring unsafe method \"Close\" on type \"*os.File\".", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/internal/runner/localstorage.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 86, "ruleId": "CWE-703", "ruleName": "", "contextText": "\tdefer obj.Close()\n", "snippetText": "\t}\n\tdefer obj.Close()\n"}, "tags": [{"key": "cwe_category", "value": "703", "shiftleft_managed": true}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Deferring unsafe method \"Close\" on type \"*os.File\".", "description": "The software does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the software.\n\n## Additional information\n\n**[CWE-703](https://cwe.mitre.org/data/definitions/703.html)**", "internal_id": "CWE-703/2cb150d62fa86284ea84f2256cc011d6", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CWE-703", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Deferring unsafe method \"Close\" on type \"*os.File\".", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/internal/io/io.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 82, "ruleId": "CWE-703", "ruleName": "", "contextText": "\tdefer dst.Close()\n", "snippetText": "\t}\n\tdefer dst.Close()\n"}, "tags": [{"key": "cwe_category", "value": "703", "shiftleft_managed": true}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Deferring unsafe method \"Close\" on type \"*os.File\".", "description": "The software does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the software.\n\n## Additional information\n\n**[CWE-703](https://cwe.mitre.org/data/definitions/703.html)**", "internal_id": "CWE-703/5121f1229cb4a7083da3fec326f4d830", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CWE-703", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Deferring unsafe method \"Close\" on type \"*os.File\".", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/internal/io/io.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 76, "ruleId": "CWE-703", "ruleName": "", "contextText": "\tdefer src.Close()\n", "snippetText": "\t}\n\tdefer src.Close()\n"}, "tags": [{"key": "cwe_category", "value": "703", "shiftleft_managed": true}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Deferring unsafe method \"Close\" on type \"*os.File\".", "description": "The software does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the software.\n\n## Additional information\n\n**[CWE-703](https://cwe.mitre.org/data/definitions/703.html)**", "internal_id": "CWE-703/baf52ef69e500d5d3d4f195dd3b339c3", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CWE-703", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Deferring unsafe method \"Close\" on type \"*os.File\".", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/internal/io/io.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 29, "ruleId": "CWE-703", "ruleName": "", "contextText": "\tdefer file.Close()\n", "snippetText": "\t}\n\tdefer file.Close()\n"}, "tags": [{"key": "cwe_category", "value": "703", "shiftleft_managed": true}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Deferring unsafe method \"Close\" on type \"*os.File\".", "description": "The software does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the software.\n\n## Additional information\n\n**[CWE-703](https://cwe.mitre.org/data/definitions/703.html)**", "internal_id": "CWE-703/a01764f8a4f9618eab8bcefd781bd98a", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CWE-703", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Deferring unsafe method \"Close\" on type \"*os.File\".", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/internal/aws/aws.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 25, "ruleId": "CWE-703", "ruleName": "", "contextText": "\tdefer uuidFile.Close()\n", "snippetText": "\t}\n\tdefer uuidFile.Close()\n"}, "tags": [{"key": "cwe_category", "value": "703", "shiftleft_managed": true}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Deferring unsafe method \"Close\" on type \"*os.File\".", "description": "The software does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the software.\n\n## Additional information\n\n**[CWE-703](https://cwe.mitre.org/data/definitions/703.html)**", "internal_id": "CWE-703/53fe57d230445d74941b997c45841245", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CWE-703", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Deferring unsafe method \"Close\" on type \"*os.File\".", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/cmd/runner/studio_run.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 531, "ruleId": "CWE-703", "ruleName": "", "contextText": "\tdefer archive.Close()\n", "snippetText": "\t}\n\tdefer archive.Close()\n"}, "tags": [{"key": "cwe_category", "value": "703", "shiftleft_managed": true}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Deferring unsafe method \"Close\" on type \"*os.File\".", "description": "The software does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the software.\n\n## Additional information\n\n**[CWE-703](https://cwe.mitre.org/data/definitions/703.html)**", "internal_id": "CWE-703/32323d878768fc0b762b7036cf1f501b", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CWE-703", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Deferring unsafe method \"Close\" on type \"*os.File\".", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/cmd/runner/studio_run.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 337, "ruleId": "CWE-703", "ruleName": "", "contextText": "\tdefer out.Close()\n", "snippetText": "\t}\n\tdefer out.Close()\n"}, "tags": [{"key": "cwe_category", "value": "703", "shiftleft_managed": true}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Deferring unsafe method \"Close\" on type \"*os.File\".", "description": "The software does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the software.\n\n## Additional information\n\n**[CWE-703](https://cwe.mitre.org/data/definitions/703.html)**", "internal_id": "CWE-703/c8063713a110bee4c51e198edd92baf2", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CWE-703", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Deferring unsafe method \"Close\" on type \"*os.File\".", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/cmd/runner/processor.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1247, "ruleId": "CWE-703", "ruleName": "", "contextText": "\tdefer f.Close()\n", "snippetText": "\t}\n\tdefer f.Close()\n"}, "tags": [{"key": "cwe_category", "value": "703", "shiftleft_managed": true}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Deferring unsafe method \"Close\" on type \"*os.File\".", "description": "The software does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the software.\n\n## Additional information\n\n**[CWE-703](https://cwe.mitre.org/data/definitions/703.html)**", "internal_id": "CWE-703/638386673ddf54d7b590be7d6b006b52", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CWE-703", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Deferring unsafe method \"Close\" on type \"*os.File\".", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/cmd/runner/processor.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 427, "ruleId": "CWE-703", "ruleName": "", "contextText": "\tdefer destination.Close()\n", "snippetText": "\t}\n\tdefer destination.Close()\n"}, "tags": [{"key": "cwe_category", "value": "703", "shiftleft_managed": true}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Deferring unsafe method \"Close\" on type \"*os.File\".", "description": "The software does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the software.\n\n## Additional information\n\n**[CWE-703](https://cwe.mitre.org/data/definitions/703.html)**", "internal_id": "CWE-703/230b47360fc463ba33f350fb5d53ce7a", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CWE-703", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Deferring unsafe method \"Close\" on type \"*os.File\".", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/cmd/runner/processor.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 421, "ruleId": "CWE-703", "ruleName": "", "contextText": "\tdefer source.Close()\n", "snippetText": "\t}\n\tdefer source.Close()\n"}, "tags": [{"key": "cwe_category", "value": "703", "shiftleft_managed": true}]}, {"app": "studio-go-runner", "type": "extscan", "title": "build constraints exclude all Go files in /app/vendor/github.com/karlmutch/go-nvml.", "description": "build constraints exclude all Go files in /app/vendor/github.com/karlmutch/go-nvml.\n\n## Additional information\n\n**[compile](https://staticcheck.io/docs/checks#compile)**", "internal_id": "compile/dc8a4552f00341c26b58c9ed5c27c7a3", "severity": "moderate", "owasp_category": "", "category": "compile", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "build constraints exclude all Go files in /app/vendor/github.com/karlmutch/go-nvml.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "compile", "ruleName": "", "contextText": "", "snippetText": ""}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "don't use Yoda conditions.", "description": "don`t use Yoda conditions.\n\n## Additional information\n\n**[ST1017](https://staticcheck.io/docs/checks#ST1017)**", "internal_id": "ST1017/f76afb88cf02e3f1c64d9a2514c14945", "severity": "moderate", "owasp_category": "", "category": "ST1017", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "don't use Yoda conditions.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/internal/aws/aws.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 40, "ruleId": "ST1017", "ruleName": "", "contextText": "\treturn 0 == bytes.Compare(buffer, signature), nil\n", "snippetText": "\n\treturn 0 == bytes.Compare(buffer, signature), nil\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "should use !bytes.Equal(minifiedRequest, finalPayload) instead.", "description": "should use !bytes.Equal(minifiedRequest, finalPayload) instead.\n\n## Additional information\n\n**[S1004](https://staticcheck.io/docs/checks#S1004)**", "internal_id": "S1004/66268f59036e3333bba967fc3f3ce7b1", "severity": "moderate", "owasp_category": "", "category": "S1004", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "should use !bytes.Equal(minifiedRequest, finalPayload) instead.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/internal/defense/envelope_test.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 145, "ruleId": "S1004", "ruleName": "", "contextText": "\tif bytes.Compare(minifiedRequest, finalPayload) != 0 {\n", "snippetText": "\n\tif bytes.Compare(minifiedRequest, finalPayload) != 0 {\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "don't use Yoda conditions.", "description": "don`t use Yoda conditions.\n\n## Additional information\n\n**[ST1017](https://staticcheck.io/docs/checks#ST1017)**", "internal_id": "ST1017/62c8b2dea0e3f4b8840384c05350fd0f", "severity": "moderate", "owasp_category": "", "category": "ST1017", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "don't use Yoda conditions.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/internal/defense/rsa_test.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 78, "ruleId": "ST1017", "ruleName": "", "contextText": "\tif 0 != bytes.Compare(msg, out) {\n", "snippetText": "\n\tif 0 != bytes.Compare(msg, out) {\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "should use for range instead of for { select {} }.", "description": "should use for range instead of for { select {} }.\n\n## Additional information\n\n**[S1000](https://staticcheck.io/docs/checks#S1000)**", "internal_id": "S1000/66dcb3d3aaad56e0b0e6b130e12e01e1", "severity": "moderate", "owasp_category": "", "category": "S1000", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "should use for range instead of for { select {} }.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/internal/shell/run_python.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 93, "ruleId": "S1000", "ruleName": "", "contextText": "\t\tfor {\n", "snippetText": "\tgo func() {\n\t\tfor {\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "unnecessary assignment to the blank identifier.", "description": "unnecessary assignment to the blank identifier.\n\n## Additional information\n\n**[S1005](https://staticcheck.io/docs/checks#S1005)**", "internal_id": "S1005/4fa1679da7bb62097266cfdbde697670", "severity": "info", "owasp_category": "", "category": "S1005", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "unnecessary assignment to the blank identifier.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tools/serving-bridge/model.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 94, "ruleId": "S1005", "ruleName": "", "contextText": "\tfor key, _ := range index.models[endpoint] {\n", "snippetText": "\n\tfor key, _ := range index.models[endpoint] {\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "this value of data is never used.", "description": "this value of data is never used.\n\n## Additional information\n\n**[SA4006](https://staticcheck.io/docs/checks#SA4006)**", "internal_id": "SA4006/20ccc0ae8ac952cdb50e34cb528fedf4", "severity": "moderate", "owasp_category": "", "category": "SA4006", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "this value of data is never used.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tools/serving-bridge/tfx_config.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 44, "ruleId": "SA4006", "ruleName": "", "contextText": "\tdata := []byte{}\n", "snippetText": "\n\tdata := []byte{}\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "this value of errGo is never used.", "description": "this value of data is never used.\n\n## Additional information\n\n**[SA4006](https://staticcheck.io/docs/checks#SA4006)**", "internal_id": "SA4006/fa48307ecbce9c099912fff6968ebdce", "severity": "moderate", "owasp_category": "", "category": "SA4006", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "this value of errGo is never used.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tools/serving-bridge/tfx_config.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 48, "ruleId": "SA4006", "ruleName": "", "contextText": "\t\terrGo := errors.New(\"\")\n", "snippetText": "\tif len(cfg.tfxConfigFn) != 0 {\n\t\terrGo := errors.New(\"\")\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "New is a pure function but its return value is ignored.", "description": "New is a pure function but its return value is ignored.\n\n## Additional information\n\n**[SA4017](https://staticcheck.io/docs/checks#SA4017)**", "internal_id": "SA4017/4f06d8db58e9e789eeae4dbb688b81bc", "severity": "moderate", "owasp_category": "", "category": "SA4017", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "New is a pure function but its return value is ignored.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tools/serving-bridge/tfx_config.go", "DATA_TYPE": "OSS_SCAN", "lineNumber": 48, "ruleId": "SA4017", "ruleName": "", "contextText": "\t\terrGo := errors.New(\"\")\n", "snippetText": "\tif len(cfg.tfxConfigFn) != 0 {\n\t\terrGo := errors.New(\"\")\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/cce04446748ba465a438c47f9da58423", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/global_config.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 2, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "2 apiVersion: v1\n", "snippetText": "2 apiVersion: v1\nkind: ConfigMap\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/429fb36ea4e9baea8bf808674c06a90d", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_cpu_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 3, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "3 apiVersion: batch/v1beta1\n", "snippetText": "3 apiVersion: batch/v1beta1\nkind: CronJob\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Minimize the admission of root containers.", "description": "CIS Benchmark: **5.2.6**\n\nMinimize the admission of root containers.\n\nContainers may run as any Linux user. Containers which run as the root user, whilst constrained by Container Runtime security features still have a escalated likelihood of container breakout. Ideally, all containers should run as a defined non-UID 0 user. There should be at least one PodSecurityPolicy (PSP) defined which does not permit root users in a container. If you need to run root containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.runAsUser.rule` is set to either `MustRunAsNonRoot` or `MustRunAs` with the range of UIDs not including `0`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  runAsUser:\n    # Require the container to run without root privileges.\n    rule: 'MustRunAsNonRoot'\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_23/040309ccd0297922fecddeef41c9e326", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainers", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of root containers.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_cpu_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 3, "ruleId": "CKV_K8S_23", "ruleName": "RootContainers", "contextText": "3 apiVersion: batch/v1beta1\n", "snippetText": "3 apiVersion: batch/v1beta1\nkind: CronJob\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.6", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Containers should not share the host network namespace.", "description": "CIS Benchmark: **5.2.4**\n\nMinimize the admission of containers wishing to share the host network namespace.\n\nA container running in the host's network namespace could access the local loopback device, and could access network traffic to and from other pods. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to share the host network namespace. If you have need to run containers which require hostNetwork, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.hostNetwork` field is omitted or set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  hostNetwork: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Host namespaces](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#host-namespaces)", "internal_id": "CKV_K8S_19/44b61fe4eb991f67bbae10837ebeb25d", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "SharedHostNetworkNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should not share the host network namespace.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_cpu_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 3, "ruleId": "CKV_K8S_19", "ruleName": "SharedHostNetworkNamespace", "contextText": "3 apiVersion: batch/v1beta1\n", "snippetText": "3 apiVersion: batch/v1beta1\nkind: CronJob\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Containers should run as a high UID to avoid host conflict.", "description": "Containers should run as a high UID to avoid host conflict.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_40/561e8709949bbc4ca654605cc5a7de30", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainersHighUID", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should run as a high UID to avoid host conflict.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_cpu_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 3, "ruleId": "CKV_K8S_40", "ruleName": "RootContainersHighUID", "contextText": "3 apiVersion: batch/v1beta1\n", "snippetText": "3 apiVersion: batch/v1beta1\nkind: CronJob\nmetadata:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Ensure that Service Account Tokens are only mounted where necessary.", "description": "CIS Benchmark: **5.1.6**\n\nEnsure that Service Account Tokens are only mounted where necessary.\n\nMounting service account tokens inside pods can provide an avenue for privilege escalation attacks where an attacker is able to compromise a single pod in the cluster. Avoiding mounting these tokens removes this attack avenue.\n\n## Remediation\n\nModify the definition of pods and service accounts which do not need to mount service account tokens to disable it.\n", "internal_id": "CKV_K8S_38/5ef35331c17d6f2aa458cb95b591d9a0", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ServiceAccountTokens", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that Service Account Tokens are only mounted where necessary.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_cpu_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 3, "ruleId": "CKV_K8S_38", "ruleName": "ServiceAccountTokens", "contextText": "3 apiVersion: batch/v1beta1\n", "snippetText": "3 apiVersion: batch/v1beta1\nkind: CronJob\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.1.6", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "description": "CIS Benchmark: **5.7.2**\n\nEnsure that the seccomp profile is set to docker/default in your pod definitions.\n\nSeccomp (secure computing mode) is used to restrict the set of system calls applications can make, allowing cluster administrators greater control over the security of workloads running in the cluster. Kubernetes disables seccomp profiles by default for historical reasons. You should enable it to ensure that the workloads have restricted actions available within the container.\n\n## Remediation\n\nSeccomp is an alpha feature currently. By default, all alpha features are disabled. So, you would need to enable alpha features in the apiserver by passing \"--feature-gates=AllAlpha=true\" argument.\nEdit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--feature-gates=AllAlpha=true\" KUBE_API_ARGS=\"--feature-gates=AllAlpha=true\". Based on your system, restart the kube-apiserver service.\nFor example:\n```bash\nsystemctl restart kube-apiserver.service\n```\n\nUse annotations to enable the docker/default seccomp profile in your pod definitions. An example is as below:\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: trustworthy-pod\n  annotations:\n    seccomp.security.alpha.kubernetes.io/pod: docker/default\nspec:\n  containers:\n    - name: trustworthy-container\n      image: sotrustworthy:latest\n```\n", "internal_id": "CKV_K8S_31/970d3b59d6f032d0a240181ca04ff616", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "Seccomp", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_cpu_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 3, "ruleId": "CKV_K8S_31", "ruleName": "Seccomp", "contextText": "3 apiVersion: batch/v1beta1\n", "snippetText": "3 apiVersion: batch/v1beta1\nkind: CronJob\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.2", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/13bf470e004a6af6a56507ee69e61c1a", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_cpu_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 64, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "64 apiVersion: v1\n", "snippetText": "64 apiVersion: v1\nkind: ConfigMap\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/60dc3c043999e212ad579cadc5436809", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_cpu_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 77, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "77 apiVersion: v1\n", "snippetText": "77 apiVersion: v1\nkind: ServiceAccount\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/0cb5f8b2eedd1cc02ab6e07fb48ed892", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_cpu_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 96, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "96 apiVersion: rbac.authorization.k8s.io/v1\n", "snippetText": "96 apiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/67af73555e083b304a2c6ef6261522a8", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_cpu_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 108, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "108 apiVersion: v1\n", "snippetText": "108 apiVersion: v1\nkind: Secret\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/0223e3f8a396c22c31ca9070e8c0eac0", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_cpu_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 116, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "116 apiVersion: v1\n", "snippetText": "116 apiVersion: v1\nkind: Secret\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/cbd40bf0641ba6e16a7b7439d314028f", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_cpu_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 124, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "124 apiVersion: apps/v1beta2\n", "snippetText": "124 apiVersion: apps/v1beta2\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Minimize the admission of root containers.", "description": "CIS Benchmark: **5.2.6**\n\nMinimize the admission of root containers.\n\nContainers may run as any Linux user. Containers which run as the root user, whilst constrained by Container Runtime security features still have a escalated likelihood of container breakout. Ideally, all containers should run as a defined non-UID 0 user. There should be at least one PodSecurityPolicy (PSP) defined which does not permit root users in a container. If you need to run root containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.runAsUser.rule` is set to either `MustRunAsNonRoot` or `MustRunAs` with the range of UIDs not including `0`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  runAsUser:\n    # Require the container to run without root privileges.\n    rule: 'MustRunAsNonRoot'\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_23/085dfdd6f4f0d6cb7a9684118e7e3660", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainers", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of root containers.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_cpu_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 124, "ruleId": "CKV_K8S_23", "ruleName": "RootContainers", "contextText": "124 apiVersion: apps/v1beta2\n", "snippetText": "124 apiVersion: apps/v1beta2\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.6", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Containers should run as a high UID to avoid host conflict.", "description": "Containers should run as a high UID to avoid host conflict.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_40/57dc91ea5399f74ced0c4a9b1c2a98fe", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainersHighUID", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should run as a high UID to avoid host conflict.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_cpu_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 124, "ruleId": "CKV_K8S_40", "ruleName": "RootContainersHighUID", "contextText": "124 apiVersion: apps/v1beta2\n", "snippetText": "124 apiVersion: apps/v1beta2\nkind: Deployment\nmetadata:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Ensure that Service Account Tokens are only mounted where necessary.", "description": "CIS Benchmark: **5.1.6**\n\nEnsure that Service Account Tokens are only mounted where necessary.\n\nMounting service account tokens inside pods can provide an avenue for privilege escalation attacks where an attacker is able to compromise a single pod in the cluster. Avoiding mounting these tokens removes this attack avenue.\n\n## Remediation\n\nModify the definition of pods and service accounts which do not need to mount service account tokens to disable it.\n", "internal_id": "CKV_K8S_38/33d501708e16b8b5477ee6eb0f6bc644", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ServiceAccountTokens", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that Service Account Tokens are only mounted where necessary.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_cpu_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 124, "ruleId": "CKV_K8S_38", "ruleName": "ServiceAccountTokens", "contextText": "124 apiVersion: apps/v1beta2\n", "snippetText": "124 apiVersion: apps/v1beta2\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.1.6", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "description": "CIS Benchmark: **5.7.2**\n\nEnsure that the seccomp profile is set to docker/default in your pod definitions.\n\nSeccomp (secure computing mode) is used to restrict the set of system calls applications can make, allowing cluster administrators greater control over the security of workloads running in the cluster. Kubernetes disables seccomp profiles by default for historical reasons. You should enable it to ensure that the workloads have restricted actions available within the container.\n\n## Remediation\n\nSeccomp is an alpha feature currently. By default, all alpha features are disabled. So, you would need to enable alpha features in the apiserver by passing \"--feature-gates=AllAlpha=true\" argument.\nEdit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--feature-gates=AllAlpha=true\" KUBE_API_ARGS=\"--feature-gates=AllAlpha=true\". Based on your system, restart the kube-apiserver service.\nFor example:\n```bash\nsystemctl restart kube-apiserver.service\n```\n\nUse annotations to enable the docker/default seccomp profile in your pod definitions. An example is as below:\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: trustworthy-pod\n  annotations:\n    seccomp.security.alpha.kubernetes.io/pod: docker/default\nspec:\n  containers:\n    - name: trustworthy-container\n      image: sotrustworthy:latest\n```\n", "internal_id": "CKV_K8S_31/4cf2623bc5e0535aa1be4af0b3ec6529", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "Seccomp", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_cpu_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 124, "ruleId": "CKV_K8S_31", "ruleName": "Seccomp", "contextText": "124 apiVersion: apps/v1beta2\n", "snippetText": "124 apiVersion: apps/v1beta2\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.2", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_29/31ef4481824f7963bc2cb97e90a82186", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "PodSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_cpu_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 124, "ruleId": "CKV_K8S_29", "ruleName": "PodSecurityContext", "contextText": "124 apiVersion: apps/v1beta2\n", "snippetText": "124 apiVersion: apps/v1beta2\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Use read-only filesystem for containers where possible.", "description": "Use read-only filesystem for containers where possible.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_22/7a457a97ebd17b4ddf96d21a85271ca7", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadOnlyFilesystem", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Use read-only filesystem for containers where possible.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_cpu_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 20, "ruleId": "CKV_K8S_22", "ruleName": "ReadOnlyFilesystem", "contextText": "20           - name: studioml-go-runner-ecr-cred\n", "snippetText": "20           - name: studioml-go-runner-ecr-cred\n            command:\n            - /bin/sh\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "CPU requests should be set.", "description": "CPU requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_10/11b7b68c8479b95ed56873afc280d98c", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CPURequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "CPU requests should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_cpu_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 20, "ruleId": "CKV_K8S_10", "ruleName": "CPURequests", "contextText": "20           - name: studioml-go-runner-ecr-cred\n", "snippetText": "20           - name: studioml-go-runner-ecr-cred\n            command:\n            - /bin/sh\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Memory requests should be set.", "description": "Memory requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_12/3e81c04315993d4a1500c5c1f416a8a5", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MemoryRequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Memory requests should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_cpu_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 20, "ruleId": "CKV_K8S_12", "ruleName": "MemoryRequests", "contextText": "20           - name: studioml-go-runner-ecr-cred\n", "snippetText": "20           - name: studioml-go-runner-ecr-cred\n            command:\n            - /bin/sh\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Memory limits should be set.", "description": "Memory limits should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_13/93bb586f86a1af7d862790f677892eaa", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MemoryLimits", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Memory limits should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_cpu_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 20, "ruleId": "CKV_K8S_13", "ruleName": "MemoryLimits", "contextText": "20           - name: studioml-go-runner-ecr-cred\n", "snippetText": "20           - name: studioml-go-runner-ecr-cred\n            command:\n            - /bin/sh\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "CPU limits should be set.", "description": "CPU limits should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_11/9a3f11ca58c53066bc429e9a1da6b99f", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CPULimits", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "CPU limits should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_cpu_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 20, "ruleId": "CKV_K8S_11", "ruleName": "CPULimits", "contextText": "20           - name: studioml-go-runner-ecr-cred\n", "snippetText": "20           - name: studioml-go-runner-ecr-cred\n            command:\n            - /bin/sh\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Image Tag should be fixed - not latest or blank.", "description": "Image Tag should be fixed - not latest or blank.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_14/b015dc48ee32d8b5ea0c4c8ba6ff573e", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageTagFixed", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Image Tag should be fixed - not latest or blank.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_cpu_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 20, "ruleId": "CKV_K8S_14", "ruleName": "ImageTagFixed", "contextText": "20           - name: studioml-go-runner-ecr-cred\n", "snippetText": "20           - name: studioml-go-runner-ecr-cred\n            command:\n            - /bin/sh\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Image Pull Policy should be Always.", "description": "Image Pull Policy should be Always.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_15/583996f92b6e9353f729db6dd0ae96d9", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImagePullPolicyAlways", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Image Pull Policy should be Always.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_cpu_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 20, "ruleId": "CKV_K8S_15", "ruleName": "ImagePullPolicyAlways", "contextText": "20           - name: studioml-go-runner-ecr-cred\n", "snippetText": "20           - name: studioml-go-runner-ecr-cred\n            command:\n            - /bin/sh\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Image should use digest.", "description": "Image should use digest.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_43/f70c46e55931b4847fa456ad72ff848a", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageDigest", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Image should use digest.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_cpu_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 20, "ruleId": "CKV_K8S_43", "ruleName": "ImageDigest", "contextText": "20           - name: studioml-go-runner-ecr-cred\n", "snippetText": "20           - name: studioml-go-runner-ecr-cred\n            command:\n            - /bin/sh\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Containers should not run with allowPrivilegeEscalation.", "description": "CIS Benchmark: **5.2.5**\n\nMinimize the admission of containers with allowPrivilegeEscalation.\n\nA container running with the allowPrivilegeEscalation flag set to true may have processes that can gain more privileges than their parent. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to allow privilege escalation. The option exists (and is defaulted to true) to permit setuid binaries to run. If you have need to run containers which use setuid binaries or require privilege escalation, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.allowPrivilegeEscalation` field is set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_20/603f0c8f901862ae155ce398e036e784", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "AllowPrivilegeEscalation", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should not run with allowPrivilegeEscalation.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_cpu_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 20, "ruleId": "CKV_K8S_20", "ruleName": "AllowPrivilegeEscalation", "contextText": "20           - name: studioml-go-runner-ecr-cred\n", "snippetText": "20           - name: studioml-go-runner-ecr-cred\n            command:\n            - /bin/sh\n"}, "tags": [{"key": "cis_category", "value": "5.2.5", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Minimize the admission of containers with the NET_RAW capability.", "description": "CIS Benchmark: **5.2.7**\n\nDo not generally permit containers with the potentially dangerous NET_RAW capability.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. By default this can include potentially dangerous capabilities. With Docker as the container runtime the NET_RAW capability is enabled which may be misused by malicious containers. Ideally, all containers should drop this capability. There should be at least one PodSecurityPolicy (PSP) defined which prevents containers with the NET_RAW capability from launching. If you need to run containers with this capability, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.requiredDropCapabilities` is set to include either `NET_RAW` or `ALL`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  requiredDropCapabilities:\n    - ALL\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_28/ddb79fbb96f24f858079a6f879ab0d7d", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "DropCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with the NET_RAW capability.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_cpu_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 20, "ruleId": "CKV_K8S_28", "ruleName": "DropCapabilities", "contextText": "20           - name: studioml-go-runner-ecr-cred\n", "snippetText": "20           - name: studioml-go-runner-ecr-cred\n            command:\n            - /bin/sh\n"}, "tags": [{"key": "cis_category", "value": "5.2.7", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Minimize the admission of containers with capabilities assigned.", "description": "CIS Benchmark: **5.2.9**\n\nMinimize the admission of containers with capabilities assigned.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. Capabilities are parts of the rights generally granted on a Linux system to the root user. In many cases applications running in containers do not require any capabilities to operate, so from the perspective of the principal of least privilege use of capabilities should be minimized.\n\n## Remediation\n\nReview the use of capabilites in applications runnning on your cluster. Where a namespace contains applicaions which do not require any Linux capabities to operate consider adding a PSP which forbids the admission of containers which do not drop all capabilities.\n\n\n## Additional information\n\n- [Pod Security Policy](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities)", "internal_id": "CKV_K8S_37/cfc6eb6ac93d2e31e6e1a9b4ab1e94d5", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MinimizeCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with capabilities assigned.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_cpu_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 20, "ruleId": "CKV_K8S_37", "ruleName": "MinimizeCapabilities", "contextText": "20           - name: studioml-go-runner-ecr-cred\n", "snippetText": "20           - name: studioml-go-runner-ecr-cred\n            command:\n            - /bin/sh\n"}, "tags": [{"key": "cis_category", "value": "5.2.9", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Use read-only filesystem for containers where possible.", "description": "Use read-only filesystem for containers where possible.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_22/a0e6ff8448bf23501b58ac21b440da62", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadOnlyFilesystem", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Use read-only filesystem for containers where possible.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_cpu_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 148, "ruleId": "CKV_K8S_22", "ruleName": "ReadOnlyFilesystem", "contextText": "148       - name: studioml-go-runner\n", "snippetText": "148       - name: studioml-go-runner\n        envFrom:\n        - configMapRef:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_30/37207143bbe49fde8c3b88f962c391dd", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ContainerSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_cpu_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 148, "ruleId": "CKV_K8S_30", "ruleName": "ContainerSecurityContext", "contextText": "148       - name: studioml-go-runner\n", "snippetText": "148       - name: studioml-go-runner\n        envFrom:\n        - configMapRef:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Liveness Probe Should be Configured.", "description": "Liveness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_8/5d578ca4bbd0428bc0a4a89ff278fb8e", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "LivenessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Liveness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_cpu_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 148, "ruleId": "CKV_K8S_8", "ruleName": "LivenessProbe", "contextText": "148       - name: studioml-go-runner\n", "snippetText": "148       - name: studioml-go-runner\n        envFrom:\n        - configMapRef:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Memory limits should be set.", "description": "Memory limits should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_13/9f575aa6b6f8bbc81fbb199a6d4113d3", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MemoryLimits", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Memory limits should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_cpu_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 148, "ruleId": "CKV_K8S_13", "ruleName": "MemoryLimits", "contextText": "148       - name: studioml-go-runner\n", "snippetText": "148       - name: studioml-go-runner\n        envFrom:\n        - configMapRef:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Readiness Probe Should be Configured.", "description": "Readiness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_9/ea790cf60e54f7d0f014c2f26f8625ff", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadinessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Readiness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_cpu_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 148, "ruleId": "CKV_K8S_9", "ruleName": "ReadinessProbe", "contextText": "148       - name: studioml-go-runner\n", "snippetText": "148       - name: studioml-go-runner\n        envFrom:\n        - configMapRef:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "CPU limits should be set.", "description": "CPU limits should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_11/72881182fd4141739da442a898e8a223", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CPULimits", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "CPU limits should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_cpu_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 148, "ruleId": "CKV_K8S_11", "ruleName": "CPULimits", "contextText": "148       - name: studioml-go-runner\n", "snippetText": "148       - name: studioml-go-runner\n        envFrom:\n        - configMapRef:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Image should use digest.", "description": "Image should use digest.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_43/c9eab0200f5e132647d3d3fb96a119c8", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageDigest", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Image should use digest.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_cpu_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 148, "ruleId": "CKV_K8S_43", "ruleName": "ImageDigest", "contextText": "148       - name: studioml-go-runner\n", "snippetText": "148       - name: studioml-go-runner\n        envFrom:\n        - configMapRef:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Containers should not run with allowPrivilegeEscalation.", "description": "CIS Benchmark: **5.2.5**\n\nMinimize the admission of containers with allowPrivilegeEscalation.\n\nA container running with the allowPrivilegeEscalation flag set to true may have processes that can gain more privileges than their parent. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to allow privilege escalation. The option exists (and is defaulted to true) to permit setuid binaries to run. If you have need to run containers which use setuid binaries or require privilege escalation, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.allowPrivilegeEscalation` field is set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_20/053ca2e0b5c32064ac620718496b22d0", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "AllowPrivilegeEscalation", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should not run with allowPrivilegeEscalation.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_cpu_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 148, "ruleId": "CKV_K8S_20", "ruleName": "AllowPrivilegeEscalation", "contextText": "148       - name: studioml-go-runner\n", "snippetText": "148       - name: studioml-go-runner\n        envFrom:\n        - configMapRef:\n"}, "tags": [{"key": "cis_category", "value": "5.2.5", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Minimize the admission of containers with the NET_RAW capability.", "description": "CIS Benchmark: **5.2.7**\n\nDo not generally permit containers with the potentially dangerous NET_RAW capability.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. By default this can include potentially dangerous capabilities. With Docker as the container runtime the NET_RAW capability is enabled which may be misused by malicious containers. Ideally, all containers should drop this capability. There should be at least one PodSecurityPolicy (PSP) defined which prevents containers with the NET_RAW capability from launching. If you need to run containers with this capability, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.requiredDropCapabilities` is set to include either `NET_RAW` or `ALL`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  requiredDropCapabilities:\n    - ALL\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_28/a5c36b7de737793175de26eaac39963f", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "DropCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with the NET_RAW capability.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_cpu_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 148, "ruleId": "CKV_K8S_28", "ruleName": "DropCapabilities", "contextText": "148       - name: studioml-go-runner\n", "snippetText": "148       - name: studioml-go-runner\n        envFrom:\n        - configMapRef:\n"}, "tags": [{"key": "cis_category", "value": "5.2.7", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Minimize the admission of containers with capabilities assigned.", "description": "CIS Benchmark: **5.2.9**\n\nMinimize the admission of containers with capabilities assigned.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. Capabilities are parts of the rights generally granted on a Linux system to the root user. In many cases applications running in containers do not require any capabilities to operate, so from the perspective of the principal of least privilege use of capabilities should be minimized.\n\n## Remediation\n\nReview the use of capabilites in applications runnning on your cluster. Where a namespace contains applicaions which do not require any Linux capabities to operate consider adding a PSP which forbids the admission of containers which do not drop all capabilities.\n\n\n## Additional information\n\n- [Pod Security Policy](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities)", "internal_id": "CKV_K8S_37/c09640e807281d4a31e824bc8ff56a5e", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MinimizeCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with capabilities assigned.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_cpu_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 148, "ruleId": "CKV_K8S_37", "ruleName": "MinimizeCapabilities", "contextText": "148       - name: studioml-go-runner\n", "snippetText": "148       - name: studioml-go-runner\n        envFrom:\n        - configMapRef:\n"}, "tags": [{"key": "cis_category", "value": "5.2.9", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/72e98a75b25fa83bca439b0cad8213a9", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/azure-samples-tf-mnist-demo.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "1 apiVersion: batch/v1\n", "snippetText": "1 apiVersion: batch/v1\nkind: Job\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Minimize the admission of root containers.", "description": "CIS Benchmark: **5.2.6**\n\nMinimize the admission of root containers.\n\nContainers may run as any Linux user. Containers which run as the root user, whilst constrained by Container Runtime security features still have a escalated likelihood of container breakout. Ideally, all containers should run as a defined non-UID 0 user. There should be at least one PodSecurityPolicy (PSP) defined which does not permit root users in a container. If you need to run root containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.runAsUser.rule` is set to either `MustRunAsNonRoot` or `MustRunAs` with the range of UIDs not including `0`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  runAsUser:\n    # Require the container to run without root privileges.\n    rule: 'MustRunAsNonRoot'\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_23/598c7a62f671eafa5d8aa55248ff0e61", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainers", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of root containers.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/azure-samples-tf-mnist-demo.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_23", "ruleName": "RootContainers", "contextText": "1 apiVersion: batch/v1\n", "snippetText": "1 apiVersion: batch/v1\nkind: Job\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.6", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Containers should run as a high UID to avoid host conflict.", "description": "Containers should run as a high UID to avoid host conflict.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_40/fb5efef336f7152b224357ce5db17288", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainersHighUID", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should run as a high UID to avoid host conflict.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/azure-samples-tf-mnist-demo.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_40", "ruleName": "RootContainersHighUID", "contextText": "1 apiVersion: batch/v1\n", "snippetText": "1 apiVersion: batch/v1\nkind: Job\nmetadata:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Ensure that Service Account Tokens are only mounted where necessary.", "description": "CIS Benchmark: **5.1.6**\n\nEnsure that Service Account Tokens are only mounted where necessary.\n\nMounting service account tokens inside pods can provide an avenue for privilege escalation attacks where an attacker is able to compromise a single pod in the cluster. Avoiding mounting these tokens removes this attack avenue.\n\n## Remediation\n\nModify the definition of pods and service accounts which do not need to mount service account tokens to disable it.\n", "internal_id": "CKV_K8S_38/1687df2648031d39f32d870d8977c4f3", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ServiceAccountTokens", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that Service Account Tokens are only mounted where necessary.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/azure-samples-tf-mnist-demo.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_38", "ruleName": "ServiceAccountTokens", "contextText": "1 apiVersion: batch/v1\n", "snippetText": "1 apiVersion: batch/v1\nkind: Job\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.1.6", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "description": "CIS Benchmark: **5.7.2**\n\nEnsure that the seccomp profile is set to docker/default in your pod definitions.\n\nSeccomp (secure computing mode) is used to restrict the set of system calls applications can make, allowing cluster administrators greater control over the security of workloads running in the cluster. Kubernetes disables seccomp profiles by default for historical reasons. You should enable it to ensure that the workloads have restricted actions available within the container.\n\n## Remediation\n\nSeccomp is an alpha feature currently. By default, all alpha features are disabled. So, you would need to enable alpha features in the apiserver by passing \"--feature-gates=AllAlpha=true\" argument.\nEdit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--feature-gates=AllAlpha=true\" KUBE_API_ARGS=\"--feature-gates=AllAlpha=true\". Based on your system, restart the kube-apiserver service.\nFor example:\n```bash\nsystemctl restart kube-apiserver.service\n```\n\nUse annotations to enable the docker/default seccomp profile in your pod definitions. An example is as below:\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: trustworthy-pod\n  annotations:\n    seccomp.security.alpha.kubernetes.io/pod: docker/default\nspec:\n  containers:\n    - name: trustworthy-container\n      image: sotrustworthy:latest\n```\n", "internal_id": "CKV_K8S_31/8bbe8b4843a89c2389ae6c52b8102143", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "Seccomp", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/azure-samples-tf-mnist-demo.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_31", "ruleName": "Seccomp", "contextText": "1 apiVersion: batch/v1\n", "snippetText": "1 apiVersion: batch/v1\nkind: Job\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.2", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_29/df8e0e470c1686efe10a40c053e845d4", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "PodSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/azure-samples-tf-mnist-demo.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_29", "ruleName": "PodSecurityContext", "contextText": "1 apiVersion: batch/v1\n", "snippetText": "1 apiVersion: batch/v1\nkind: Job\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Use read-only filesystem for containers where possible.", "description": "Use read-only filesystem for containers where possible.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_22/3fd2cf6d977fefdc9b557ea53515e642", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadOnlyFilesystem", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Use read-only filesystem for containers where possible.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/azure-samples-tf-mnist-demo.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 14, "ruleId": "CKV_K8S_22", "ruleName": "ReadOnlyFilesystem", "contextText": "14       - name: samples-tf-mnist-demo\n", "snippetText": "14       - name: samples-tf-mnist-demo\n        image: microsoft/samples-tf-mnist-demo:gpu\n        args: [\"--max_steps\", \"500\"]\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_30/b0aee9f890e2eff2206c8d161a41e6fe", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ContainerSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/azure-samples-tf-mnist-demo.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 14, "ruleId": "CKV_K8S_30", "ruleName": "ContainerSecurityContext", "contextText": "14       - name: samples-tf-mnist-demo\n", "snippetText": "14       - name: samples-tf-mnist-demo\n        image: microsoft/samples-tf-mnist-demo:gpu\n        args: [\"--max_steps\", \"500\"]\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "CPU requests should be set.", "description": "CPU requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_10/de324855be9a198e60b11b537ab0c749", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CPURequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "CPU requests should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/azure-samples-tf-mnist-demo.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 14, "ruleId": "CKV_K8S_10", "ruleName": "CPURequests", "contextText": "14       - name: samples-tf-mnist-demo\n", "snippetText": "14       - name: samples-tf-mnist-demo\n        image: microsoft/samples-tf-mnist-demo:gpu\n        args: [\"--max_steps\", \"500\"]\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Memory requests should be set.", "description": "Memory requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_12/79af30c94b57fbc234f8303341f5a72f", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MemoryRequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Memory requests should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/azure-samples-tf-mnist-demo.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 14, "ruleId": "CKV_K8S_12", "ruleName": "MemoryRequests", "contextText": "14       - name: samples-tf-mnist-demo\n", "snippetText": "14       - name: samples-tf-mnist-demo\n        image: microsoft/samples-tf-mnist-demo:gpu\n        args: [\"--max_steps\", \"500\"]\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Memory limits should be set.", "description": "Memory limits should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_13/1af396590f0cd1ed87f53f74d6ad294e", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MemoryLimits", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Memory limits should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/azure-samples-tf-mnist-demo.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 14, "ruleId": "CKV_K8S_13", "ruleName": "MemoryLimits", "contextText": "14       - name: samples-tf-mnist-demo\n", "snippetText": "14       - name: samples-tf-mnist-demo\n        image: microsoft/samples-tf-mnist-demo:gpu\n        args: [\"--max_steps\", \"500\"]\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "CPU limits should be set.", "description": "CPU limits should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_11/52f64fafe6dd0c719aa1a5d2b34ccbf3", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CPULimits", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "CPU limits should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/azure-samples-tf-mnist-demo.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 14, "ruleId": "CKV_K8S_11", "ruleName": "CPULimits", "contextText": "14       - name: samples-tf-mnist-demo\n", "snippetText": "14       - name: samples-tf-mnist-demo\n        image: microsoft/samples-tf-mnist-demo:gpu\n        args: [\"--max_steps\", \"500\"]\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Image Pull Policy should be Always.", "description": "Image Pull Policy should be Always.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_15/f4256c71b377df8dd669b52ac5a454f8", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImagePullPolicyAlways", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Image Pull Policy should be Always.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/azure-samples-tf-mnist-demo.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 14, "ruleId": "CKV_K8S_15", "ruleName": "ImagePullPolicyAlways", "contextText": "14       - name: samples-tf-mnist-demo\n", "snippetText": "14       - name: samples-tf-mnist-demo\n        image: microsoft/samples-tf-mnist-demo:gpu\n        args: [\"--max_steps\", \"500\"]\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Image should use digest.", "description": "Image should use digest.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_43/ef9e9228c39739922a75e1ca7149a0a5", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageDigest", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Image should use digest.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/azure-samples-tf-mnist-demo.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 14, "ruleId": "CKV_K8S_43", "ruleName": "ImageDigest", "contextText": "14       - name: samples-tf-mnist-demo\n", "snippetText": "14       - name: samples-tf-mnist-demo\n        image: microsoft/samples-tf-mnist-demo:gpu\n        args: [\"--max_steps\", \"500\"]\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Containers should not run with allowPrivilegeEscalation.", "description": "CIS Benchmark: **5.2.5**\n\nMinimize the admission of containers with allowPrivilegeEscalation.\n\nA container running with the allowPrivilegeEscalation flag set to true may have processes that can gain more privileges than their parent. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to allow privilege escalation. The option exists (and is defaulted to true) to permit setuid binaries to run. If you have need to run containers which use setuid binaries or require privilege escalation, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.allowPrivilegeEscalation` field is set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_20/66812b2474c3959df973a24a0e787bf1", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "AllowPrivilegeEscalation", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should not run with allowPrivilegeEscalation.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/azure-samples-tf-mnist-demo.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 14, "ruleId": "CKV_K8S_20", "ruleName": "AllowPrivilegeEscalation", "contextText": "14       - name: samples-tf-mnist-demo\n", "snippetText": "14       - name: samples-tf-mnist-demo\n        image: microsoft/samples-tf-mnist-demo:gpu\n        args: [\"--max_steps\", \"500\"]\n"}, "tags": [{"key": "cis_category", "value": "5.2.5", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Minimize the admission of containers with the NET_RAW capability.", "description": "CIS Benchmark: **5.2.7**\n\nDo not generally permit containers with the potentially dangerous NET_RAW capability.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. By default this can include potentially dangerous capabilities. With Docker as the container runtime the NET_RAW capability is enabled which may be misused by malicious containers. Ideally, all containers should drop this capability. There should be at least one PodSecurityPolicy (PSP) defined which prevents containers with the NET_RAW capability from launching. If you need to run containers with this capability, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.requiredDropCapabilities` is set to include either `NET_RAW` or `ALL`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  requiredDropCapabilities:\n    - ALL\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_28/106a842a14e39f40fe70dbba2990a5da", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "DropCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with the NET_RAW capability.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/azure-samples-tf-mnist-demo.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 14, "ruleId": "CKV_K8S_28", "ruleName": "DropCapabilities", "contextText": "14       - name: samples-tf-mnist-demo\n", "snippetText": "14       - name: samples-tf-mnist-demo\n        image: microsoft/samples-tf-mnist-demo:gpu\n        args: [\"--max_steps\", \"500\"]\n"}, "tags": [{"key": "cis_category", "value": "5.2.7", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Minimize the admission of containers with capabilities assigned.", "description": "CIS Benchmark: **5.2.9**\n\nMinimize the admission of containers with capabilities assigned.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. Capabilities are parts of the rights generally granted on a Linux system to the root user. In many cases applications running in containers do not require any capabilities to operate, so from the perspective of the principal of least privilege use of capabilities should be minimized.\n\n## Remediation\n\nReview the use of capabilites in applications runnning on your cluster. Where a namespace contains applicaions which do not require any Linux capabities to operate consider adding a PSP which forbids the admission of containers which do not drop all capabilities.\n\n\n## Additional information\n\n- [Pod Security Policy](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities)", "internal_id": "CKV_K8S_37/c0a129a9d4198768e09aac9ea397f677", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MinimizeCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with capabilities assigned.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/azure-samples-tf-mnist-demo.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 14, "ruleId": "CKV_K8S_37", "ruleName": "MinimizeCapabilities", "contextText": "14       - name: samples-tf-mnist-demo\n", "snippetText": "14       - name: samples-tf-mnist-demo\n        image: microsoft/samples-tf-mnist-demo:gpu\n        args: [\"--max_steps\", \"500\"]\n"}, "tags": [{"key": "cis_category", "value": "5.2.9", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Minimize the admission of root containers.", "description": "CIS Benchmark: **5.2.6**\n\nMinimize the admission of root containers.\n\nContainers may run as any Linux user. Containers which run as the root user, whilst constrained by Container Runtime security features still have a escalated likelihood of container breakout. Ideally, all containers should run as a defined non-UID 0 user. There should be at least one PodSecurityPolicy (PSP) defined which does not permit root users in a container. If you need to run root containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.runAsUser.rule` is set to either `MustRunAsNonRoot` or `MustRunAs` with the range of UIDs not including `0`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  runAsUser:\n    # Require the container to run without root privileges.\n    rule: 'MustRunAsNonRoot'\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_23/7405a06455b055bab685570866a349b8", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainers", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of root containers.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-device-plugin-aws.yml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_23", "ruleName": "RootContainers", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.6", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Containers should run as a high UID to avoid host conflict.", "description": "Containers should run as a high UID to avoid host conflict.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_40/2d19befc6650615445240e275b23c73c", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainersHighUID", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should run as a high UID to avoid host conflict.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-device-plugin-aws.yml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_40", "ruleName": "RootContainersHighUID", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Ensure that Service Account Tokens are only mounted where necessary.", "description": "CIS Benchmark: **5.1.6**\n\nEnsure that Service Account Tokens are only mounted where necessary.\n\nMounting service account tokens inside pods can provide an avenue for privilege escalation attacks where an attacker is able to compromise a single pod in the cluster. Avoiding mounting these tokens removes this attack avenue.\n\n## Remediation\n\nModify the definition of pods and service accounts which do not need to mount service account tokens to disable it.\n", "internal_id": "CKV_K8S_38/4021c13e9dda2a39bf040566a155565c", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ServiceAccountTokens", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that Service Account Tokens are only mounted where necessary.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-device-plugin-aws.yml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_38", "ruleName": "ServiceAccountTokens", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.1.6", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "description": "CIS Benchmark: **5.7.2**\n\nEnsure that the seccomp profile is set to docker/default in your pod definitions.\n\nSeccomp (secure computing mode) is used to restrict the set of system calls applications can make, allowing cluster administrators greater control over the security of workloads running in the cluster. Kubernetes disables seccomp profiles by default for historical reasons. You should enable it to ensure that the workloads have restricted actions available within the container.\n\n## Remediation\n\nSeccomp is an alpha feature currently. By default, all alpha features are disabled. So, you would need to enable alpha features in the apiserver by passing \"--feature-gates=AllAlpha=true\" argument.\nEdit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--feature-gates=AllAlpha=true\" KUBE_API_ARGS=\"--feature-gates=AllAlpha=true\". Based on your system, restart the kube-apiserver service.\nFor example:\n```bash\nsystemctl restart kube-apiserver.service\n```\n\nUse annotations to enable the docker/default seccomp profile in your pod definitions. An example is as below:\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: trustworthy-pod\n  annotations:\n    seccomp.security.alpha.kubernetes.io/pod: docker/default\nspec:\n  containers:\n    - name: trustworthy-container\n      image: sotrustworthy:latest\n```\n", "internal_id": "CKV_K8S_31/1a37b254d63b93688b116b06287d9264", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "Seccomp", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-device-plugin-aws.yml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_31", "ruleName": "Seccomp", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.2", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_29/0fd81e23c66163ee0df0ab91b94a069c", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "PodSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-device-plugin-aws.yml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_29", "ruleName": "PodSecurityContext", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Use read-only filesystem for containers where possible.", "description": "Use read-only filesystem for containers where possible.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_22/1841c1a94221b89189d89104469898e2", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadOnlyFilesystem", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Use read-only filesystem for containers where possible.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-device-plugin-aws.yml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 31, "ruleId": "CKV_K8S_22", "ruleName": "ReadOnlyFilesystem", "contextText": "31       - image: nvidia/k8s-device-plugin:1.0.0-beta4\n", "snippetText": "31       - image: nvidia/k8s-device-plugin:1.0.0-beta4\n        name: nvidia-device-plugin-ctr\n        securityContext:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Liveness Probe Should be Configured.", "description": "Liveness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_8/55075fdf549950913c993de6ab197b30", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "LivenessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Liveness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-device-plugin-aws.yml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 31, "ruleId": "CKV_K8S_8", "ruleName": "LivenessProbe", "contextText": "31       - image: nvidia/k8s-device-plugin:1.0.0-beta4\n", "snippetText": "31       - image: nvidia/k8s-device-plugin:1.0.0-beta4\n        name: nvidia-device-plugin-ctr\n        securityContext:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "CPU requests should be set.", "description": "CPU requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_10/13bd207284c8d3e7a76d8d360db1540e", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CPURequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "CPU requests should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-device-plugin-aws.yml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 31, "ruleId": "CKV_K8S_10", "ruleName": "CPURequests", "contextText": "31       - image: nvidia/k8s-device-plugin:1.0.0-beta4\n", "snippetText": "31       - image: nvidia/k8s-device-plugin:1.0.0-beta4\n        name: nvidia-device-plugin-ctr\n        securityContext:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Memory requests should be set.", "description": "Memory requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_12/84d55ba06b31a3a319fad28e5ff0e6f1", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MemoryRequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Memory requests should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-device-plugin-aws.yml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 31, "ruleId": "CKV_K8S_12", "ruleName": "MemoryRequests", "contextText": "31       - image: nvidia/k8s-device-plugin:1.0.0-beta4\n", "snippetText": "31       - image: nvidia/k8s-device-plugin:1.0.0-beta4\n        name: nvidia-device-plugin-ctr\n        securityContext:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Memory limits should be set.", "description": "Memory limits should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_13/39f2cf6d7b8841c152eade3d9f3e143f", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MemoryLimits", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Memory limits should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-device-plugin-aws.yml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 31, "ruleId": "CKV_K8S_13", "ruleName": "MemoryLimits", "contextText": "31       - image: nvidia/k8s-device-plugin:1.0.0-beta4\n", "snippetText": "31       - image: nvidia/k8s-device-plugin:1.0.0-beta4\n        name: nvidia-device-plugin-ctr\n        securityContext:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Readiness Probe Should be Configured.", "description": "Readiness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_9/b3dd8c23a7721096a374a2e495e83000", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadinessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Readiness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-device-plugin-aws.yml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 31, "ruleId": "CKV_K8S_9", "ruleName": "ReadinessProbe", "contextText": "31       - image: nvidia/k8s-device-plugin:1.0.0-beta4\n", "snippetText": "31       - image: nvidia/k8s-device-plugin:1.0.0-beta4\n        name: nvidia-device-plugin-ctr\n        securityContext:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "CPU limits should be set.", "description": "CPU limits should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_11/cb709932abb7ca3ac88dbb828793164e", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CPULimits", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "CPU limits should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-device-plugin-aws.yml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 31, "ruleId": "CKV_K8S_11", "ruleName": "CPULimits", "contextText": "31       - image: nvidia/k8s-device-plugin:1.0.0-beta4\n", "snippetText": "31       - image: nvidia/k8s-device-plugin:1.0.0-beta4\n        name: nvidia-device-plugin-ctr\n        securityContext:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Image Pull Policy should be Always.", "description": "Image Pull Policy should be Always.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_15/0555cae500c29c4cf0e2d0509bc8d44d", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImagePullPolicyAlways", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Image Pull Policy should be Always.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-device-plugin-aws.yml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 31, "ruleId": "CKV_K8S_15", "ruleName": "ImagePullPolicyAlways", "contextText": "31       - image: nvidia/k8s-device-plugin:1.0.0-beta4\n", "snippetText": "31       - image: nvidia/k8s-device-plugin:1.0.0-beta4\n        name: nvidia-device-plugin-ctr\n        securityContext:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Image should use digest.", "description": "Image should use digest.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_43/43378608d1a9b8525c29a2b239a3e272", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageDigest", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Image should use digest.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-device-plugin-aws.yml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 31, "ruleId": "CKV_K8S_43", "ruleName": "ImageDigest", "contextText": "31       - image: nvidia/k8s-device-plugin:1.0.0-beta4\n", "snippetText": "31       - image: nvidia/k8s-device-plugin:1.0.0-beta4\n        name: nvidia-device-plugin-ctr\n        securityContext:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/649932cd8759c9edca00b52ea6c08574", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tf-reference.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "1 apiVersion: v1\n", "snippetText": "1 apiVersion: v1\nkind: Pod\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Minimize the admission of root containers.", "description": "CIS Benchmark: **5.2.6**\n\nMinimize the admission of root containers.\n\nContainers may run as any Linux user. Containers which run as the root user, whilst constrained by Container Runtime security features still have a escalated likelihood of container breakout. Ideally, all containers should run as a defined non-UID 0 user. There should be at least one PodSecurityPolicy (PSP) defined which does not permit root users in a container. If you need to run root containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.runAsUser.rule` is set to either `MustRunAsNonRoot` or `MustRunAs` with the range of UIDs not including `0`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  runAsUser:\n    # Require the container to run without root privileges.\n    rule: 'MustRunAsNonRoot'\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_23/60f94883c3c5cccf49c0cecfda3a77ee", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainers", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of root containers.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tf-reference.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_23", "ruleName": "RootContainers", "contextText": "1 apiVersion: v1\n", "snippetText": "1 apiVersion: v1\nkind: Pod\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.6", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Containers should run as a high UID to avoid host conflict.", "description": "Containers should run as a high UID to avoid host conflict.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_40/23c23713ccad009715bcb4d40161e7ae", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainersHighUID", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should run as a high UID to avoid host conflict.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tf-reference.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_40", "ruleName": "RootContainersHighUID", "contextText": "1 apiVersion: v1\n", "snippetText": "1 apiVersion: v1\nkind: Pod\nmetadata:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Ensure that Service Account Tokens are only mounted where necessary.", "description": "CIS Benchmark: **5.1.6**\n\nEnsure that Service Account Tokens are only mounted where necessary.\n\nMounting service account tokens inside pods can provide an avenue for privilege escalation attacks where an attacker is able to compromise a single pod in the cluster. Avoiding mounting these tokens removes this attack avenue.\n\n## Remediation\n\nModify the definition of pods and service accounts which do not need to mount service account tokens to disable it.\n", "internal_id": "CKV_K8S_38/bae54a8ade279c039aacea6236772206", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ServiceAccountTokens", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that Service Account Tokens are only mounted where necessary.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tf-reference.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_38", "ruleName": "ServiceAccountTokens", "contextText": "1 apiVersion: v1\n", "snippetText": "1 apiVersion: v1\nkind: Pod\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.1.6", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "description": "CIS Benchmark: **5.7.2**\n\nEnsure that the seccomp profile is set to docker/default in your pod definitions.\n\nSeccomp (secure computing mode) is used to restrict the set of system calls applications can make, allowing cluster administrators greater control over the security of workloads running in the cluster. Kubernetes disables seccomp profiles by default for historical reasons. You should enable it to ensure that the workloads have restricted actions available within the container.\n\n## Remediation\n\nSeccomp is an alpha feature currently. By default, all alpha features are disabled. So, you would need to enable alpha features in the apiserver by passing \"--feature-gates=AllAlpha=true\" argument.\nEdit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--feature-gates=AllAlpha=true\" KUBE_API_ARGS=\"--feature-gates=AllAlpha=true\". Based on your system, restart the kube-apiserver service.\nFor example:\n```bash\nsystemctl restart kube-apiserver.service\n```\n\nUse annotations to enable the docker/default seccomp profile in your pod definitions. An example is as below:\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: trustworthy-pod\n  annotations:\n    seccomp.security.alpha.kubernetes.io/pod: docker/default\nspec:\n  containers:\n    - name: trustworthy-container\n      image: sotrustworthy:latest\n```\n", "internal_id": "CKV_K8S_31/9eec5e9b763434330acbf779fa7422cb", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "Seccomp", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tf-reference.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_31", "ruleName": "Seccomp", "contextText": "1 apiVersion: v1\n", "snippetText": "1 apiVersion: v1\nkind: Pod\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.2", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_29/58a5a65eea38c8833590adfac9238a34", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "PodSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tf-reference.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_29", "ruleName": "PodSecurityContext", "contextText": "1 apiVersion: v1\n", "snippetText": "1 apiVersion: v1\nkind: Pod\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Use read-only filesystem for containers where possible.", "description": "Use read-only filesystem for containers where possible.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_22/630a5401edac255136547e756a2f103e", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadOnlyFilesystem", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Use read-only filesystem for containers where possible.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tf-reference.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 7, "ruleId": "CKV_K8S_22", "ruleName": "ReadOnlyFilesystem", "contextText": "7   - name: gpu\n", "snippetText": "7   - name: gpu\n    image: 763104351884.dkr.ecr.us-west-2.amazonaws.com/tensorflow-training:1.15.2-gpu-py36-cu100-ubuntu18.04\n    #image: tensorflow/tensorflow:1.12.0-gpu\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_30/2befea4323ffa227f086abdeb93e2d60", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ContainerSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tf-reference.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 7, "ruleId": "CKV_K8S_30", "ruleName": "ContainerSecurityContext", "contextText": "7   - name: gpu\n", "snippetText": "7   - name: gpu\n    image: 763104351884.dkr.ecr.us-west-2.amazonaws.com/tensorflow-training:1.15.2-gpu-py36-cu100-ubuntu18.04\n    #image: tensorflow/tensorflow:1.12.0-gpu\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Liveness Probe Should be Configured.", "description": "Liveness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_8/3f669edb834b8ef22bdc92ac328d8e36", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "LivenessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Liveness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tf-reference.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 7, "ruleId": "CKV_K8S_8", "ruleName": "LivenessProbe", "contextText": "7   - name: gpu\n", "snippetText": "7   - name: gpu\n    image: 763104351884.dkr.ecr.us-west-2.amazonaws.com/tensorflow-training:1.15.2-gpu-py36-cu100-ubuntu18.04\n    #image: tensorflow/tensorflow:1.12.0-gpu\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "CPU requests should be set.", "description": "CPU requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_10/c8d878fde0f47d0e793ec002726d57ab", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CPURequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "CPU requests should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tf-reference.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 7, "ruleId": "CKV_K8S_10", "ruleName": "CPURequests", "contextText": "7   - name: gpu\n", "snippetText": "7   - name: gpu\n    image: 763104351884.dkr.ecr.us-west-2.amazonaws.com/tensorflow-training:1.15.2-gpu-py36-cu100-ubuntu18.04\n    #image: tensorflow/tensorflow:1.12.0-gpu\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Memory requests should be set.", "description": "Memory requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_12/2fa1bb122d5712ae4c76c5630f32df79", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MemoryRequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Memory requests should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tf-reference.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 7, "ruleId": "CKV_K8S_12", "ruleName": "MemoryRequests", "contextText": "7   - name: gpu\n", "snippetText": "7   - name: gpu\n    image: 763104351884.dkr.ecr.us-west-2.amazonaws.com/tensorflow-training:1.15.2-gpu-py36-cu100-ubuntu18.04\n    #image: tensorflow/tensorflow:1.12.0-gpu\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Readiness Probe Should be Configured.", "description": "Readiness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_9/4cbfd984600551452885db12fe0fefd7", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadinessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Readiness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tf-reference.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 7, "ruleId": "CKV_K8S_9", "ruleName": "ReadinessProbe", "contextText": "7   - name: gpu\n", "snippetText": "7   - name: gpu\n    image: 763104351884.dkr.ecr.us-west-2.amazonaws.com/tensorflow-training:1.15.2-gpu-py36-cu100-ubuntu18.04\n    #image: tensorflow/tensorflow:1.12.0-gpu\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "CPU limits should be set.", "description": "CPU limits should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_11/1ec70cdcad68d6dd93b82c4df3fe59fb", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CPULimits", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "CPU limits should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tf-reference.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 7, "ruleId": "CKV_K8S_11", "ruleName": "CPULimits", "contextText": "7   - name: gpu\n", "snippetText": "7   - name: gpu\n    image: 763104351884.dkr.ecr.us-west-2.amazonaws.com/tensorflow-training:1.15.2-gpu-py36-cu100-ubuntu18.04\n    #image: tensorflow/tensorflow:1.12.0-gpu\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Image Pull Policy should be Always.", "description": "Image Pull Policy should be Always.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_15/12bc673906db74022974a898c6fcaa30", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImagePullPolicyAlways", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Image Pull Policy should be Always.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tf-reference.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 7, "ruleId": "CKV_K8S_15", "ruleName": "ImagePullPolicyAlways", "contextText": "7   - name: gpu\n", "snippetText": "7   - name: gpu\n    image: 763104351884.dkr.ecr.us-west-2.amazonaws.com/tensorflow-training:1.15.2-gpu-py36-cu100-ubuntu18.04\n    #image: tensorflow/tensorflow:1.12.0-gpu\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Image should use digest.", "description": "Image should use digest.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_43/bac1721f180b11aac72d5c431372bb1d", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageDigest", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Image should use digest.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tf-reference.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 7, "ruleId": "CKV_K8S_43", "ruleName": "ImageDigest", "contextText": "7   - name: gpu\n", "snippetText": "7   - name: gpu\n    image: 763104351884.dkr.ecr.us-west-2.amazonaws.com/tensorflow-training:1.15.2-gpu-py36-cu100-ubuntu18.04\n    #image: tensorflow/tensorflow:1.12.0-gpu\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Containers should not run with allowPrivilegeEscalation.", "description": "CIS Benchmark: **5.2.5**\n\nMinimize the admission of containers with allowPrivilegeEscalation.\n\nA container running with the allowPrivilegeEscalation flag set to true may have processes that can gain more privileges than their parent. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to allow privilege escalation. The option exists (and is defaulted to true) to permit setuid binaries to run. If you have need to run containers which use setuid binaries or require privilege escalation, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.allowPrivilegeEscalation` field is set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_20/de627c9d976c2ab0aa97b3cf31653036", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "AllowPrivilegeEscalation", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should not run with allowPrivilegeEscalation.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tf-reference.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 7, "ruleId": "CKV_K8S_20", "ruleName": "AllowPrivilegeEscalation", "contextText": "7   - name: gpu\n", "snippetText": "7   - name: gpu\n    image: 763104351884.dkr.ecr.us-west-2.amazonaws.com/tensorflow-training:1.15.2-gpu-py36-cu100-ubuntu18.04\n    #image: tensorflow/tensorflow:1.12.0-gpu\n"}, "tags": [{"key": "cis_category", "value": "5.2.5", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Minimize the admission of containers with the NET_RAW capability.", "description": "CIS Benchmark: **5.2.7**\n\nDo not generally permit containers with the potentially dangerous NET_RAW capability.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. By default this can include potentially dangerous capabilities. With Docker as the container runtime the NET_RAW capability is enabled which may be misused by malicious containers. Ideally, all containers should drop this capability. There should be at least one PodSecurityPolicy (PSP) defined which prevents containers with the NET_RAW capability from launching. If you need to run containers with this capability, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.requiredDropCapabilities` is set to include either `NET_RAW` or `ALL`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  requiredDropCapabilities:\n    - ALL\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_28/609499eae338bca5dc151fcd1890a14e", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "DropCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with the NET_RAW capability.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tf-reference.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 7, "ruleId": "CKV_K8S_28", "ruleName": "DropCapabilities", "contextText": "7   - name: gpu\n", "snippetText": "7   - name: gpu\n    image: 763104351884.dkr.ecr.us-west-2.amazonaws.com/tensorflow-training:1.15.2-gpu-py36-cu100-ubuntu18.04\n    #image: tensorflow/tensorflow:1.12.0-gpu\n"}, "tags": [{"key": "cis_category", "value": "5.2.7", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Minimize the admission of containers with capabilities assigned.", "description": "CIS Benchmark: **5.2.9**\n\nMinimize the admission of containers with capabilities assigned.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. Capabilities are parts of the rights generally granted on a Linux system to the root user. In many cases applications running in containers do not require any capabilities to operate, so from the perspective of the principal of least privilege use of capabilities should be minimized.\n\n## Remediation\n\nReview the use of capabilites in applications runnning on your cluster. Where a namespace contains applicaions which do not require any Linux capabities to operate consider adding a PSP which forbids the admission of containers which do not drop all capabilities.\n\n\n## Additional information\n\n- [Pod Security Policy](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities)", "internal_id": "CKV_K8S_37/690a879cf1bca466eb881efe56f73ff2", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MinimizeCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with capabilities assigned.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tf-reference.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 7, "ruleId": "CKV_K8S_37", "ruleName": "MinimizeCapabilities", "contextText": "7   - name: gpu\n", "snippetText": "7   - name: gpu\n    image: 763104351884.dkr.ecr.us-west-2.amazonaws.com/tensorflow-training:1.15.2-gpu-py36-cu100-ubuntu18.04\n    #image: tensorflow/tensorflow:1.12.0-gpu\n"}, "tags": [{"key": "cis_category", "value": "5.2.9", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/8eb8ca4d6f3a77fef822732bb578cc91", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "1 apiVersion: v1\n", "snippetText": "1 apiVersion: v1\nkind: Pod\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Minimize the admission of root containers.", "description": "CIS Benchmark: **5.2.6**\n\nMinimize the admission of root containers.\n\nContainers may run as any Linux user. Containers which run as the root user, whilst constrained by Container Runtime security features still have a escalated likelihood of container breakout. Ideally, all containers should run as a defined non-UID 0 user. There should be at least one PodSecurityPolicy (PSP) defined which does not permit root users in a container. If you need to run root containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.runAsUser.rule` is set to either `MustRunAsNonRoot` or `MustRunAs` with the range of UIDs not including `0`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  runAsUser:\n    # Require the container to run without root privileges.\n    rule: 'MustRunAsNonRoot'\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_23/926bef410ddb646c2b4a0800de251384", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainers", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of root containers.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_23", "ruleName": "RootContainers", "contextText": "1 apiVersion: v1\n", "snippetText": "1 apiVersion: v1\nkind: Pod\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.6", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Containers should run as a high UID to avoid host conflict.", "description": "Containers should run as a high UID to avoid host conflict.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_40/34ea9352d14f989f9f475494e0741bbf", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainersHighUID", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should run as a high UID to avoid host conflict.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_40", "ruleName": "RootContainersHighUID", "contextText": "1 apiVersion: v1\n", "snippetText": "1 apiVersion: v1\nkind: Pod\nmetadata:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Ensure that Service Account Tokens are only mounted where necessary.", "description": "CIS Benchmark: **5.1.6**\n\nEnsure that Service Account Tokens are only mounted where necessary.\n\nMounting service account tokens inside pods can provide an avenue for privilege escalation attacks where an attacker is able to compromise a single pod in the cluster. Avoiding mounting these tokens removes this attack avenue.\n\n## Remediation\n\nModify the definition of pods and service accounts which do not need to mount service account tokens to disable it.\n", "internal_id": "CKV_K8S_38/5dc8044c6e238c92e4cd08ccf8fed078", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ServiceAccountTokens", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that Service Account Tokens are only mounted where necessary.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_38", "ruleName": "ServiceAccountTokens", "contextText": "1 apiVersion: v1\n", "snippetText": "1 apiVersion: v1\nkind: Pod\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.1.6", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "description": "CIS Benchmark: **5.7.2**\n\nEnsure that the seccomp profile is set to docker/default in your pod definitions.\n\nSeccomp (secure computing mode) is used to restrict the set of system calls applications can make, allowing cluster administrators greater control over the security of workloads running in the cluster. Kubernetes disables seccomp profiles by default for historical reasons. You should enable it to ensure that the workloads have restricted actions available within the container.\n\n## Remediation\n\nSeccomp is an alpha feature currently. By default, all alpha features are disabled. So, you would need to enable alpha features in the apiserver by passing \"--feature-gates=AllAlpha=true\" argument.\nEdit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--feature-gates=AllAlpha=true\" KUBE_API_ARGS=\"--feature-gates=AllAlpha=true\". Based on your system, restart the kube-apiserver service.\nFor example:\n```bash\nsystemctl restart kube-apiserver.service\n```\n\nUse annotations to enable the docker/default seccomp profile in your pod definitions. An example is as below:\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: trustworthy-pod\n  annotations:\n    seccomp.security.alpha.kubernetes.io/pod: docker/default\nspec:\n  containers:\n    - name: trustworthy-container\n      image: sotrustworthy:latest\n```\n", "internal_id": "CKV_K8S_31/9efc668dab22ce4a15c1d789ff8fe0e9", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "Seccomp", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_31", "ruleName": "Seccomp", "contextText": "1 apiVersion: v1\n", "snippetText": "1 apiVersion: v1\nkind: Pod\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.2", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_29/4e725e98d230c88dcec759bd91d09e4d", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "PodSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_29", "ruleName": "PodSecurityContext", "contextText": "1 apiVersion: v1\n", "snippetText": "1 apiVersion: v1\nkind: Pod\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Use read-only filesystem for containers where possible.", "description": "Use read-only filesystem for containers where possible.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_22/171c4b229e4735a818f8befe3b09e7cd", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadOnlyFilesystem", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Use read-only filesystem for containers where possible.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 7, "ruleId": "CKV_K8S_22", "ruleName": "ReadOnlyFilesystem", "contextText": "7   - name: gpu\n", "snippetText": "7   - name: gpu\n    image: 763104351884.dkr.ecr.us-west-2.amazonaws.com/tensorflow-training:2.3.1-gpu-py37-cu110-ubuntu18.04\n    imagePullPolicy: IfNotPresent\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_30/3ae3b3ca01e5014528b9713a70767170", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ContainerSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 7, "ruleId": "CKV_K8S_30", "ruleName": "ContainerSecurityContext", "contextText": "7   - name: gpu\n", "snippetText": "7   - name: gpu\n    image: 763104351884.dkr.ecr.us-west-2.amazonaws.com/tensorflow-training:2.3.1-gpu-py37-cu110-ubuntu18.04\n    imagePullPolicy: IfNotPresent\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Liveness Probe Should be Configured.", "description": "Liveness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_8/2a0a505dd944ac9c947e5f06f383db1a", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "LivenessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Liveness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 7, "ruleId": "CKV_K8S_8", "ruleName": "LivenessProbe", "contextText": "7   - name: gpu\n", "snippetText": "7   - name: gpu\n    image: 763104351884.dkr.ecr.us-west-2.amazonaws.com/tensorflow-training:2.3.1-gpu-py37-cu110-ubuntu18.04\n    imagePullPolicy: IfNotPresent\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "CPU requests should be set.", "description": "CPU requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_10/36e7de3935ff8e4193c9aa9cf1be6c74", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CPURequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "CPU requests should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 7, "ruleId": "CKV_K8S_10", "ruleName": "CPURequests", "contextText": "7   - name: gpu\n", "snippetText": "7   - name: gpu\n    image: 763104351884.dkr.ecr.us-west-2.amazonaws.com/tensorflow-training:2.3.1-gpu-py37-cu110-ubuntu18.04\n    imagePullPolicy: IfNotPresent\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Memory requests should be set.", "description": "Memory requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_12/d524dc65be8a0d26ec33fe6372d8b98d", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MemoryRequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Memory requests should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 7, "ruleId": "CKV_K8S_12", "ruleName": "MemoryRequests", "contextText": "7   - name: gpu\n", "snippetText": "7   - name: gpu\n    image: 763104351884.dkr.ecr.us-west-2.amazonaws.com/tensorflow-training:2.3.1-gpu-py37-cu110-ubuntu18.04\n    imagePullPolicy: IfNotPresent\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Readiness Probe Should be Configured.", "description": "Readiness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_9/06c58503867ba259e76db20706e5b952", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadinessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Readiness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 7, "ruleId": "CKV_K8S_9", "ruleName": "ReadinessProbe", "contextText": "7   - name: gpu\n", "snippetText": "7   - name: gpu\n    image: 763104351884.dkr.ecr.us-west-2.amazonaws.com/tensorflow-training:2.3.1-gpu-py37-cu110-ubuntu18.04\n    imagePullPolicy: IfNotPresent\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "CPU limits should be set.", "description": "CPU limits should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_11/0a4899ec6e9e25e79cf469113a7602dd", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CPULimits", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "CPU limits should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 7, "ruleId": "CKV_K8S_11", "ruleName": "CPULimits", "contextText": "7   - name: gpu\n", "snippetText": "7   - name: gpu\n    image: 763104351884.dkr.ecr.us-west-2.amazonaws.com/tensorflow-training:2.3.1-gpu-py37-cu110-ubuntu18.04\n    imagePullPolicy: IfNotPresent\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Image Pull Policy should be Always.", "description": "Image Pull Policy should be Always.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_15/2767fd2f90d190a01ea89f785c000272", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImagePullPolicyAlways", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Image Pull Policy should be Always.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 7, "ruleId": "CKV_K8S_15", "ruleName": "ImagePullPolicyAlways", "contextText": "7   - name: gpu\n", "snippetText": "7   - name: gpu\n    image: 763104351884.dkr.ecr.us-west-2.amazonaws.com/tensorflow-training:2.3.1-gpu-py37-cu110-ubuntu18.04\n    imagePullPolicy: IfNotPresent\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Image should use digest.", "description": "Image should use digest.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_43/93c933940b3a3e1e1f18aff4cb4ff515", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageDigest", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Image should use digest.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 7, "ruleId": "CKV_K8S_43", "ruleName": "ImageDigest", "contextText": "7   - name: gpu\n", "snippetText": "7   - name: gpu\n    image: 763104351884.dkr.ecr.us-west-2.amazonaws.com/tensorflow-training:2.3.1-gpu-py37-cu110-ubuntu18.04\n    imagePullPolicy: IfNotPresent\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Containers should not run with allowPrivilegeEscalation.", "description": "CIS Benchmark: **5.2.5**\n\nMinimize the admission of containers with allowPrivilegeEscalation.\n\nA container running with the allowPrivilegeEscalation flag set to true may have processes that can gain more privileges than their parent. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to allow privilege escalation. The option exists (and is defaulted to true) to permit setuid binaries to run. If you have need to run containers which use setuid binaries or require privilege escalation, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.allowPrivilegeEscalation` field is set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_20/7937f57554280996272237bd2487325c", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "AllowPrivilegeEscalation", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should not run with allowPrivilegeEscalation.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 7, "ruleId": "CKV_K8S_20", "ruleName": "AllowPrivilegeEscalation", "contextText": "7   - name: gpu\n", "snippetText": "7   - name: gpu\n    image: 763104351884.dkr.ecr.us-west-2.amazonaws.com/tensorflow-training:2.3.1-gpu-py37-cu110-ubuntu18.04\n    imagePullPolicy: IfNotPresent\n"}, "tags": [{"key": "cis_category", "value": "5.2.5", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Minimize the admission of containers with the NET_RAW capability.", "description": "CIS Benchmark: **5.2.7**\n\nDo not generally permit containers with the potentially dangerous NET_RAW capability.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. By default this can include potentially dangerous capabilities. With Docker as the container runtime the NET_RAW capability is enabled which may be misused by malicious containers. Ideally, all containers should drop this capability. There should be at least one PodSecurityPolicy (PSP) defined which prevents containers with the NET_RAW capability from launching. If you need to run containers with this capability, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.requiredDropCapabilities` is set to include either `NET_RAW` or `ALL`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  requiredDropCapabilities:\n    - ALL\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_28/9d96f2638a6fd92b26e994d9c199773a", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "DropCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with the NET_RAW capability.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 7, "ruleId": "CKV_K8S_28", "ruleName": "DropCapabilities", "contextText": "7   - name: gpu\n", "snippetText": "7   - name: gpu\n    image: 763104351884.dkr.ecr.us-west-2.amazonaws.com/tensorflow-training:2.3.1-gpu-py37-cu110-ubuntu18.04\n    imagePullPolicy: IfNotPresent\n"}, "tags": [{"key": "cis_category", "value": "5.2.7", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Minimize the admission of containers with capabilities assigned.", "description": "CIS Benchmark: **5.2.9**\n\nMinimize the admission of containers with capabilities assigned.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. Capabilities are parts of the rights generally granted on a Linux system to the root user. In many cases applications running in containers do not require any capabilities to operate, so from the perspective of the principal of least privilege use of capabilities should be minimized.\n\n## Remediation\n\nReview the use of capabilites in applications runnning on your cluster. Where a namespace contains applicaions which do not require any Linux capabities to operate consider adding a PSP which forbids the admission of containers which do not drop all capabilities.\n\n\n## Additional information\n\n- [Pod Security Policy](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities)", "internal_id": "CKV_K8S_37/e45d7212b00493729a13ef9d3a668e1a", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MinimizeCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with capabilities assigned.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 7, "ruleId": "CKV_K8S_37", "ruleName": "MinimizeCapabilities", "contextText": "7   - name: gpu\n", "snippetText": "7   - name: gpu\n    image: 763104351884.dkr.ecr.us-west-2.amazonaws.com/tensorflow-training:2.3.1-gpu-py37-cu110-ubuntu18.04\n    imagePullPolicy: IfNotPresent\n"}, "tags": [{"key": "cis_category", "value": "5.2.9", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/0e30c750abaf4f3fc1a28e15547590da", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 3, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "3 apiVersion: batch/v1beta1\n", "snippetText": "3 apiVersion: batch/v1beta1\nkind: CronJob\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Minimize the admission of root containers.", "description": "CIS Benchmark: **5.2.6**\n\nMinimize the admission of root containers.\n\nContainers may run as any Linux user. Containers which run as the root user, whilst constrained by Container Runtime security features still have a escalated likelihood of container breakout. Ideally, all containers should run as a defined non-UID 0 user. There should be at least one PodSecurityPolicy (PSP) defined which does not permit root users in a container. If you need to run root containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.runAsUser.rule` is set to either `MustRunAsNonRoot` or `MustRunAs` with the range of UIDs not including `0`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  runAsUser:\n    # Require the container to run without root privileges.\n    rule: 'MustRunAsNonRoot'\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_23/5e42e90ea710a7b40175e6201b4ba45b", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainers", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of root containers.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 3, "ruleId": "CKV_K8S_23", "ruleName": "RootContainers", "contextText": "3 apiVersion: batch/v1beta1\n", "snippetText": "3 apiVersion: batch/v1beta1\nkind: CronJob\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.6", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Containers should not share the host network namespace.", "description": "CIS Benchmark: **5.2.4**\n\nMinimize the admission of containers wishing to share the host network namespace.\n\nA container running in the host's network namespace could access the local loopback device, and could access network traffic to and from other pods. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to share the host network namespace. If you have need to run containers which require hostNetwork, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.hostNetwork` field is omitted or set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  hostNetwork: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Host namespaces](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#host-namespaces)", "internal_id": "CKV_K8S_19/3f0d9f5d267705c0810917cb3affd61e", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "SharedHostNetworkNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should not share the host network namespace.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 3, "ruleId": "CKV_K8S_19", "ruleName": "SharedHostNetworkNamespace", "contextText": "3 apiVersion: batch/v1beta1\n", "snippetText": "3 apiVersion: batch/v1beta1\nkind: CronJob\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Containers should run as a high UID to avoid host conflict.", "description": "Containers should run as a high UID to avoid host conflict.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_40/bc7a16147f37507c660b1efa75cff3ae", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainersHighUID", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should run as a high UID to avoid host conflict.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 3, "ruleId": "CKV_K8S_40", "ruleName": "RootContainersHighUID", "contextText": "3 apiVersion: batch/v1beta1\n", "snippetText": "3 apiVersion: batch/v1beta1\nkind: CronJob\nmetadata:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Ensure that Service Account Tokens are only mounted where necessary.", "description": "CIS Benchmark: **5.1.6**\n\nEnsure that Service Account Tokens are only mounted where necessary.\n\nMounting service account tokens inside pods can provide an avenue for privilege escalation attacks where an attacker is able to compromise a single pod in the cluster. Avoiding mounting these tokens removes this attack avenue.\n\n## Remediation\n\nModify the definition of pods and service accounts which do not need to mount service account tokens to disable it.\n", "internal_id": "CKV_K8S_38/3eb60f0d88c434650c1dd4744397bdf8", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ServiceAccountTokens", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that Service Account Tokens are only mounted where necessary.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 3, "ruleId": "CKV_K8S_38", "ruleName": "ServiceAccountTokens", "contextText": "3 apiVersion: batch/v1beta1\n", "snippetText": "3 apiVersion: batch/v1beta1\nkind: CronJob\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.1.6", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "description": "CIS Benchmark: **5.7.2**\n\nEnsure that the seccomp profile is set to docker/default in your pod definitions.\n\nSeccomp (secure computing mode) is used to restrict the set of system calls applications can make, allowing cluster administrators greater control over the security of workloads running in the cluster. Kubernetes disables seccomp profiles by default for historical reasons. You should enable it to ensure that the workloads have restricted actions available within the container.\n\n## Remediation\n\nSeccomp is an alpha feature currently. By default, all alpha features are disabled. So, you would need to enable alpha features in the apiserver by passing \"--feature-gates=AllAlpha=true\" argument.\nEdit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--feature-gates=AllAlpha=true\" KUBE_API_ARGS=\"--feature-gates=AllAlpha=true\". Based on your system, restart the kube-apiserver service.\nFor example:\n```bash\nsystemctl restart kube-apiserver.service\n```\n\nUse annotations to enable the docker/default seccomp profile in your pod definitions. An example is as below:\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: trustworthy-pod\n  annotations:\n    seccomp.security.alpha.kubernetes.io/pod: docker/default\nspec:\n  containers:\n    - name: trustworthy-container\n      image: sotrustworthy:latest\n```\n", "internal_id": "CKV_K8S_31/6c5a84e934d30b559ff9bae796ae9cfb", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "Seccomp", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 3, "ruleId": "CKV_K8S_31", "ruleName": "Seccomp", "contextText": "3 apiVersion: batch/v1beta1\n", "snippetText": "3 apiVersion: batch/v1beta1\nkind: CronJob\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.2", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/eb81811fd62677b359aaead80189f8e5", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 64, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "64 apiVersion: v1\n", "snippetText": "64 apiVersion: v1\nkind: ConfigMap\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/aaab3c8317ee79a5ecf77e86f8cce820", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 77, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "77 apiVersion: v1\n", "snippetText": "77 apiVersion: v1\nkind: ServiceAccount\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/d6ac54eb0777c9bac64eb79e66964c13", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 96, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "96 apiVersion: rbac.authorization.k8s.io/v1\n", "snippetText": "96 apiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/f781cb7d47eb5bf8af81f6b1c848e1a6", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 108, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "108 apiVersion: v1\n", "snippetText": "108 apiVersion: v1\nkind: Secret\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/5eacbea9fe3b8d47abe7d14ad59dfc16", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 116, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "116 apiVersion: v1\n", "snippetText": "116 apiVersion: v1\nkind: Secret\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/58b1d36fd5325b1aed37f41e83445dae", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 124, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "124 apiVersion: apps/v1beta2\n", "snippetText": "124 apiVersion: apps/v1beta2\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Minimize the admission of root containers.", "description": "CIS Benchmark: **5.2.6**\n\nMinimize the admission of root containers.\n\nContainers may run as any Linux user. Containers which run as the root user, whilst constrained by Container Runtime security features still have a escalated likelihood of container breakout. Ideally, all containers should run as a defined non-UID 0 user. There should be at least one PodSecurityPolicy (PSP) defined which does not permit root users in a container. If you need to run root containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.runAsUser.rule` is set to either `MustRunAsNonRoot` or `MustRunAs` with the range of UIDs not including `0`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  runAsUser:\n    # Require the container to run without root privileges.\n    rule: 'MustRunAsNonRoot'\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_23/7d334c8317053b996ad7b3225e2cd6a9", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainers", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of root containers.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 124, "ruleId": "CKV_K8S_23", "ruleName": "RootContainers", "contextText": "124 apiVersion: apps/v1beta2\n", "snippetText": "124 apiVersion: apps/v1beta2\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.6", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Containers should run as a high UID to avoid host conflict.", "description": "Containers should run as a high UID to avoid host conflict.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_40/63b09a5ebf69a5a5566e6221b07a6c31", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainersHighUID", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should run as a high UID to avoid host conflict.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 124, "ruleId": "CKV_K8S_40", "ruleName": "RootContainersHighUID", "contextText": "124 apiVersion: apps/v1beta2\n", "snippetText": "124 apiVersion: apps/v1beta2\nkind: Deployment\nmetadata:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Ensure that Service Account Tokens are only mounted where necessary.", "description": "CIS Benchmark: **5.1.6**\n\nEnsure that Service Account Tokens are only mounted where necessary.\n\nMounting service account tokens inside pods can provide an avenue for privilege escalation attacks where an attacker is able to compromise a single pod in the cluster. Avoiding mounting these tokens removes this attack avenue.\n\n## Remediation\n\nModify the definition of pods and service accounts which do not need to mount service account tokens to disable it.\n", "internal_id": "CKV_K8S_38/072696660864dadfa9b43782b9581ad4", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ServiceAccountTokens", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that Service Account Tokens are only mounted where necessary.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 124, "ruleId": "CKV_K8S_38", "ruleName": "ServiceAccountTokens", "contextText": "124 apiVersion: apps/v1beta2\n", "snippetText": "124 apiVersion: apps/v1beta2\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.1.6", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "description": "CIS Benchmark: **5.7.2**\n\nEnsure that the seccomp profile is set to docker/default in your pod definitions.\n\nSeccomp (secure computing mode) is used to restrict the set of system calls applications can make, allowing cluster administrators greater control over the security of workloads running in the cluster. Kubernetes disables seccomp profiles by default for historical reasons. You should enable it to ensure that the workloads have restricted actions available within the container.\n\n## Remediation\n\nSeccomp is an alpha feature currently. By default, all alpha features are disabled. So, you would need to enable alpha features in the apiserver by passing \"--feature-gates=AllAlpha=true\" argument.\nEdit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--feature-gates=AllAlpha=true\" KUBE_API_ARGS=\"--feature-gates=AllAlpha=true\". Based on your system, restart the kube-apiserver service.\nFor example:\n```bash\nsystemctl restart kube-apiserver.service\n```\n\nUse annotations to enable the docker/default seccomp profile in your pod definitions. An example is as below:\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: trustworthy-pod\n  annotations:\n    seccomp.security.alpha.kubernetes.io/pod: docker/default\nspec:\n  containers:\n    - name: trustworthy-container\n      image: sotrustworthy:latest\n```\n", "internal_id": "CKV_K8S_31/65da396d775eb701c7449dffb244e0fb", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "Seccomp", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 124, "ruleId": "CKV_K8S_31", "ruleName": "Seccomp", "contextText": "124 apiVersion: apps/v1beta2\n", "snippetText": "124 apiVersion: apps/v1beta2\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.2", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_29/095d134fb8d49c6d0c0efc757a951d7f", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "PodSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 124, "ruleId": "CKV_K8S_29", "ruleName": "PodSecurityContext", "contextText": "124 apiVersion: apps/v1beta2\n", "snippetText": "124 apiVersion: apps/v1beta2\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Use read-only filesystem for containers where possible.", "description": "Use read-only filesystem for containers where possible.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_22/3984d886493eb3c933a86936534780c3", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadOnlyFilesystem", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Use read-only filesystem for containers where possible.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 20, "ruleId": "CKV_K8S_22", "ruleName": "ReadOnlyFilesystem", "contextText": "20           - name: studioml-go-runner-ecr-cred\n", "snippetText": "20           - name: studioml-go-runner-ecr-cred\n            command:\n            - /bin/sh\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "CPU requests should be set.", "description": "CPU requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_10/e7d9265c2e59d440d2dc80179836b693", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CPURequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "CPU requests should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 20, "ruleId": "CKV_K8S_10", "ruleName": "CPURequests", "contextText": "20           - name: studioml-go-runner-ecr-cred\n", "snippetText": "20           - name: studioml-go-runner-ecr-cred\n            command:\n            - /bin/sh\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Memory requests should be set.", "description": "Memory requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_12/6f48a8f5994f3deba2be85c873e2cb83", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MemoryRequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Memory requests should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 20, "ruleId": "CKV_K8S_12", "ruleName": "MemoryRequests", "contextText": "20           - name: studioml-go-runner-ecr-cred\n", "snippetText": "20           - name: studioml-go-runner-ecr-cred\n            command:\n            - /bin/sh\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Memory limits should be set.", "description": "Memory limits should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_13/a49e507616849e7582ea2d3fa0be9008", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MemoryLimits", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Memory limits should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 20, "ruleId": "CKV_K8S_13", "ruleName": "MemoryLimits", "contextText": "20           - name: studioml-go-runner-ecr-cred\n", "snippetText": "20           - name: studioml-go-runner-ecr-cred\n            command:\n            - /bin/sh\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "CPU limits should be set.", "description": "CPU limits should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_11/d7f976ba39a95d6a495ff321e62b240d", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CPULimits", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "CPU limits should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 20, "ruleId": "CKV_K8S_11", "ruleName": "CPULimits", "contextText": "20           - name: studioml-go-runner-ecr-cred\n", "snippetText": "20           - name: studioml-go-runner-ecr-cred\n            command:\n            - /bin/sh\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Image Tag should be fixed - not latest or blank.", "description": "Image Tag should be fixed - not latest or blank.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_14/1947d9ed72701560bd5acc3e34df1a4e", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageTagFixed", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Image Tag should be fixed - not latest or blank.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 20, "ruleId": "CKV_K8S_14", "ruleName": "ImageTagFixed", "contextText": "20           - name: studioml-go-runner-ecr-cred\n", "snippetText": "20           - name: studioml-go-runner-ecr-cred\n            command:\n            - /bin/sh\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Image Pull Policy should be Always.", "description": "Image Pull Policy should be Always.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_15/05cb3ba1754ca5b585347682d11242f9", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImagePullPolicyAlways", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Image Pull Policy should be Always.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 20, "ruleId": "CKV_K8S_15", "ruleName": "ImagePullPolicyAlways", "contextText": "20           - name: studioml-go-runner-ecr-cred\n", "snippetText": "20           - name: studioml-go-runner-ecr-cred\n            command:\n            - /bin/sh\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Image should use digest.", "description": "Image should use digest.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_43/8df55380a24c9f1e28a60b95183e8bc8", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageDigest", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Image should use digest.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 20, "ruleId": "CKV_K8S_43", "ruleName": "ImageDigest", "contextText": "20           - name: studioml-go-runner-ecr-cred\n", "snippetText": "20           - name: studioml-go-runner-ecr-cred\n            command:\n            - /bin/sh\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Containers should not run with allowPrivilegeEscalation.", "description": "CIS Benchmark: **5.2.5**\n\nMinimize the admission of containers with allowPrivilegeEscalation.\n\nA container running with the allowPrivilegeEscalation flag set to true may have processes that can gain more privileges than their parent. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to allow privilege escalation. The option exists (and is defaulted to true) to permit setuid binaries to run. If you have need to run containers which use setuid binaries or require privilege escalation, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.allowPrivilegeEscalation` field is set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_20/9c16b311d1c7f82f35cf5984acfa8962", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "AllowPrivilegeEscalation", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should not run with allowPrivilegeEscalation.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 20, "ruleId": "CKV_K8S_20", "ruleName": "AllowPrivilegeEscalation", "contextText": "20           - name: studioml-go-runner-ecr-cred\n", "snippetText": "20           - name: studioml-go-runner-ecr-cred\n            command:\n            - /bin/sh\n"}, "tags": [{"key": "cis_category", "value": "5.2.5", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Minimize the admission of containers with the NET_RAW capability.", "description": "CIS Benchmark: **5.2.7**\n\nDo not generally permit containers with the potentially dangerous NET_RAW capability.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. By default this can include potentially dangerous capabilities. With Docker as the container runtime the NET_RAW capability is enabled which may be misused by malicious containers. Ideally, all containers should drop this capability. There should be at least one PodSecurityPolicy (PSP) defined which prevents containers with the NET_RAW capability from launching. If you need to run containers with this capability, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.requiredDropCapabilities` is set to include either `NET_RAW` or `ALL`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  requiredDropCapabilities:\n    - ALL\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_28/fb555feb685f8952a2c132344663139a", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "DropCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with the NET_RAW capability.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 20, "ruleId": "CKV_K8S_28", "ruleName": "DropCapabilities", "contextText": "20           - name: studioml-go-runner-ecr-cred\n", "snippetText": "20           - name: studioml-go-runner-ecr-cred\n            command:\n            - /bin/sh\n"}, "tags": [{"key": "cis_category", "value": "5.2.7", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Minimize the admission of containers with capabilities assigned.", "description": "CIS Benchmark: **5.2.9**\n\nMinimize the admission of containers with capabilities assigned.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. Capabilities are parts of the rights generally granted on a Linux system to the root user. In many cases applications running in containers do not require any capabilities to operate, so from the perspective of the principal of least privilege use of capabilities should be minimized.\n\n## Remediation\n\nReview the use of capabilites in applications runnning on your cluster. Where a namespace contains applicaions which do not require any Linux capabities to operate consider adding a PSP which forbids the admission of containers which do not drop all capabilities.\n\n\n## Additional information\n\n- [Pod Security Policy](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities)", "internal_id": "CKV_K8S_37/5dbaa131bffa418bc77d14499f4d69e7", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MinimizeCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with capabilities assigned.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 20, "ruleId": "CKV_K8S_37", "ruleName": "MinimizeCapabilities", "contextText": "20           - name: studioml-go-runner-ecr-cred\n", "snippetText": "20           - name: studioml-go-runner-ecr-cred\n            command:\n            - /bin/sh\n"}, "tags": [{"key": "cis_category", "value": "5.2.9", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Use read-only filesystem for containers where possible.", "description": "Use read-only filesystem for containers where possible.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_22/2136b1a34ecf2365f567d66018c35701", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadOnlyFilesystem", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Use read-only filesystem for containers where possible.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 148, "ruleId": "CKV_K8S_22", "ruleName": "ReadOnlyFilesystem", "contextText": "148       - name: studioml-go-runner\n", "snippetText": "148       - name: studioml-go-runner\n        envFrom:\n        - configMapRef:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_30/49f79b25794982b1101563b98a8ad620", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ContainerSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 148, "ruleId": "CKV_K8S_30", "ruleName": "ContainerSecurityContext", "contextText": "148       - name: studioml-go-runner\n", "snippetText": "148       - name: studioml-go-runner\n        envFrom:\n        - configMapRef:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Liveness Probe Should be Configured.", "description": "Liveness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_8/37c7b917789e2c18a36f64beca5196b4", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "LivenessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Liveness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 148, "ruleId": "CKV_K8S_8", "ruleName": "LivenessProbe", "contextText": "148       - name: studioml-go-runner\n", "snippetText": "148       - name: studioml-go-runner\n        envFrom:\n        - configMapRef:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "CPU requests should be set.", "description": "CPU requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_10/298e454c2c62430cac9d8b4dd21681fe", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CPURequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "CPU requests should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 148, "ruleId": "CKV_K8S_10", "ruleName": "CPURequests", "contextText": "148       - name: studioml-go-runner\n", "snippetText": "148       - name: studioml-go-runner\n        envFrom:\n        - configMapRef:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Memory requests should be set.", "description": "Memory requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_12/9440c47d56ae0e8423f3150e06c1b8b4", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MemoryRequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Memory requests should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 148, "ruleId": "CKV_K8S_12", "ruleName": "MemoryRequests", "contextText": "148       - name: studioml-go-runner\n", "snippetText": "148       - name: studioml-go-runner\n        envFrom:\n        - configMapRef:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Readiness Probe Should be Configured.", "description": "Readiness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_9/dca2af0b2893e587a5a78435648d2680", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadinessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Readiness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 148, "ruleId": "CKV_K8S_9", "ruleName": "ReadinessProbe", "contextText": "148       - name: studioml-go-runner\n", "snippetText": "148       - name: studioml-go-runner\n        envFrom:\n        - configMapRef:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Image should use digest.", "description": "Image should use digest.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_43/b4c9526dd8f11d3d0af479bf52e54667", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageDigest", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Image should use digest.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 148, "ruleId": "CKV_K8S_43", "ruleName": "ImageDigest", "contextText": "148       - name: studioml-go-runner\n", "snippetText": "148       - name: studioml-go-runner\n        envFrom:\n        - configMapRef:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Containers should not run with allowPrivilegeEscalation.", "description": "CIS Benchmark: **5.2.5**\n\nMinimize the admission of containers with allowPrivilegeEscalation.\n\nA container running with the allowPrivilegeEscalation flag set to true may have processes that can gain more privileges than their parent. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to allow privilege escalation. The option exists (and is defaulted to true) to permit setuid binaries to run. If you have need to run containers which use setuid binaries or require privilege escalation, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.allowPrivilegeEscalation` field is set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_20/8a98911d3ec2c33f7248b3b03658f6e8", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "AllowPrivilegeEscalation", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should not run with allowPrivilegeEscalation.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 148, "ruleId": "CKV_K8S_20", "ruleName": "AllowPrivilegeEscalation", "contextText": "148       - name: studioml-go-runner\n", "snippetText": "148       - name: studioml-go-runner\n        envFrom:\n        - configMapRef:\n"}, "tags": [{"key": "cis_category", "value": "5.2.5", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Minimize the admission of containers with the NET_RAW capability.", "description": "CIS Benchmark: **5.2.7**\n\nDo not generally permit containers with the potentially dangerous NET_RAW capability.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. By default this can include potentially dangerous capabilities. With Docker as the container runtime the NET_RAW capability is enabled which may be misused by malicious containers. Ideally, all containers should drop this capability. There should be at least one PodSecurityPolicy (PSP) defined which prevents containers with the NET_RAW capability from launching. If you need to run containers with this capability, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.requiredDropCapabilities` is set to include either `NET_RAW` or `ALL`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  requiredDropCapabilities:\n    - ALL\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_28/99bef4c7120302cd9bab258192f25ba8", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "DropCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with the NET_RAW capability.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 148, "ruleId": "CKV_K8S_28", "ruleName": "DropCapabilities", "contextText": "148       - name: studioml-go-runner\n", "snippetText": "148       - name: studioml-go-runner\n        envFrom:\n        - configMapRef:\n"}, "tags": [{"key": "cis_category", "value": "5.2.7", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Minimize the admission of containers with capabilities assigned.", "description": "CIS Benchmark: **5.2.9**\n\nMinimize the admission of containers with capabilities assigned.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. Capabilities are parts of the rights generally granted on a Linux system to the root user. In many cases applications running in containers do not require any capabilities to operate, so from the perspective of the principal of least privilege use of capabilities should be minimized.\n\n## Remediation\n\nReview the use of capabilites in applications runnning on your cluster. Where a namespace contains applicaions which do not require any Linux capabities to operate consider adding a PSP which forbids the admission of containers which do not drop all capabilities.\n\n\n## Additional information\n\n- [Pod Security Policy](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities)", "internal_id": "CKV_K8S_37/ac83fea15ef38df083ad07832fe3bda5", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MinimizeCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with capabilities assigned.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/aws_test.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 148, "ruleId": "CKV_K8S_37", "ruleName": "MinimizeCapabilities", "contextText": "148       - name: studioml-go-runner\n", "snippetText": "148       - name: studioml-go-runner\n        envFrom:\n        - configMapRef:\n"}, "tags": [{"key": "cis_category", "value": "5.2.9", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Minimize the admission of containers with capabilities assigned.", "description": "CIS Benchmark: **5.2.9**\n\nMinimize the admission of containers with capabilities assigned.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. Capabilities are parts of the rights generally granted on a Linux system to the root user. In many cases applications running in containers do not require any capabilities to operate, so from the perspective of the principal of least privilege use of capabilities should be minimized.\n\n## Remediation\n\nReview the use of capabilites in applications runnning on your cluster. Where a namespace contains applicaions which do not require any Linux capabities to operate consider adding a PSP which forbids the admission of containers which do not drop all capabilities.\n\n\n## Additional information\n\n- [Pod Security Policy](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities)", "internal_id": "CKV_K8S_36/9a5fb039986e93f34b683b06b869578a", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MinimizeCapabilitiesPSP", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with capabilities assigned.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/cadvisor.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 16, "ruleId": "CKV_K8S_36", "ruleName": "MinimizeCapabilitiesPSP", "contextText": "16 apiVersion: policy/v1beta1\n", "snippetText": "16 apiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.9", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Containers should not run with allowPrivilegeEscalation.", "description": "CIS Benchmark: **5.2.5**\n\nMinimize the admission of containers with allowPrivilegeEscalation.\n\nA container running with the allowPrivilegeEscalation flag set to true may have processes that can gain more privileges than their parent. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to allow privilege escalation. The option exists (and is defaulted to true) to permit setuid binaries to run. If you have need to run containers which use setuid binaries or require privilege escalation, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.allowPrivilegeEscalation` field is set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_5/1c85179393c964d7ecfe527eb61f8cd7", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "AllowPrivilegeEscalationPSP", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should not run with allowPrivilegeEscalation.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/cadvisor.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 16, "ruleId": "CKV_K8S_5", "ruleName": "AllowPrivilegeEscalationPSP", "contextText": "16 apiVersion: policy/v1beta1\n", "snippetText": "16 apiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.5", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Ensure default seccomp profile set to docker/default or runtime/default.", "description": "CIS Benchmark: **5.7.2**\n\nEnsure that the seccomp profile is set to docker/default in your pod definitions.\n\nSeccomp (secure computing mode) is used to restrict the set of system calls applications can make, allowing cluster administrators greater control over the security of workloads running in the cluster. Kubernetes disables seccomp profiles by default for historical reasons. You should enable it to ensure that the workloads have restricted actions available within the container.\n\n## Remediation\n\nSeccomp is an alpha feature currently. By default, all alpha features are disabled. So, you would need to enable alpha features in the apiserver by passing \"--feature-gates=AllAlpha=true\" argument.\nEdit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--feature-gates=AllAlpha=true\" KUBE_API_ARGS=\"--feature-gates=AllAlpha=true\". Based on your system, restart the kube-apiserver service.\nFor example:\n```bash\nsystemctl restart kube-apiserver.service\n```\n\nUse annotations to enable the docker/default seccomp profile in your pod definitions. An example is as below:\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: trustworthy-pod\n  annotations:\n    seccomp.security.alpha.kubernetes.io/pod: docker/default\nspec:\n  containers:\n    - name: trustworthy-container\n      image: sotrustworthy:latest\n```\n", "internal_id": "CKV_K8S_32/e423f97c8bb14b3f45d82b2e22350388", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "SeccompPSP", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure default seccomp profile set to docker/default or runtime/default.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/cadvisor.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 16, "ruleId": "CKV_K8S_32", "ruleName": "SeccompPSP", "contextText": "16 apiVersion: policy/v1beta1\n", "snippetText": "16 apiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.2", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Do not admit containers with the NET_RAW capability.", "description": "CIS Benchmark: **5.2.7**\n\nDo not generally permit containers with the potentially dangerous NET_RAW capability.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. By default this can include potentially dangerous capabilities. With Docker as the container runtime the NET_RAW capability is enabled which may be misused by malicious containers. Ideally, all containers should drop this capability. There should be at least one PodSecurityPolicy (PSP) defined which prevents containers with the NET_RAW capability from launching. If you need to run containers with this capability, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.requiredDropCapabilities` is set to include either `NET_RAW` or `ALL`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  requiredDropCapabilities:\n    - ALL\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_7/80b92b6bf6c96246a69e4d38dae11ead", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "DropCapabilitiesPSP", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Do not admit containers with the NET_RAW capability.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/cadvisor.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 16, "ruleId": "CKV_K8S_7", "ruleName": "DropCapabilitiesPSP", "contextText": "16 apiVersion: policy/v1beta1\n", "snippetText": "16 apiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.7", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Do not admit root containers.", "description": "CIS Benchmark: **5.2.6**\n\nMinimize the admission of root containers.\n\nContainers may run as any Linux user. Containers which run as the root user, whilst constrained by Container Runtime security features still have a escalated likelihood of container breakout. Ideally, all containers should run as a defined non-UID 0 user. There should be at least one PodSecurityPolicy (PSP) defined which does not permit root users in a container. If you need to run root containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.runAsUser.rule` is set to either `MustRunAsNonRoot` or `MustRunAs` with the range of UIDs not including `0`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  runAsUser:\n    # Require the container to run without root privileges.\n    rule: 'MustRunAsNonRoot'\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_6/c8f2dd9c8abfcbb4aaea3972cd841347", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainersPSP", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Do not admit root containers.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/cadvisor.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 16, "ruleId": "CKV_K8S_6", "ruleName": "RootContainersPSP", "contextText": "16 apiVersion: policy/v1beta1\n", "snippetText": "16 apiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.6", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Minimize the admission of root containers.", "description": "CIS Benchmark: **5.2.6**\n\nMinimize the admission of root containers.\n\nContainers may run as any Linux user. Containers which run as the root user, whilst constrained by Container Runtime security features still have a escalated likelihood of container breakout. Ideally, all containers should run as a defined non-UID 0 user. There should be at least one PodSecurityPolicy (PSP) defined which does not permit root users in a container. If you need to run root containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.runAsUser.rule` is set to either `MustRunAsNonRoot` or `MustRunAs` with the range of UIDs not including `0`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  runAsUser:\n    # Require the container to run without root privileges.\n    rule: 'MustRunAsNonRoot'\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_23/f192283046884e41295bdfe42afb725e", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainers", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of root containers.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/cadvisor.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 73, "ruleId": "CKV_K8S_23", "ruleName": "RootContainers", "contextText": "73 apiVersion: apps/v1\n", "snippetText": "73 apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.6", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Containers should run as a high UID to avoid host conflict.", "description": "Containers should run as a high UID to avoid host conflict.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_40/90859c99b27d4d2d00165e9ebff5ecf0", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainersHighUID", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should run as a high UID to avoid host conflict.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/cadvisor.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 73, "ruleId": "CKV_K8S_40", "ruleName": "RootContainersHighUID", "contextText": "73 apiVersion: apps/v1\n", "snippetText": "73 apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "description": "CIS Benchmark: **5.7.2**\n\nEnsure that the seccomp profile is set to docker/default in your pod definitions.\n\nSeccomp (secure computing mode) is used to restrict the set of system calls applications can make, allowing cluster administrators greater control over the security of workloads running in the cluster. Kubernetes disables seccomp profiles by default for historical reasons. You should enable it to ensure that the workloads have restricted actions available within the container.\n\n## Remediation\n\nSeccomp is an alpha feature currently. By default, all alpha features are disabled. So, you would need to enable alpha features in the apiserver by passing \"--feature-gates=AllAlpha=true\" argument.\nEdit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--feature-gates=AllAlpha=true\" KUBE_API_ARGS=\"--feature-gates=AllAlpha=true\". Based on your system, restart the kube-apiserver service.\nFor example:\n```bash\nsystemctl restart kube-apiserver.service\n```\n\nUse annotations to enable the docker/default seccomp profile in your pod definitions. An example is as below:\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: trustworthy-pod\n  annotations:\n    seccomp.security.alpha.kubernetes.io/pod: docker/default\nspec:\n  containers:\n    - name: trustworthy-container\n      image: sotrustworthy:latest\n```\n", "internal_id": "CKV_K8S_31/ab8d7b33fab1e98728cec606fb915cce", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "Seccomp", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/cadvisor.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 73, "ruleId": "CKV_K8S_31", "ruleName": "Seccomp", "contextText": "73 apiVersion: apps/v1\n", "snippetText": "73 apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.2", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_29/7572713f71489cffa4e21e1f85088695", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "PodSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/cadvisor.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 73, "ruleId": "CKV_K8S_29", "ruleName": "PodSecurityContext", "contextText": "73 apiVersion: apps/v1\n", "snippetText": "73 apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Use read-only filesystem for containers where possible.", "description": "Use read-only filesystem for containers where possible.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_22/d375f6a48c3021aa3b158aca670d4cad", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadOnlyFilesystem", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Use read-only filesystem for containers where possible.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/cadvisor.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 100, "ruleId": "CKV_K8S_22", "ruleName": "ReadOnlyFilesystem", "contextText": "100       - image: k8s.gcr.io/cadvisor:v0.36.0\n", "snippetText": "100       - image: k8s.gcr.io/cadvisor:v0.36.0\n        name: cadvisor\n        args:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Liveness Probe Should be Configured.", "description": "Liveness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_8/a35090769fde92410a600aa5696c8763", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "LivenessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Liveness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/cadvisor.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 100, "ruleId": "CKV_K8S_8", "ruleName": "LivenessProbe", "contextText": "100       - image: k8s.gcr.io/cadvisor:v0.36.0\n", "snippetText": "100       - image: k8s.gcr.io/cadvisor:v0.36.0\n        name: cadvisor\n        args:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Readiness Probe Should be Configured.", "description": "Readiness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_9/9ceb5e9f1e89b9b111219dc895ba17de", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadinessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Readiness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/cadvisor.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 100, "ruleId": "CKV_K8S_9", "ruleName": "ReadinessProbe", "contextText": "100       - image: k8s.gcr.io/cadvisor:v0.36.0\n", "snippetText": "100       - image: k8s.gcr.io/cadvisor:v0.36.0\n        name: cadvisor\n        args:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Container should not be privileged.", "description": "CIS Benchmark: **5.2.1**\n\nMinimize the admission of privileged containers.\n\nPrivileged containers have access to all Linux Kernel capabilities and devices. A container running with full privileges can do almost everything that the host can do. This flag exists to allow special use-cases, like manipulating the network stack and accessing devices. There should be at least one PodSecurityPolicy (PSP) defined which does not permit privileged containers. If you need to run privileged containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.privileged` field is omitted or set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  hostNetwork: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privileged)", "internal_id": "CKV_K8S_16/2311323d0a3307e7e906f0c8ad803c5d", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "PrivilegedContainers", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Container should not be privileged.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/cadvisor.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 100, "ruleId": "CKV_K8S_16", "ruleName": "PrivilegedContainers", "contextText": "100       - image: k8s.gcr.io/cadvisor:v0.36.0\n", "snippetText": "100       - image: k8s.gcr.io/cadvisor:v0.36.0\n        name: cadvisor\n        args:\n"}, "tags": [{"key": "cis_category", "value": "5.2.1", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Image Pull Policy should be Always.", "description": "Image Pull Policy should be Always.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_15/9c280ededa3467799200010204a340d1", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImagePullPolicyAlways", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Image Pull Policy should be Always.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/cadvisor.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 100, "ruleId": "CKV_K8S_15", "ruleName": "ImagePullPolicyAlways", "contextText": "100       - image: k8s.gcr.io/cadvisor:v0.36.0\n", "snippetText": "100       - image: k8s.gcr.io/cadvisor:v0.36.0\n        name: cadvisor\n        args:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Image should use digest.", "description": "Image should use digest.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_43/b7d169150f4b1fa8cadf7275f7df69fc", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageDigest", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Image should use digest.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/cadvisor.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 100, "ruleId": "CKV_K8S_43", "ruleName": "ImageDigest", "contextText": "100       - image: k8s.gcr.io/cadvisor:v0.36.0\n", "snippetText": "100       - image: k8s.gcr.io/cadvisor:v0.36.0\n        name: cadvisor\n        args:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Containers should not run with allowPrivilegeEscalation.", "description": "CIS Benchmark: **5.2.5**\n\nMinimize the admission of containers with allowPrivilegeEscalation.\n\nA container running with the allowPrivilegeEscalation flag set to true may have processes that can gain more privileges than their parent. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to allow privilege escalation. The option exists (and is defaulted to true) to permit setuid binaries to run. If you have need to run containers which use setuid binaries or require privilege escalation, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.allowPrivilegeEscalation` field is set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_20/608b781bf309ad7c868be05c81c037da", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "AllowPrivilegeEscalation", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should not run with allowPrivilegeEscalation.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/cadvisor.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 100, "ruleId": "CKV_K8S_20", "ruleName": "AllowPrivilegeEscalation", "contextText": "100       - image: k8s.gcr.io/cadvisor:v0.36.0\n", "snippetText": "100       - image: k8s.gcr.io/cadvisor:v0.36.0\n        name: cadvisor\n        args:\n"}, "tags": [{"key": "cis_category", "value": "5.2.5", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Minimize the admission of containers with the NET_RAW capability.", "description": "CIS Benchmark: **5.2.7**\n\nDo not generally permit containers with the potentially dangerous NET_RAW capability.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. By default this can include potentially dangerous capabilities. With Docker as the container runtime the NET_RAW capability is enabled which may be misused by malicious containers. Ideally, all containers should drop this capability. There should be at least one PodSecurityPolicy (PSP) defined which prevents containers with the NET_RAW capability from launching. If you need to run containers with this capability, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.requiredDropCapabilities` is set to include either `NET_RAW` or `ALL`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  requiredDropCapabilities:\n    - ALL\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_28/6cdcfbd97ed397eabc8e2c0d8693bf0c", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "DropCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with the NET_RAW capability.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/cadvisor.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 100, "ruleId": "CKV_K8S_28", "ruleName": "DropCapabilities", "contextText": "100       - image: k8s.gcr.io/cadvisor:v0.36.0\n", "snippetText": "100       - image: k8s.gcr.io/cadvisor:v0.36.0\n        name: cadvisor\n        args:\n"}, "tags": [{"key": "cis_category", "value": "5.2.7", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Minimize the admission of containers with capabilities assigned.", "description": "CIS Benchmark: **5.2.9**\n\nMinimize the admission of containers with capabilities assigned.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. Capabilities are parts of the rights generally granted on a Linux system to the root user. In many cases applications running in containers do not require any capabilities to operate, so from the perspective of the principal of least privilege use of capabilities should be minimized.\n\n## Remediation\n\nReview the use of capabilites in applications runnning on your cluster. Where a namespace contains applicaions which do not require any Linux capabities to operate consider adding a PSP which forbids the admission of containers which do not drop all capabilities.\n\n\n## Additional information\n\n- [Pod Security Policy](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities)", "internal_id": "CKV_K8S_37/1db7da04692f46fb36744f6f5126868e", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MinimizeCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with capabilities assigned.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/cadvisor.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 100, "ruleId": "CKV_K8S_37", "ruleName": "MinimizeCapabilities", "contextText": "100       - image: k8s.gcr.io/cadvisor:v0.36.0\n", "snippetText": "100       - image: k8s.gcr.io/cadvisor:v0.36.0\n        name: cadvisor\n        args:\n"}, "tags": [{"key": "cis_category", "value": "5.2.9", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Minimize the admission of root containers.", "description": "CIS Benchmark: **5.2.6**\n\nMinimize the admission of root containers.\n\nContainers may run as any Linux user. Containers which run as the root user, whilst constrained by Container Runtime security features still have a escalated likelihood of container breakout. Ideally, all containers should run as a defined non-UID 0 user. There should be at least one PodSecurityPolicy (PSP) defined which does not permit root users in a container. If you need to run root containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.runAsUser.rule` is set to either `MustRunAsNonRoot` or `MustRunAs` with the range of UIDs not including `0`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  runAsUser:\n    # Require the container to run without root privileges.\n    rule: 'MustRunAsNonRoot'\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_23/a7b02832a7491b407fcd385dea7ef1a1", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainers", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of root containers.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-device-plugin.yml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_23", "ruleName": "RootContainers", "contextText": "15 apiVersion: apps/v1\n", "snippetText": "15 apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.6", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Containers should run as a high UID to avoid host conflict.", "description": "Containers should run as a high UID to avoid host conflict.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_40/ce8d96ae97e1ac35013ff9e78ae2c965", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainersHighUID", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should run as a high UID to avoid host conflict.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-device-plugin.yml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_40", "ruleName": "RootContainersHighUID", "contextText": "15 apiVersion: apps/v1\n", "snippetText": "15 apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Ensure that Service Account Tokens are only mounted where necessary.", "description": "CIS Benchmark: **5.1.6**\n\nEnsure that Service Account Tokens are only mounted where necessary.\n\nMounting service account tokens inside pods can provide an avenue for privilege escalation attacks where an attacker is able to compromise a single pod in the cluster. Avoiding mounting these tokens removes this attack avenue.\n\n## Remediation\n\nModify the definition of pods and service accounts which do not need to mount service account tokens to disable it.\n", "internal_id": "CKV_K8S_38/523c3e4577c0699bc709d8784c353bd4", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ServiceAccountTokens", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that Service Account Tokens are only mounted where necessary.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-device-plugin.yml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_38", "ruleName": "ServiceAccountTokens", "contextText": "15 apiVersion: apps/v1\n", "snippetText": "15 apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.1.6", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "description": "CIS Benchmark: **5.7.2**\n\nEnsure that the seccomp profile is set to docker/default in your pod definitions.\n\nSeccomp (secure computing mode) is used to restrict the set of system calls applications can make, allowing cluster administrators greater control over the security of workloads running in the cluster. Kubernetes disables seccomp profiles by default for historical reasons. You should enable it to ensure that the workloads have restricted actions available within the container.\n\n## Remediation\n\nSeccomp is an alpha feature currently. By default, all alpha features are disabled. So, you would need to enable alpha features in the apiserver by passing \"--feature-gates=AllAlpha=true\" argument.\nEdit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--feature-gates=AllAlpha=true\" KUBE_API_ARGS=\"--feature-gates=AllAlpha=true\". Based on your system, restart the kube-apiserver service.\nFor example:\n```bash\nsystemctl restart kube-apiserver.service\n```\n\nUse annotations to enable the docker/default seccomp profile in your pod definitions. An example is as below:\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: trustworthy-pod\n  annotations:\n    seccomp.security.alpha.kubernetes.io/pod: docker/default\nspec:\n  containers:\n    - name: trustworthy-container\n      image: sotrustworthy:latest\n```\n", "internal_id": "CKV_K8S_31/1dd5eceae8271dfb6e32b9463de56cc1", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "Seccomp", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-device-plugin.yml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_31", "ruleName": "Seccomp", "contextText": "15 apiVersion: apps/v1\n", "snippetText": "15 apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.2", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_29/ecab80056148466cda07fbb62070b70c", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "PodSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-device-plugin.yml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 15, "ruleId": "CKV_K8S_29", "ruleName": "PodSecurityContext", "contextText": "15 apiVersion: apps/v1\n", "snippetText": "15 apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Use read-only filesystem for containers where possible.", "description": "Use read-only filesystem for containers where possible.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_22/9c13cc8f78c662de26dfc5c630135696", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadOnlyFilesystem", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Use read-only filesystem for containers where possible.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-device-plugin.yml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 49, "ruleId": "CKV_K8S_22", "ruleName": "ReadOnlyFilesystem", "contextText": "49       - image: nvidia/k8s-device-plugin:1.0.0-beta3\n", "snippetText": "49       - image: nvidia/k8s-device-plugin:1.0.0-beta3\n        name: nvidia-device-plugin-ctr\n        securityContext:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Liveness Probe Should be Configured.", "description": "Liveness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_8/38407601b9cf8833f7ad3bd39f4e5ede", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "LivenessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Liveness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-device-plugin.yml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 49, "ruleId": "CKV_K8S_8", "ruleName": "LivenessProbe", "contextText": "49       - image: nvidia/k8s-device-plugin:1.0.0-beta3\n", "snippetText": "49       - image: nvidia/k8s-device-plugin:1.0.0-beta3\n        name: nvidia-device-plugin-ctr\n        securityContext:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "CPU requests should be set.", "description": "CPU requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_10/d44f6a42c42389669cfe73c68618d1d4", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CPURequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "CPU requests should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-device-plugin.yml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 49, "ruleId": "CKV_K8S_10", "ruleName": "CPURequests", "contextText": "49       - image: nvidia/k8s-device-plugin:1.0.0-beta3\n", "snippetText": "49       - image: nvidia/k8s-device-plugin:1.0.0-beta3\n        name: nvidia-device-plugin-ctr\n        securityContext:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Memory requests should be set.", "description": "Memory requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_12/f09459abd456f1977bf57e17a1d1da50", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MemoryRequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Memory requests should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-device-plugin.yml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 49, "ruleId": "CKV_K8S_12", "ruleName": "MemoryRequests", "contextText": "49       - image: nvidia/k8s-device-plugin:1.0.0-beta3\n", "snippetText": "49       - image: nvidia/k8s-device-plugin:1.0.0-beta3\n        name: nvidia-device-plugin-ctr\n        securityContext:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Memory limits should be set.", "description": "Memory limits should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_13/987be9ec7059f8acdb65d89cd797644c", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MemoryLimits", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Memory limits should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-device-plugin.yml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 49, "ruleId": "CKV_K8S_13", "ruleName": "MemoryLimits", "contextText": "49       - image: nvidia/k8s-device-plugin:1.0.0-beta3\n", "snippetText": "49       - image: nvidia/k8s-device-plugin:1.0.0-beta3\n        name: nvidia-device-plugin-ctr\n        securityContext:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Readiness Probe Should be Configured.", "description": "Readiness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_9/ff6244a72470ad31fb2d5c26984553f2", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadinessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Readiness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-device-plugin.yml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 49, "ruleId": "CKV_K8S_9", "ruleName": "ReadinessProbe", "contextText": "49       - image: nvidia/k8s-device-plugin:1.0.0-beta3\n", "snippetText": "49       - image: nvidia/k8s-device-plugin:1.0.0-beta3\n        name: nvidia-device-plugin-ctr\n        securityContext:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "CPU limits should be set.", "description": "CPU limits should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_11/5301e903b01c2396f2c12e13f4375b2c", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CPULimits", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "CPU limits should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-device-plugin.yml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 49, "ruleId": "CKV_K8S_11", "ruleName": "CPULimits", "contextText": "49       - image: nvidia/k8s-device-plugin:1.0.0-beta3\n", "snippetText": "49       - image: nvidia/k8s-device-plugin:1.0.0-beta3\n        name: nvidia-device-plugin-ctr\n        securityContext:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Image Pull Policy should be Always.", "description": "Image Pull Policy should be Always.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_15/2d4dfdad3c812836e82801e7127ee4c6", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImagePullPolicyAlways", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Image Pull Policy should be Always.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-device-plugin.yml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 49, "ruleId": "CKV_K8S_15", "ruleName": "ImagePullPolicyAlways", "contextText": "49       - image: nvidia/k8s-device-plugin:1.0.0-beta3\n", "snippetText": "49       - image: nvidia/k8s-device-plugin:1.0.0-beta3\n        name: nvidia-device-plugin-ctr\n        securityContext:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Image should use digest.", "description": "Image should use digest.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_43/54a6986b7fbaefe174a74097ce35af32", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageDigest", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Image should use digest.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-device-plugin.yml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 49, "ruleId": "CKV_K8S_43", "ruleName": "ImageDigest", "contextText": "49       - image: nvidia/k8s-device-plugin:1.0.0-beta3\n", "snippetText": "49       - image: nvidia/k8s-device-plugin:1.0.0-beta3\n        name: nvidia-device-plugin-ctr\n        securityContext:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Ensure that default service accounts are not actively used.", "description": "CIS Benchmark: **5.1.5**\n\nEnsure that default service accounts are not actively used.\n\nKubernetes provides a `default` service account which is used by cluster workloads where no specific service account is assigned to the pod. Where access to the Kubernetes API from a pod is required, a specific service account should be created for that pod, and rights granted to that service account. The default service account should be configured such that it does not provide a service account token and does not have any explicit rights assignments.\n\n## Remediation\n\nCreate explicit service accounts wherever a Kubernetes workload requires specific access to the Kubernetes API server.\nModify the configuration of each default service account to include this value\n```\nautomountServiceAccountToken: false\n```\n", "internal_id": "CKV_K8S_42/22755b35e2ebe2e7ab6abbc0d04040ad", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultServiceAccountBinding", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that default service accounts are not actively used.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 8, "ruleId": "CKV_K8S_42", "ruleName": "DefaultServiceAccountBinding", "contextText": "8 kind: ClusterRoleBinding\n", "snippetText": "8 kind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.1.5", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Minimize the admission of root containers.", "description": "CIS Benchmark: **5.2.6**\n\nMinimize the admission of root containers.\n\nContainers may run as any Linux user. Containers which run as the root user, whilst constrained by Container Runtime security features still have a escalated likelihood of container breakout. Ideally, all containers should run as a defined non-UID 0 user. There should be at least one PodSecurityPolicy (PSP) defined which does not permit root users in a container. If you need to run root containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.runAsUser.rule` is set to either `MustRunAsNonRoot` or `MustRunAs` with the range of UIDs not including `0`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  runAsUser:\n    # Require the container to run without root privileges.\n    rule: 'MustRunAsNonRoot'\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_23/8dcaf8f08a2dbbbe4be86a65ccb4fa39", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainers", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of root containers.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 64, "ruleId": "CKV_K8S_23", "ruleName": "RootContainers", "contextText": "64 apiVersion: v1\n", "snippetText": "64 apiVersion: v1\nkind: ReplicationController\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.6", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Containers should run as a high UID to avoid host conflict.", "description": "Containers should run as a high UID to avoid host conflict.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_40/df04b301366b8e1ef855a5edb958fac1", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainersHighUID", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should run as a high UID to avoid host conflict.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 64, "ruleId": "CKV_K8S_40", "ruleName": "RootContainersHighUID", "contextText": "64 apiVersion: v1\n", "snippetText": "64 apiVersion: v1\nkind: ReplicationController\nmetadata:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Ensure that Service Account Tokens are only mounted where necessary.", "description": "CIS Benchmark: **5.1.6**\n\nEnsure that Service Account Tokens are only mounted where necessary.\n\nMounting service account tokens inside pods can provide an avenue for privilege escalation attacks where an attacker is able to compromise a single pod in the cluster. Avoiding mounting these tokens removes this attack avenue.\n\n## Remediation\n\nModify the definition of pods and service accounts which do not need to mount service account tokens to disable it.\n", "internal_id": "CKV_K8S_38/73897d792ce25d19f99309c7bb5efcb1", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ServiceAccountTokens", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that Service Account Tokens are only mounted where necessary.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 64, "ruleId": "CKV_K8S_38", "ruleName": "ServiceAccountTokens", "contextText": "64 apiVersion: v1\n", "snippetText": "64 apiVersion: v1\nkind: ReplicationController\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.1.6", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "description": "CIS Benchmark: **5.7.2**\n\nEnsure that the seccomp profile is set to docker/default in your pod definitions.\n\nSeccomp (secure computing mode) is used to restrict the set of system calls applications can make, allowing cluster administrators greater control over the security of workloads running in the cluster. Kubernetes disables seccomp profiles by default for historical reasons. You should enable it to ensure that the workloads have restricted actions available within the container.\n\n## Remediation\n\nSeccomp is an alpha feature currently. By default, all alpha features are disabled. So, you would need to enable alpha features in the apiserver by passing \"--feature-gates=AllAlpha=true\" argument.\nEdit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--feature-gates=AllAlpha=true\" KUBE_API_ARGS=\"--feature-gates=AllAlpha=true\". Based on your system, restart the kube-apiserver service.\nFor example:\n```bash\nsystemctl restart kube-apiserver.service\n```\n\nUse annotations to enable the docker/default seccomp profile in your pod definitions. An example is as below:\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: trustworthy-pod\n  annotations:\n    seccomp.security.alpha.kubernetes.io/pod: docker/default\nspec:\n  containers:\n    - name: trustworthy-container\n      image: sotrustworthy:latest\n```\n", "internal_id": "CKV_K8S_31/b0df4e5c20f72756a8bc5f757bebaa69", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "Seccomp", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 64, "ruleId": "CKV_K8S_31", "ruleName": "Seccomp", "contextText": "64 apiVersion: v1\n", "snippetText": "64 apiVersion: v1\nkind: ReplicationController\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.2", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_29/ad85a4bcd652d3b4972ca9a44c470807", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "PodSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 64, "ruleId": "CKV_K8S_29", "ruleName": "PodSecurityContext", "contextText": "64 apiVersion: v1\n", "snippetText": "64 apiVersion: v1\nkind: ReplicationController\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Minimize the admission of root containers.", "description": "CIS Benchmark: **5.2.6**\n\nMinimize the admission of root containers.\n\nContainers may run as any Linux user. Containers which run as the root user, whilst constrained by Container Runtime security features still have a escalated likelihood of container breakout. Ideally, all containers should run as a defined non-UID 0 user. There should be at least one PodSecurityPolicy (PSP) defined which does not permit root users in a container. If you need to run root containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.runAsUser.rule` is set to either `MustRunAsNonRoot` or `MustRunAs` with the range of UIDs not including `0`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  runAsUser:\n    # Require the container to run without root privileges.\n    rule: 'MustRunAsNonRoot'\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_23/86761f624c0c2354d4e7b1edd40cb4c6", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainers", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of root containers.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 126, "ruleId": "CKV_K8S_23", "ruleName": "RootContainers", "contextText": "126 apiVersion: extensions/v1beta1\n", "snippetText": "126 apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.6", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Containers should run as a high UID to avoid host conflict.", "description": "Containers should run as a high UID to avoid host conflict.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_40/9b12c0ff0af2997368cd911c63a25b33", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainersHighUID", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should run as a high UID to avoid host conflict.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 126, "ruleId": "CKV_K8S_40", "ruleName": "RootContainersHighUID", "contextText": "126 apiVersion: extensions/v1beta1\n", "snippetText": "126 apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Ensure that Service Account Tokens are only mounted where necessary.", "description": "CIS Benchmark: **5.1.6**\n\nEnsure that Service Account Tokens are only mounted where necessary.\n\nMounting service account tokens inside pods can provide an avenue for privilege escalation attacks where an attacker is able to compromise a single pod in the cluster. Avoiding mounting these tokens removes this attack avenue.\n\n## Remediation\n\nModify the definition of pods and service accounts which do not need to mount service account tokens to disable it.\n", "internal_id": "CKV_K8S_38/be7c3b82f4e988b4b48fb4b92868f32c", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ServiceAccountTokens", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that Service Account Tokens are only mounted where necessary.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 126, "ruleId": "CKV_K8S_38", "ruleName": "ServiceAccountTokens", "contextText": "126 apiVersion: extensions/v1beta1\n", "snippetText": "126 apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.1.6", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "description": "CIS Benchmark: **5.7.2**\n\nEnsure that the seccomp profile is set to docker/default in your pod definitions.\n\nSeccomp (secure computing mode) is used to restrict the set of system calls applications can make, allowing cluster administrators greater control over the security of workloads running in the cluster. Kubernetes disables seccomp profiles by default for historical reasons. You should enable it to ensure that the workloads have restricted actions available within the container.\n\n## Remediation\n\nSeccomp is an alpha feature currently. By default, all alpha features are disabled. So, you would need to enable alpha features in the apiserver by passing \"--feature-gates=AllAlpha=true\" argument.\nEdit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--feature-gates=AllAlpha=true\" KUBE_API_ARGS=\"--feature-gates=AllAlpha=true\". Based on your system, restart the kube-apiserver service.\nFor example:\n```bash\nsystemctl restart kube-apiserver.service\n```\n\nUse annotations to enable the docker/default seccomp profile in your pod definitions. An example is as below:\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: trustworthy-pod\n  annotations:\n    seccomp.security.alpha.kubernetes.io/pod: docker/default\nspec:\n  containers:\n    - name: trustworthy-container\n      image: sotrustworthy:latest\n```\n", "internal_id": "CKV_K8S_31/3db2b9bf880ddc1868a1e006179e1bc0", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "Seccomp", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 126, "ruleId": "CKV_K8S_31", "ruleName": "Seccomp", "contextText": "126 apiVersion: extensions/v1beta1\n", "snippetText": "126 apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.2", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_29/7b66d51b21a221c910584bc9cfb0f4ed", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "PodSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 126, "ruleId": "CKV_K8S_29", "ruleName": "PodSecurityContext", "contextText": "126 apiVersion: extensions/v1beta1\n", "snippetText": "126 apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Minimize the admission of root containers.", "description": "CIS Benchmark: **5.2.6**\n\nMinimize the admission of root containers.\n\nContainers may run as any Linux user. Containers which run as the root user, whilst constrained by Container Runtime security features still have a escalated likelihood of container breakout. Ideally, all containers should run as a defined non-UID 0 user. There should be at least one PodSecurityPolicy (PSP) defined which does not permit root users in a container. If you need to run root containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.runAsUser.rule` is set to either `MustRunAsNonRoot` or `MustRunAs` with the range of UIDs not including `0`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  runAsUser:\n    # Require the container to run without root privileges.\n    rule: 'MustRunAsNonRoot'\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_23/b1e7c1720502693c47292d5cb6d11b4a", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainers", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of root containers.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 179, "ruleId": "CKV_K8S_23", "ruleName": "RootContainers", "contextText": "179 apiVersion: batch/v1\n", "snippetText": "179 apiVersion: batch/v1\nkind: Job\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.6", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Containers should run as a high UID to avoid host conflict.", "description": "Containers should run as a high UID to avoid host conflict.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_40/e48fbe5e662a75b6e3c208460d49c6ed", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainersHighUID", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should run as a high UID to avoid host conflict.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 179, "ruleId": "CKV_K8S_40", "ruleName": "RootContainersHighUID", "contextText": "179 apiVersion: batch/v1\n", "snippetText": "179 apiVersion: batch/v1\nkind: Job\nmetadata:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Ensure that Service Account Tokens are only mounted where necessary.", "description": "CIS Benchmark: **5.1.6**\n\nEnsure that Service Account Tokens are only mounted where necessary.\n\nMounting service account tokens inside pods can provide an avenue for privilege escalation attacks where an attacker is able to compromise a single pod in the cluster. Avoiding mounting these tokens removes this attack avenue.\n\n## Remediation\n\nModify the definition of pods and service accounts which do not need to mount service account tokens to disable it.\n", "internal_id": "CKV_K8S_38/0a6f7591d222b69d7077b4249679f119", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ServiceAccountTokens", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that Service Account Tokens are only mounted where necessary.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 179, "ruleId": "CKV_K8S_38", "ruleName": "ServiceAccountTokens", "contextText": "179 apiVersion: batch/v1\n", "snippetText": "179 apiVersion: batch/v1\nkind: Job\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.1.6", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "description": "CIS Benchmark: **5.7.2**\n\nEnsure that the seccomp profile is set to docker/default in your pod definitions.\n\nSeccomp (secure computing mode) is used to restrict the set of system calls applications can make, allowing cluster administrators greater control over the security of workloads running in the cluster. Kubernetes disables seccomp profiles by default for historical reasons. You should enable it to ensure that the workloads have restricted actions available within the container.\n\n## Remediation\n\nSeccomp is an alpha feature currently. By default, all alpha features are disabled. So, you would need to enable alpha features in the apiserver by passing \"--feature-gates=AllAlpha=true\" argument.\nEdit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--feature-gates=AllAlpha=true\" KUBE_API_ARGS=\"--feature-gates=AllAlpha=true\". Based on your system, restart the kube-apiserver service.\nFor example:\n```bash\nsystemctl restart kube-apiserver.service\n```\n\nUse annotations to enable the docker/default seccomp profile in your pod definitions. An example is as below:\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: trustworthy-pod\n  annotations:\n    seccomp.security.alpha.kubernetes.io/pod: docker/default\nspec:\n  containers:\n    - name: trustworthy-container\n      image: sotrustworthy:latest\n```\n", "internal_id": "CKV_K8S_31/29383c65134d033540f1d941be777ed5", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "Seccomp", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 179, "ruleId": "CKV_K8S_31", "ruleName": "Seccomp", "contextText": "179 apiVersion: batch/v1\n", "snippetText": "179 apiVersion: batch/v1\nkind: Job\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.2", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_29/7e80c0c72fe31745dc4db7dd42ac03af", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "PodSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 179, "ruleId": "CKV_K8S_29", "ruleName": "PodSecurityContext", "contextText": "179 apiVersion: batch/v1\n", "snippetText": "179 apiVersion: batch/v1\nkind: Job\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Use read-only filesystem for containers where possible.", "description": "Use read-only filesystem for containers where possible.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_22/87f726491f6e1f3c791c199c93cc2dc8", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadOnlyFilesystem", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Use read-only filesystem for containers where possible.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 80, "ruleId": "CKV_K8S_22", "ruleName": "ReadOnlyFilesystem", "contextText": "80       - image: rabbitmq\n", "snippetText": "80       - image: rabbitmq\n        name: rabbitmq\n        ports:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_30/3b42a99dae5b816aed3ec9acca494af2", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ContainerSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 80, "ruleId": "CKV_K8S_30", "ruleName": "ContainerSecurityContext", "contextText": "80       - image: rabbitmq\n", "snippetText": "80       - image: rabbitmq\n        name: rabbitmq\n        ports:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Liveness Probe Should be Configured.", "description": "Liveness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_8/f4c5e2dcd65c083a2004fed210a6eab7", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "LivenessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Liveness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 80, "ruleId": "CKV_K8S_8", "ruleName": "LivenessProbe", "contextText": "80       - image: rabbitmq\n", "snippetText": "80       - image: rabbitmq\n        name: rabbitmq\n        ports:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "CPU requests should be set.", "description": "CPU requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_10/92b0ba1cf73f9fd37c39f4610598fe9d", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CPURequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "CPU requests should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 80, "ruleId": "CKV_K8S_10", "ruleName": "CPURequests", "contextText": "80       - image: rabbitmq\n", "snippetText": "80       - image: rabbitmq\n        name: rabbitmq\n        ports:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Memory requests should be set.", "description": "Memory requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_12/46e8285a9bbc4b2a86e9c2ff0774cd3e", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MemoryRequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Memory requests should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 80, "ruleId": "CKV_K8S_12", "ruleName": "MemoryRequests", "contextText": "80       - image: rabbitmq\n", "snippetText": "80       - image: rabbitmq\n        name: rabbitmq\n        ports:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Memory limits should be set.", "description": "Memory limits should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_13/4b04a39f0496a1781cde207f03d09f55", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MemoryLimits", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Memory limits should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 80, "ruleId": "CKV_K8S_13", "ruleName": "MemoryLimits", "contextText": "80       - image: rabbitmq\n", "snippetText": "80       - image: rabbitmq\n        name: rabbitmq\n        ports:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Readiness Probe Should be Configured.", "description": "Readiness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_9/db4974e6a91b0df45a50ae657d50bf88", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadinessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Readiness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 80, "ruleId": "CKV_K8S_9", "ruleName": "ReadinessProbe", "contextText": "80       - image: rabbitmq\n", "snippetText": "80       - image: rabbitmq\n        name: rabbitmq\n        ports:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Image Tag should be fixed - not latest or blank.", "description": "Image Tag should be fixed - not latest or blank.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_14/fd5f97693342dd9de91b44a264224f0d", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageTagFixed", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Image Tag should be fixed - not latest or blank.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 80, "ruleId": "CKV_K8S_14", "ruleName": "ImageTagFixed", "contextText": "80       - image: rabbitmq\n", "snippetText": "80       - image: rabbitmq\n        name: rabbitmq\n        ports:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Image should use digest.", "description": "Image should use digest.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_43/e0a2ee1a6077bad98a58f4dc02e5b851", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageDigest", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Image should use digest.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 80, "ruleId": "CKV_K8S_43", "ruleName": "ImageDigest", "contextText": "80       - image: rabbitmq\n", "snippetText": "80       - image: rabbitmq\n        name: rabbitmq\n        ports:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Containers should not run with allowPrivilegeEscalation.", "description": "CIS Benchmark: **5.2.5**\n\nMinimize the admission of containers with allowPrivilegeEscalation.\n\nA container running with the allowPrivilegeEscalation flag set to true may have processes that can gain more privileges than their parent. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to allow privilege escalation. The option exists (and is defaulted to true) to permit setuid binaries to run. If you have need to run containers which use setuid binaries or require privilege escalation, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.allowPrivilegeEscalation` field is set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_20/f99ce7daaf452e19e1120fcbb94b7dcf", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "AllowPrivilegeEscalation", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should not run with allowPrivilegeEscalation.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 80, "ruleId": "CKV_K8S_20", "ruleName": "AllowPrivilegeEscalation", "contextText": "80       - image: rabbitmq\n", "snippetText": "80       - image: rabbitmq\n        name: rabbitmq\n        ports:\n"}, "tags": [{"key": "cis_category", "value": "5.2.5", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Minimize the admission of containers with the NET_RAW capability.", "description": "CIS Benchmark: **5.2.7**\n\nDo not generally permit containers with the potentially dangerous NET_RAW capability.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. By default this can include potentially dangerous capabilities. With Docker as the container runtime the NET_RAW capability is enabled which may be misused by malicious containers. Ideally, all containers should drop this capability. There should be at least one PodSecurityPolicy (PSP) defined which prevents containers with the NET_RAW capability from launching. If you need to run containers with this capability, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.requiredDropCapabilities` is set to include either `NET_RAW` or `ALL`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  requiredDropCapabilities:\n    - ALL\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_28/bf9c5574a512be6c798c6686d9a01394", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "DropCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with the NET_RAW capability.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 80, "ruleId": "CKV_K8S_28", "ruleName": "DropCapabilities", "contextText": "80       - image: rabbitmq\n", "snippetText": "80       - image: rabbitmq\n        name: rabbitmq\n        ports:\n"}, "tags": [{"key": "cis_category", "value": "5.2.7", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Minimize the admission of containers with capabilities assigned.", "description": "CIS Benchmark: **5.2.9**\n\nMinimize the admission of containers with capabilities assigned.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. Capabilities are parts of the rights generally granted on a Linux system to the root user. In many cases applications running in containers do not require any capabilities to operate, so from the perspective of the principal of least privilege use of capabilities should be minimized.\n\n## Remediation\n\nReview the use of capabilites in applications runnning on your cluster. Where a namespace contains applicaions which do not require any Linux capabities to operate consider adding a PSP which forbids the admission of containers which do not drop all capabilities.\n\n\n## Additional information\n\n- [Pod Security Policy](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities)", "internal_id": "CKV_K8S_37/623670d59c4d25497cddfd170a835ec4", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MinimizeCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with capabilities assigned.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 80, "ruleId": "CKV_K8S_37", "ruleName": "MinimizeCapabilities", "contextText": "80       - image: rabbitmq\n", "snippetText": "80       - image: rabbitmq\n        name: rabbitmq\n        ports:\n"}, "tags": [{"key": "cis_category", "value": "5.2.9", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Use read-only filesystem for containers where possible.", "description": "Use read-only filesystem for containers where possible.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_22/8fe262137aa89055196ddfacdf4a9922", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadOnlyFilesystem", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Use read-only filesystem for containers where possible.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 148, "ruleId": "CKV_K8S_22", "ruleName": "ReadOnlyFilesystem", "contextText": "148       - name: minio\n", "snippetText": "148       - name: minio\n        # Pulls the default Minio image from Docker Hub\n        image: minio/minio\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_30/7324304d831a42257844e15a1e329441", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ContainerSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 148, "ruleId": "CKV_K8S_30", "ruleName": "ContainerSecurityContext", "contextText": "148       - name: minio\n", "snippetText": "148       - name: minio\n        # Pulls the default Minio image from Docker Hub\n        image: minio/minio\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Liveness Probe Should be Configured.", "description": "Liveness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_8/fe305ae21ea71fc162850419c3b2f031", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "LivenessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Liveness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 148, "ruleId": "CKV_K8S_8", "ruleName": "LivenessProbe", "contextText": "148       - name: minio\n", "snippetText": "148       - name: minio\n        # Pulls the default Minio image from Docker Hub\n        image: minio/minio\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "CPU requests should be set.", "description": "CPU requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_10/babaf0a23dbab8d23ac6e8d29a26636f", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CPURequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "CPU requests should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 148, "ruleId": "CKV_K8S_10", "ruleName": "CPURequests", "contextText": "148       - name: minio\n", "snippetText": "148       - name: minio\n        # Pulls the default Minio image from Docker Hub\n        image: minio/minio\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Memory requests should be set.", "description": "Memory requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_12/914f8f250192220a0a73d2cf476f9b0a", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MemoryRequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Memory requests should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 148, "ruleId": "CKV_K8S_12", "ruleName": "MemoryRequests", "contextText": "148       - name: minio\n", "snippetText": "148       - name: minio\n        # Pulls the default Minio image from Docker Hub\n        image: minio/minio\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Memory limits should be set.", "description": "Memory limits should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_13/6a5a4eb2885cfa810e9d50d103c135a8", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MemoryLimits", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Memory limits should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 148, "ruleId": "CKV_K8S_13", "ruleName": "MemoryLimits", "contextText": "148       - name: minio\n", "snippetText": "148       - name: minio\n        # Pulls the default Minio image from Docker Hub\n        image: minio/minio\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Readiness Probe Should be Configured.", "description": "Readiness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_9/3db4ebd15b24fba09a5423715b59de23", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadinessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Readiness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 148, "ruleId": "CKV_K8S_9", "ruleName": "ReadinessProbe", "contextText": "148       - name: minio\n", "snippetText": "148       - name: minio\n        # Pulls the default Minio image from Docker Hub\n        image: minio/minio\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "CPU limits should be set.", "description": "CPU limits should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_11/4cd1b9da1b76a82ecf0d7d9b275efefb", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CPULimits", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "CPU limits should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 148, "ruleId": "CKV_K8S_11", "ruleName": "CPULimits", "contextText": "148       - name: minio\n", "snippetText": "148       - name: minio\n        # Pulls the default Minio image from Docker Hub\n        image: minio/minio\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Image Tag should be fixed - not latest or blank.", "description": "Image Tag should be fixed - not latest or blank.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_14/fe53e00ea0ae5a3f0b56616fc61034e1", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageTagFixed", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Image Tag should be fixed - not latest or blank.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 148, "ruleId": "CKV_K8S_14", "ruleName": "ImageTagFixed", "contextText": "148       - name: minio\n", "snippetText": "148       - name: minio\n        # Pulls the default Minio image from Docker Hub\n        image: minio/minio\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Image should use digest.", "description": "Image should use digest.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_43/d35f046560135c03db7302fd479fdd49", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageDigest", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Image should use digest.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 148, "ruleId": "CKV_K8S_43", "ruleName": "ImageDigest", "contextText": "148       - name: minio\n", "snippetText": "148       - name: minio\n        # Pulls the default Minio image from Docker Hub\n        image: minio/minio\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Containers should not run with allowPrivilegeEscalation.", "description": "CIS Benchmark: **5.2.5**\n\nMinimize the admission of containers with allowPrivilegeEscalation.\n\nA container running with the allowPrivilegeEscalation flag set to true may have processes that can gain more privileges than their parent. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to allow privilege escalation. The option exists (and is defaulted to true) to permit setuid binaries to run. If you have need to run containers which use setuid binaries or require privilege escalation, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.allowPrivilegeEscalation` field is set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_20/c4e64ff7af818f2da1eb28156f9dddc7", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "AllowPrivilegeEscalation", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should not run with allowPrivilegeEscalation.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 148, "ruleId": "CKV_K8S_20", "ruleName": "AllowPrivilegeEscalation", "contextText": "148       - name: minio\n", "snippetText": "148       - name: minio\n        # Pulls the default Minio image from Docker Hub\n        image: minio/minio\n"}, "tags": [{"key": "cis_category", "value": "5.2.5", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Minimize the admission of containers with the NET_RAW capability.", "description": "CIS Benchmark: **5.2.7**\n\nDo not generally permit containers with the potentially dangerous NET_RAW capability.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. By default this can include potentially dangerous capabilities. With Docker as the container runtime the NET_RAW capability is enabled which may be misused by malicious containers. Ideally, all containers should drop this capability. There should be at least one PodSecurityPolicy (PSP) defined which prevents containers with the NET_RAW capability from launching. If you need to run containers with this capability, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.requiredDropCapabilities` is set to include either `NET_RAW` or `ALL`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  requiredDropCapabilities:\n    - ALL\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_28/9126101f12da747f3f41dbe310e20c0d", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "DropCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with the NET_RAW capability.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 148, "ruleId": "CKV_K8S_28", "ruleName": "DropCapabilities", "contextText": "148       - name: minio\n", "snippetText": "148       - name: minio\n        # Pulls the default Minio image from Docker Hub\n        image: minio/minio\n"}, "tags": [{"key": "cis_category", "value": "5.2.7", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Minimize the admission of containers with capabilities assigned.", "description": "CIS Benchmark: **5.2.9**\n\nMinimize the admission of containers with capabilities assigned.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. Capabilities are parts of the rights generally granted on a Linux system to the root user. In many cases applications running in containers do not require any capabilities to operate, so from the perspective of the principal of least privilege use of capabilities should be minimized.\n\n## Remediation\n\nReview the use of capabilites in applications runnning on your cluster. Where a namespace contains applicaions which do not require any Linux capabities to operate consider adding a PSP which forbids the admission of containers which do not drop all capabilities.\n\n\n## Additional information\n\n- [Pod Security Policy](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities)", "internal_id": "CKV_K8S_37/96369fe316d4ec80a37df208f554aa4e", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MinimizeCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with capabilities assigned.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 148, "ruleId": "CKV_K8S_37", "ruleName": "MinimizeCapabilities", "contextText": "148       - name: minio\n", "snippetText": "148       - name: minio\n        # Pulls the default Minio image from Docker Hub\n        image: minio/minio\n"}, "tags": [{"key": "cis_category", "value": "5.2.9", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Use read-only filesystem for containers where possible.", "description": "Use read-only filesystem for containers where possible.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_22/46ee5518d4672eddae0dabfb07b38549", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadOnlyFilesystem", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Use read-only filesystem for containers where possible.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 201, "ruleId": "CKV_K8S_22", "ruleName": "ReadOnlyFilesystem", "contextText": "201       - name: build\n", "snippetText": "201       - name: build\n        env:\n          - name: K8S_POD_NAME\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_30/849296d61f4064edbb9d8dc0992b1390", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ContainerSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 201, "ruleId": "CKV_K8S_30", "ruleName": "ContainerSecurityContext", "contextText": "201       - name: build\n", "snippetText": "201       - name: build\n        env:\n          - name: K8S_POD_NAME\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "CPU requests should be set.", "description": "CPU requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_10/4f2d72253d4bcdefa0609b8aea788fa5", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CPURequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "CPU requests should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 201, "ruleId": "CKV_K8S_10", "ruleName": "CPURequests", "contextText": "201       - name: build\n", "snippetText": "201       - name: build\n        env:\n          - name: K8S_POD_NAME\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Memory requests should be set.", "description": "Memory requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_12/fe70d48507a13d95637026149e24df7a", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MemoryRequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Memory requests should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 201, "ruleId": "CKV_K8S_12", "ruleName": "MemoryRequests", "contextText": "201       - name: build\n", "snippetText": "201       - name: build\n        env:\n          - name: K8S_POD_NAME\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Image Tag should be fixed - not latest or blank.", "description": "Image Tag should be fixed - not latest or blank.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_14/ba0a70f779060e892d9a0d36170295c0", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageTagFixed", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Image Tag should be fixed - not latest or blank.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 201, "ruleId": "CKV_K8S_14", "ruleName": "ImageTagFixed", "contextText": "201       - name: build\n", "snippetText": "201       - name: build\n        env:\n          - name: K8S_POD_NAME\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Image should use digest.", "description": "Image should use digest.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_43/4426aabd55be58012c12c60a0a16b3be", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageDigest", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Image should use digest.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 201, "ruleId": "CKV_K8S_43", "ruleName": "ImageDigest", "contextText": "201       - name: build\n", "snippetText": "201       - name: build\n        env:\n          - name: K8S_POD_NAME\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Containers should not run with allowPrivilegeEscalation.", "description": "CIS Benchmark: **5.2.5**\n\nMinimize the admission of containers with allowPrivilegeEscalation.\n\nA container running with the allowPrivilegeEscalation flag set to true may have processes that can gain more privileges than their parent. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to allow privilege escalation. The option exists (and is defaulted to true) to permit setuid binaries to run. If you have need to run containers which use setuid binaries or require privilege escalation, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.allowPrivilegeEscalation` field is set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_20/981b112f0bae77ccd44392cd91f48ac9", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "AllowPrivilegeEscalation", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should not run with allowPrivilegeEscalation.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 201, "ruleId": "CKV_K8S_20", "ruleName": "AllowPrivilegeEscalation", "contextText": "201       - name: build\n", "snippetText": "201       - name: build\n        env:\n          - name: K8S_POD_NAME\n"}, "tags": [{"key": "cis_category", "value": "5.2.5", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Minimize the admission of containers with the NET_RAW capability.", "description": "CIS Benchmark: **5.2.7**\n\nDo not generally permit containers with the potentially dangerous NET_RAW capability.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. By default this can include potentially dangerous capabilities. With Docker as the container runtime the NET_RAW capability is enabled which may be misused by malicious containers. Ideally, all containers should drop this capability. There should be at least one PodSecurityPolicy (PSP) defined which prevents containers with the NET_RAW capability from launching. If you need to run containers with this capability, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.requiredDropCapabilities` is set to include either `NET_RAW` or `ALL`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  requiredDropCapabilities:\n    - ALL\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_28/1cde89c0d8d8ec74400b2739d59c4524", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "DropCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with the NET_RAW capability.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 201, "ruleId": "CKV_K8S_28", "ruleName": "DropCapabilities", "contextText": "201       - name: build\n", "snippetText": "201       - name: build\n        env:\n          - name: K8S_POD_NAME\n"}, "tags": [{"key": "cis_category", "value": "5.2.7", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Minimize the admission of containers with capabilities assigned.", "description": "CIS Benchmark: **5.2.9**\n\nMinimize the admission of containers with capabilities assigned.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. Capabilities are parts of the rights generally granted on a Linux system to the root user. In many cases applications running in containers do not require any capabilities to operate, so from the perspective of the principal of least privilege use of capabilities should be minimized.\n\n## Remediation\n\nReview the use of capabilites in applications runnning on your cluster. Where a namespace contains applicaions which do not require any Linux capabities to operate consider adding a PSP which forbids the admission of containers which do not drop all capabilities.\n\n\n## Additional information\n\n- [Pod Security Policy](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities)", "internal_id": "CKV_K8S_37/cafedd75c88962866f640f87341e79b9", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MinimizeCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with capabilities assigned.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/test_k8s_local.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 201, "ruleId": "CKV_K8S_37", "ruleName": "MinimizeCapabilities", "contextText": "201       - name: build\n", "snippetText": "201       - name: build\n        env:\n          - name: K8S_POD_NAME\n"}, "tags": [{"key": "cis_category", "value": "5.2.9", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Minimize the admission of root containers.", "description": "CIS Benchmark: **5.2.6**\n\nMinimize the admission of root containers.\n\nContainers may run as any Linux user. Containers which run as the root user, whilst constrained by Container Runtime security features still have a escalated likelihood of container breakout. Ideally, all containers should run as a defined non-UID 0 user. There should be at least one PodSecurityPolicy (PSP) defined which does not permit root users in a container. If you need to run root containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.runAsUser.rule` is set to either `MustRunAsNonRoot` or `MustRunAs` with the range of UIDs not including `0`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  runAsUser:\n    # Require the container to run without root privileges.\n    rule: 'MustRunAsNonRoot'\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_23/2fd930b069543636ad1fb85839fb08ec", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainers", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of root containers.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-device-plugin-1.12.yml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_23", "ruleName": "RootContainers", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.6", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Containers should run as a high UID to avoid host conflict.", "description": "Containers should run as a high UID to avoid host conflict.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_40/3cdf60cddc8275dd439b7382b686dbbb", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainersHighUID", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should run as a high UID to avoid host conflict.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-device-plugin-1.12.yml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_40", "ruleName": "RootContainersHighUID", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Ensure that Service Account Tokens are only mounted where necessary.", "description": "CIS Benchmark: **5.1.6**\n\nEnsure that Service Account Tokens are only mounted where necessary.\n\nMounting service account tokens inside pods can provide an avenue for privilege escalation attacks where an attacker is able to compromise a single pod in the cluster. Avoiding mounting these tokens removes this attack avenue.\n\n## Remediation\n\nModify the definition of pods and service accounts which do not need to mount service account tokens to disable it.\n", "internal_id": "CKV_K8S_38/4b1d4bbb3aa674fa4c6ccac0f919cde7", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ServiceAccountTokens", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that Service Account Tokens are only mounted where necessary.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-device-plugin-1.12.yml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_38", "ruleName": "ServiceAccountTokens", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.1.6", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "description": "CIS Benchmark: **5.7.2**\n\nEnsure that the seccomp profile is set to docker/default in your pod definitions.\n\nSeccomp (secure computing mode) is used to restrict the set of system calls applications can make, allowing cluster administrators greater control over the security of workloads running in the cluster. Kubernetes disables seccomp profiles by default for historical reasons. You should enable it to ensure that the workloads have restricted actions available within the container.\n\n## Remediation\n\nSeccomp is an alpha feature currently. By default, all alpha features are disabled. So, you would need to enable alpha features in the apiserver by passing \"--feature-gates=AllAlpha=true\" argument.\nEdit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--feature-gates=AllAlpha=true\" KUBE_API_ARGS=\"--feature-gates=AllAlpha=true\". Based on your system, restart the kube-apiserver service.\nFor example:\n```bash\nsystemctl restart kube-apiserver.service\n```\n\nUse annotations to enable the docker/default seccomp profile in your pod definitions. An example is as below:\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: trustworthy-pod\n  annotations:\n    seccomp.security.alpha.kubernetes.io/pod: docker/default\nspec:\n  containers:\n    - name: trustworthy-container\n      image: sotrustworthy:latest\n```\n", "internal_id": "CKV_K8S_31/080191786060ffafbdc3e8e50223821a", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "Seccomp", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-device-plugin-1.12.yml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_31", "ruleName": "Seccomp", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.2", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_29/e82f1c93606900cb523384263dc09714", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "PodSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-device-plugin-1.12.yml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_29", "ruleName": "PodSecurityContext", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Use read-only filesystem for containers where possible.", "description": "Use read-only filesystem for containers where possible.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_22/cbd55b42eb1457e6719930455ee6f8e7", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadOnlyFilesystem", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Use read-only filesystem for containers where possible.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-device-plugin-1.12.yml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 31, "ruleId": "CKV_K8S_22", "ruleName": "ReadOnlyFilesystem", "contextText": "31       - image: nvidia/k8s-device-plugin:1.11\n", "snippetText": "31       - image: nvidia/k8s-device-plugin:1.11\n        name: nvidia-device-plugin-ctr\n        securityContext:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Liveness Probe Should be Configured.", "description": "Liveness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_8/9578c0c961a0169f0be0ab307b0e7e01", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "LivenessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Liveness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-device-plugin-1.12.yml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 31, "ruleId": "CKV_K8S_8", "ruleName": "LivenessProbe", "contextText": "31       - image: nvidia/k8s-device-plugin:1.11\n", "snippetText": "31       - image: nvidia/k8s-device-plugin:1.11\n        name: nvidia-device-plugin-ctr\n        securityContext:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "CPU requests should be set.", "description": "CPU requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_10/f7abe8f8c2fd7193412517a79dd0f739", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CPURequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "CPU requests should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-device-plugin-1.12.yml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 31, "ruleId": "CKV_K8S_10", "ruleName": "CPURequests", "contextText": "31       - image: nvidia/k8s-device-plugin:1.11\n", "snippetText": "31       - image: nvidia/k8s-device-plugin:1.11\n        name: nvidia-device-plugin-ctr\n        securityContext:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Memory requests should be set.", "description": "Memory requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_12/03b912482fd9c9064666482574db0c6c", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MemoryRequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Memory requests should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-device-plugin-1.12.yml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 31, "ruleId": "CKV_K8S_12", "ruleName": "MemoryRequests", "contextText": "31       - image: nvidia/k8s-device-plugin:1.11\n", "snippetText": "31       - image: nvidia/k8s-device-plugin:1.11\n        name: nvidia-device-plugin-ctr\n        securityContext:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Memory limits should be set.", "description": "Memory limits should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_13/225ca3f7d088111a04424ef3a0c94d7c", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MemoryLimits", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Memory limits should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-device-plugin-1.12.yml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 31, "ruleId": "CKV_K8S_13", "ruleName": "MemoryLimits", "contextText": "31       - image: nvidia/k8s-device-plugin:1.11\n", "snippetText": "31       - image: nvidia/k8s-device-plugin:1.11\n        name: nvidia-device-plugin-ctr\n        securityContext:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Readiness Probe Should be Configured.", "description": "Readiness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_9/765886036115d4f4fbec16bfadf6a784", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadinessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Readiness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-device-plugin-1.12.yml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 31, "ruleId": "CKV_K8S_9", "ruleName": "ReadinessProbe", "contextText": "31       - image: nvidia/k8s-device-plugin:1.11\n", "snippetText": "31       - image: nvidia/k8s-device-plugin:1.11\n        name: nvidia-device-plugin-ctr\n        securityContext:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "CPU limits should be set.", "description": "CPU limits should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_11/6dd09cec723c1047fc52318f72389de8", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CPULimits", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "CPU limits should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-device-plugin-1.12.yml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 31, "ruleId": "CKV_K8S_11", "ruleName": "CPULimits", "contextText": "31       - image: nvidia/k8s-device-plugin:1.11\n", "snippetText": "31       - image: nvidia/k8s-device-plugin:1.11\n        name: nvidia-device-plugin-ctr\n        securityContext:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Image Pull Policy should be Always.", "description": "Image Pull Policy should be Always.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_15/d5e54aafc52abdb77b5bbe66a8e216a3", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImagePullPolicyAlways", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Image Pull Policy should be Always.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-device-plugin-1.12.yml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 31, "ruleId": "CKV_K8S_15", "ruleName": "ImagePullPolicyAlways", "contextText": "31       - image: nvidia/k8s-device-plugin:1.11\n", "snippetText": "31       - image: nvidia/k8s-device-plugin:1.11\n        name: nvidia-device-plugin-ctr\n        securityContext:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Image should use digest.", "description": "Image should use digest.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_43/0c0b6fc2d5edbc7fbb9bc555858e81f8", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageDigest", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Image should use digest.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/nvidia-device-plugin-1.12.yml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 31, "ruleId": "CKV_K8S_43", "ruleName": "ImageDigest", "contextText": "31       - image: nvidia/k8s-device-plugin:1.11\n", "snippetText": "31       - image: nvidia/k8s-device-plugin:1.11\n        name: nvidia-device-plugin-ctr\n        securityContext:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Minimize the admission of root containers.", "description": "CIS Benchmark: **5.2.6**\n\nMinimize the admission of root containers.\n\nContainers may run as any Linux user. Containers which run as the root user, whilst constrained by Container Runtime security features still have a escalated likelihood of container breakout. Ideally, all containers should run as a defined non-UID 0 user. There should be at least one PodSecurityPolicy (PSP) defined which does not permit root users in a container. If you need to run root containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.runAsUser.rule` is set to either `MustRunAsNonRoot` or `MustRunAs` with the range of UIDs not including `0`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  runAsUser:\n    # Require the container to run without root privileges.\n    rule: 'MustRunAsNonRoot'\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_23/f44f244b9e1fedf0747b699261e645bc", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainers", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of root containers.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tools/serving-bridge/serving.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_23", "ruleName": "RootContainers", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.6", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Containers should run as a high UID to avoid host conflict.", "description": "Containers should run as a high UID to avoid host conflict.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_40/2ff6777a84c86f15205e59cb2785e026", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainersHighUID", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should run as a high UID to avoid host conflict.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tools/serving-bridge/serving.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_40", "ruleName": "RootContainersHighUID", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Ensure that Service Account Tokens are only mounted where necessary.", "description": "CIS Benchmark: **5.1.6**\n\nEnsure that Service Account Tokens are only mounted where necessary.\n\nMounting service account tokens inside pods can provide an avenue for privilege escalation attacks where an attacker is able to compromise a single pod in the cluster. Avoiding mounting these tokens removes this attack avenue.\n\n## Remediation\n\nModify the definition of pods and service accounts which do not need to mount service account tokens to disable it.\n", "internal_id": "CKV_K8S_38/c56f57a539d83ddd73a255260973de05", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ServiceAccountTokens", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that Service Account Tokens are only mounted where necessary.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tools/serving-bridge/serving.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_38", "ruleName": "ServiceAccountTokens", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.1.6", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "description": "CIS Benchmark: **5.7.2**\n\nEnsure that the seccomp profile is set to docker/default in your pod definitions.\n\nSeccomp (secure computing mode) is used to restrict the set of system calls applications can make, allowing cluster administrators greater control over the security of workloads running in the cluster. Kubernetes disables seccomp profiles by default for historical reasons. You should enable it to ensure that the workloads have restricted actions available within the container.\n\n## Remediation\n\nSeccomp is an alpha feature currently. By default, all alpha features are disabled. So, you would need to enable alpha features in the apiserver by passing \"--feature-gates=AllAlpha=true\" argument.\nEdit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--feature-gates=AllAlpha=true\" KUBE_API_ARGS=\"--feature-gates=AllAlpha=true\". Based on your system, restart the kube-apiserver service.\nFor example:\n```bash\nsystemctl restart kube-apiserver.service\n```\n\nUse annotations to enable the docker/default seccomp profile in your pod definitions. An example is as below:\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: trustworthy-pod\n  annotations:\n    seccomp.security.alpha.kubernetes.io/pod: docker/default\nspec:\n  containers:\n    - name: trustworthy-container\n      image: sotrustworthy:latest\n```\n", "internal_id": "CKV_K8S_31/a1cc8159e5b6939f2cc17406078cf57b", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "Seccomp", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tools/serving-bridge/serving.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_31", "ruleName": "Seccomp", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.2", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_29/6b3fd4c10eb9c260441e1c8ea3887d39", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "PodSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tools/serving-bridge/serving.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_29", "ruleName": "PodSecurityContext", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Use read-only filesystem for containers where possible.", "description": "Use read-only filesystem for containers where possible.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_22/247b9e2f1936812187d0db41a278282e", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadOnlyFilesystem", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Use read-only filesystem for containers where possible.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tools/serving-bridge/serving.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 18, "ruleId": "CKV_K8S_22", "ruleName": "ReadOnlyFilesystem", "contextText": "18         - name: tfx-serving\n", "snippetText": "18         - name: tfx-serving\n          image: tensorflow/serving\n          command:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_30/a355b4c73a07cf42910d134e251627d1", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ContainerSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tools/serving-bridge/serving.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 18, "ruleId": "CKV_K8S_30", "ruleName": "ContainerSecurityContext", "contextText": "18         - name: tfx-serving\n", "snippetText": "18         - name: tfx-serving\n          image: tensorflow/serving\n          command:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "CPU requests should be set.", "description": "CPU requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_10/a7207b70b7bc830afc443e2e31c40caa", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CPURequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "CPU requests should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tools/serving-bridge/serving.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 18, "ruleId": "CKV_K8S_10", "ruleName": "CPURequests", "contextText": "18         - name: tfx-serving\n", "snippetText": "18         - name: tfx-serving\n          image: tensorflow/serving\n          command:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Memory requests should be set.", "description": "Memory requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_12/0e3b4ad36df6eb24734ae8ab39f374f1", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MemoryRequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Memory requests should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tools/serving-bridge/serving.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 18, "ruleId": "CKV_K8S_12", "ruleName": "MemoryRequests", "contextText": "18         - name: tfx-serving\n", "snippetText": "18         - name: tfx-serving\n          image: tensorflow/serving\n          command:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Readiness Probe Should be Configured.", "description": "Readiness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_9/f9ce2fc43b48c6c4e6e414a369f056dd", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadinessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Readiness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tools/serving-bridge/serving.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 18, "ruleId": "CKV_K8S_9", "ruleName": "ReadinessProbe", "contextText": "18         - name: tfx-serving\n", "snippetText": "18         - name: tfx-serving\n          image: tensorflow/serving\n          command:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Prefer using secrets as files over secrets as environment variables.", "description": "CIS Benchmark: **5.4.1**\n\nKubernetes supports mounting secrets as data volumes or as environment variables. Minimize the use of environment variable secrets.\n\nIt is reasonably common for application code to log out its environment (particularly in the event of an error). This will include any secret values passed in as environment variables, so secrets can easily be exposed to any user or entity who has access to the logs.\n\n## Remediation\n\nRewrite application code to read secrets from mounted secret files, rather than from environment variables. Refer to the secrets management options offered by your cloud provider or a third-party secrets management solution.\n", "internal_id": "CKV_K8S_35/7fe4eef19d0fef6e5237098eb43d7f2c", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "Secrets", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Prefer using secrets as files over secrets as environment variables.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tools/serving-bridge/serving.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 18, "ruleId": "CKV_K8S_35", "ruleName": "Secrets", "contextText": "18         - name: tfx-serving\n", "snippetText": "18         - name: tfx-serving\n          image: tensorflow/serving\n          command:\n"}, "tags": [{"key": "cis_category", "value": "5.4.1", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Image Tag should be fixed - not latest or blank.", "description": "Image Tag should be fixed - not latest or blank.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_14/42796ed59c7987d17f16446475dee81e", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageTagFixed", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Image Tag should be fixed - not latest or blank.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tools/serving-bridge/serving.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 18, "ruleId": "CKV_K8S_14", "ruleName": "ImageTagFixed", "contextText": "18         - name: tfx-serving\n", "snippetText": "18         - name: tfx-serving\n          image: tensorflow/serving\n          command:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Image should use digest.", "description": "Image should use digest.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_43/6c2f8c1452cbc54ea47cb83d24881bcb", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageDigest", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Image should use digest.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tools/serving-bridge/serving.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 18, "ruleId": "CKV_K8S_43", "ruleName": "ImageDigest", "contextText": "18         - name: tfx-serving\n", "snippetText": "18         - name: tfx-serving\n          image: tensorflow/serving\n          command:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Containers should not run with allowPrivilegeEscalation.", "description": "CIS Benchmark: **5.2.5**\n\nMinimize the admission of containers with allowPrivilegeEscalation.\n\nA container running with the allowPrivilegeEscalation flag set to true may have processes that can gain more privileges than their parent. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to allow privilege escalation. The option exists (and is defaulted to true) to permit setuid binaries to run. If you have need to run containers which use setuid binaries or require privilege escalation, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.allowPrivilegeEscalation` field is set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_20/18380c51ce7e723f18278af9fb245f65", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "AllowPrivilegeEscalation", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should not run with allowPrivilegeEscalation.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tools/serving-bridge/serving.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 18, "ruleId": "CKV_K8S_20", "ruleName": "AllowPrivilegeEscalation", "contextText": "18         - name: tfx-serving\n", "snippetText": "18         - name: tfx-serving\n          image: tensorflow/serving\n          command:\n"}, "tags": [{"key": "cis_category", "value": "5.2.5", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Minimize the admission of containers with the NET_RAW capability.", "description": "CIS Benchmark: **5.2.7**\n\nDo not generally permit containers with the potentially dangerous NET_RAW capability.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. By default this can include potentially dangerous capabilities. With Docker as the container runtime the NET_RAW capability is enabled which may be misused by malicious containers. Ideally, all containers should drop this capability. There should be at least one PodSecurityPolicy (PSP) defined which prevents containers with the NET_RAW capability from launching. If you need to run containers with this capability, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.requiredDropCapabilities` is set to include either `NET_RAW` or `ALL`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  requiredDropCapabilities:\n    - ALL\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_28/c911ae19ca49eff73c8c43792e06dd9b", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "DropCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with the NET_RAW capability.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tools/serving-bridge/serving.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 18, "ruleId": "CKV_K8S_28", "ruleName": "DropCapabilities", "contextText": "18         - name: tfx-serving\n", "snippetText": "18         - name: tfx-serving\n          image: tensorflow/serving\n          command:\n"}, "tags": [{"key": "cis_category", "value": "5.2.7", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Minimize the admission of containers with capabilities assigned.", "description": "CIS Benchmark: **5.2.9**\n\nMinimize the admission of containers with capabilities assigned.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. Capabilities are parts of the rights generally granted on a Linux system to the root user. In many cases applications running in containers do not require any capabilities to operate, so from the perspective of the principal of least privilege use of capabilities should be minimized.\n\n## Remediation\n\nReview the use of capabilites in applications runnning on your cluster. Where a namespace contains applicaions which do not require any Linux capabities to operate consider adding a PSP which forbids the admission of containers which do not drop all capabilities.\n\n\n## Additional information\n\n- [Pod Security Policy](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities)", "internal_id": "CKV_K8S_37/2a74652d0a8ef546f624d0b1ecd9e28a", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MinimizeCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with capabilities assigned.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tools/serving-bridge/serving.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 18, "ruleId": "CKV_K8S_37", "ruleName": "MinimizeCapabilities", "contextText": "18         - name: tfx-serving\n", "snippetText": "18         - name: tfx-serving\n          image: tensorflow/serving\n          command:\n"}, "tags": [{"key": "cis_category", "value": "5.2.9", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Minimize the admission of root containers.", "description": "CIS Benchmark: **5.2.6**\n\nMinimize the admission of root containers.\n\nContainers may run as any Linux user. Containers which run as the root user, whilst constrained by Container Runtime security features still have a escalated likelihood of container breakout. Ideally, all containers should run as a defined non-UID 0 user. There should be at least one PodSecurityPolicy (PSP) defined which does not permit root users in a container. If you need to run root containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.runAsUser.rule` is set to either `MustRunAsNonRoot` or `MustRunAs` with the range of UIDs not including `0`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  runAsUser:\n    # Require the container to run without root privileges.\n    rule: 'MustRunAsNonRoot'\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_23/7a3d71af8ecb182ae76d29d3ed996ad2", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainers", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of root containers.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tools/serving-bridge/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 60, "ruleId": "CKV_K8S_23", "ruleName": "RootContainers", "contextText": "60 apiVersion: apps/v1\n", "snippetText": "60 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.6", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Containers should run as a high UID to avoid host conflict.", "description": "Containers should run as a high UID to avoid host conflict.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_40/8380cbeed87f9accab4fb9f02367874e", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainersHighUID", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should run as a high UID to avoid host conflict.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tools/serving-bridge/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 60, "ruleId": "CKV_K8S_40", "ruleName": "RootContainersHighUID", "contextText": "60 apiVersion: apps/v1\n", "snippetText": "60 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Ensure that Service Account Tokens are only mounted where necessary.", "description": "CIS Benchmark: **5.1.6**\n\nEnsure that Service Account Tokens are only mounted where necessary.\n\nMounting service account tokens inside pods can provide an avenue for privilege escalation attacks where an attacker is able to compromise a single pod in the cluster. Avoiding mounting these tokens removes this attack avenue.\n\n## Remediation\n\nModify the definition of pods and service accounts which do not need to mount service account tokens to disable it.\n", "internal_id": "CKV_K8S_38/a93ada0a4f1d763334c300dce89f9119", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ServiceAccountTokens", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that Service Account Tokens are only mounted where necessary.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tools/serving-bridge/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 60, "ruleId": "CKV_K8S_38", "ruleName": "ServiceAccountTokens", "contextText": "60 apiVersion: apps/v1\n", "snippetText": "60 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.1.6", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "description": "CIS Benchmark: **5.7.2**\n\nEnsure that the seccomp profile is set to docker/default in your pod definitions.\n\nSeccomp (secure computing mode) is used to restrict the set of system calls applications can make, allowing cluster administrators greater control over the security of workloads running in the cluster. Kubernetes disables seccomp profiles by default for historical reasons. You should enable it to ensure that the workloads have restricted actions available within the container.\n\n## Remediation\n\nSeccomp is an alpha feature currently. By default, all alpha features are disabled. So, you would need to enable alpha features in the apiserver by passing \"--feature-gates=AllAlpha=true\" argument.\nEdit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--feature-gates=AllAlpha=true\" KUBE_API_ARGS=\"--feature-gates=AllAlpha=true\". Based on your system, restart the kube-apiserver service.\nFor example:\n```bash\nsystemctl restart kube-apiserver.service\n```\n\nUse annotations to enable the docker/default seccomp profile in your pod definitions. An example is as below:\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: trustworthy-pod\n  annotations:\n    seccomp.security.alpha.kubernetes.io/pod: docker/default\nspec:\n  containers:\n    - name: trustworthy-container\n      image: sotrustworthy:latest\n```\n", "internal_id": "CKV_K8S_31/f6150a26643d4e2f67e0b503e84c9860", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "Seccomp", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tools/serving-bridge/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 60, "ruleId": "CKV_K8S_31", "ruleName": "Seccomp", "contextText": "60 apiVersion: apps/v1\n", "snippetText": "60 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.2", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_29/eeb3fd9dace2f32885dcbb4dda875afb", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "PodSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tools/serving-bridge/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 60, "ruleId": "CKV_K8S_29", "ruleName": "PodSecurityContext", "contextText": "60 apiVersion: apps/v1\n", "snippetText": "60 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Use read-only filesystem for containers where possible.", "description": "Use read-only filesystem for containers where possible.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_22/b6e1ef39b20e6f4b89124b7822d88121", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadOnlyFilesystem", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Use read-only filesystem for containers where possible.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tools/serving-bridge/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 83, "ruleId": "CKV_K8S_22", "ruleName": "ReadOnlyFilesystem", "contextText": "83       - name: serving-bridge\n", "snippetText": "83       - name: serving-bridge\n        envFrom:\n        - configMapRef:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_30/0021b33be849e36226c02ae8ebbd2b3c", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ContainerSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tools/serving-bridge/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 83, "ruleId": "CKV_K8S_30", "ruleName": "ContainerSecurityContext", "contextText": "83       - name: serving-bridge\n", "snippetText": "83       - name: serving-bridge\n        envFrom:\n        - configMapRef:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Liveness Probe Should be Configured.", "description": "Liveness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_8/d54314c778cc4d1dd2e801cb20c5f263", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "LivenessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Liveness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tools/serving-bridge/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 83, "ruleId": "CKV_K8S_8", "ruleName": "LivenessProbe", "contextText": "83       - name: serving-bridge\n", "snippetText": "83       - name: serving-bridge\n        envFrom:\n        - configMapRef:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "CPU requests should be set.", "description": "CPU requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_10/830de4be87e927d1336549f92f6175ce", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "CPURequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "CPU requests should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tools/serving-bridge/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 83, "ruleId": "CKV_K8S_10", "ruleName": "CPURequests", "contextText": "83       - name: serving-bridge\n", "snippetText": "83       - name: serving-bridge\n        envFrom:\n        - configMapRef:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Memory requests should be set.", "description": "Memory requests should be set.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_12/75ded261c9a62152760b88ad515bd2cb", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MemoryRequests", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Memory requests should be set.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tools/serving-bridge/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 83, "ruleId": "CKV_K8S_12", "ruleName": "MemoryRequests", "contextText": "83       - name: serving-bridge\n", "snippetText": "83       - name: serving-bridge\n        envFrom:\n        - configMapRef:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Readiness Probe Should be Configured.", "description": "Readiness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_9/28ece8543b765dc68b84ab43ba6ceccc", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadinessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Readiness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tools/serving-bridge/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 83, "ruleId": "CKV_K8S_9", "ruleName": "ReadinessProbe", "contextText": "83       - name: serving-bridge\n", "snippetText": "83       - name: serving-bridge\n        envFrom:\n        - configMapRef:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Prefer using secrets as files over secrets as environment variables.", "description": "CIS Benchmark: **5.4.1**\n\nKubernetes supports mounting secrets as data volumes or as environment variables. Minimize the use of environment variable secrets.\n\nIt is reasonably common for application code to log out its environment (particularly in the event of an error). This will include any secret values passed in as environment variables, so secrets can easily be exposed to any user or entity who has access to the logs.\n\n## Remediation\n\nRewrite application code to read secrets from mounted secret files, rather than from environment variables. Refer to the secrets management options offered by your cloud provider or a third-party secrets management solution.\n", "internal_id": "CKV_K8S_35/f20d732a7b94993939d561c734a0f2e0", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "Secrets", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Prefer using secrets as files over secrets as environment variables.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tools/serving-bridge/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 83, "ruleId": "CKV_K8S_35", "ruleName": "Secrets", "contextText": "83       - name: serving-bridge\n", "snippetText": "83       - name: serving-bridge\n        envFrom:\n        - configMapRef:\n"}, "tags": [{"key": "cis_category", "value": "5.4.1", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Image Tag should be fixed - not latest or blank.", "description": "Image Tag should be fixed - not latest or blank.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_14/3b83b5329153e69a93689b4409361be0", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageTagFixed", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Image Tag should be fixed - not latest or blank.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tools/serving-bridge/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 83, "ruleId": "CKV_K8S_14", "ruleName": "ImageTagFixed", "contextText": "83       - name: serving-bridge\n", "snippetText": "83       - name: serving-bridge\n        envFrom:\n        - configMapRef:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Image should use digest.", "description": "Image should use digest.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_43/0443481ee92859351de1791dc3d72514", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageDigest", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Image should use digest.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tools/serving-bridge/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 83, "ruleId": "CKV_K8S_43", "ruleName": "ImageDigest", "contextText": "83       - name: serving-bridge\n", "snippetText": "83       - name: serving-bridge\n        envFrom:\n        - configMapRef:\n"}, "tags": []}, {"app": "studio-go-runner", "type": "extscan", "title": "Containers should not run with allowPrivilegeEscalation.", "description": "CIS Benchmark: **5.2.5**\n\nMinimize the admission of containers with allowPrivilegeEscalation.\n\nA container running with the allowPrivilegeEscalation flag set to true may have processes that can gain more privileges than their parent. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to allow privilege escalation. The option exists (and is defaulted to true) to permit setuid binaries to run. If you have need to run containers which use setuid binaries or require privilege escalation, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.allowPrivilegeEscalation` field is set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_20/ed151478ef8e95ddcad18ff1f70d3fed", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "AllowPrivilegeEscalation", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Containers should not run with allowPrivilegeEscalation.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tools/serving-bridge/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 83, "ruleId": "CKV_K8S_20", "ruleName": "AllowPrivilegeEscalation", "contextText": "83       - name: serving-bridge\n", "snippetText": "83       - name: serving-bridge\n        envFrom:\n        - configMapRef:\n"}, "tags": [{"key": "cis_category", "value": "5.2.5", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Minimize the admission of containers with the NET_RAW capability.", "description": "CIS Benchmark: **5.2.7**\n\nDo not generally permit containers with the potentially dangerous NET_RAW capability.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. By default this can include potentially dangerous capabilities. With Docker as the container runtime the NET_RAW capability is enabled which may be misused by malicious containers. Ideally, all containers should drop this capability. There should be at least one PodSecurityPolicy (PSP) defined which prevents containers with the NET_RAW capability from launching. If you need to run containers with this capability, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.requiredDropCapabilities` is set to include either `NET_RAW` or `ALL`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  requiredDropCapabilities:\n    - ALL\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_28/cf22be431de378c00e1c463d52002291", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "DropCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with the NET_RAW capability.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tools/serving-bridge/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 83, "ruleId": "CKV_K8S_28", "ruleName": "DropCapabilities", "contextText": "83       - name: serving-bridge\n", "snippetText": "83       - name: serving-bridge\n        envFrom:\n        - configMapRef:\n"}, "tags": [{"key": "cis_category", "value": "5.2.7", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "Minimize the admission of containers with capabilities assigned.", "description": "CIS Benchmark: **5.2.9**\n\nMinimize the admission of containers with capabilities assigned.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. Capabilities are parts of the rights generally granted on a Linux system to the root user. In many cases applications running in containers do not require any capabilities to operate, so from the perspective of the principal of least privilege use of capabilities should be minimized.\n\n## Remediation\n\nReview the use of capabilites in applications runnning on your cluster. Where a namespace contains applicaions which do not require any Linux capabities to operate consider adding a PSP which forbids the admission of containers which do not drop all capabilities.\n\n\n## Additional information\n\n- [Pod Security Policy](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities)", "internal_id": "CKV_K8S_37/5b0b3887f3793b860ac6edfb565f87f3", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MinimizeCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with capabilities assigned.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tools/serving-bridge/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 83, "ruleId": "CKV_K8S_37", "ruleName": "MinimizeCapabilities", "contextText": "83       - name: serving-bridge\n", "snippetText": "83       - name: serving-bridge\n        envFrom:\n        - configMapRef:\n"}, "tags": [{"key": "cis_category", "value": "5.2.9", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/047b637f5c223e69204d0eabaea984a0", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tekton/storage.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "1 apiVersion: v1\n", "snippetText": "1 apiVersion: v1\nkind: Secret\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "studio-go-runner", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/981005ef8d2d308f623f48fb7e4ee947", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "studio-go-runner", "repositoryUri": "https://github.com/leaf-ai/studio-go-runner", "revisionId": "8baf1c92b6b55f5378cc9919cd0eaf487df07ace", "branch": "feature/376_AWS_MMQ", "invokedBy": "Karl Mutch <karlmutch@gmail.com>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/kmutch/project/src/github.com/leaf-ai/studio-go-runner/tekton/storage.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 16, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "16 apiVersion: v1\n", "snippetText": "16 apiVersion: v1\ndata: null\nkind: ConfigMap\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}]}