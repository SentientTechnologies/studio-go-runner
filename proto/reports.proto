// Copyright Â© 2020 Cognizant Digital Business, Evolutionary AI. All rights reserved. Issued under the Apache 2.0 license.

syntax = "proto3";

package dev.studio_go_runner.reports;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/any.proto";

option go_package = "dev.cognizant_dev.ai/genproto/studio-go-runner/reports/v1;reports";

// Queue message format. All messages conform to this format
message Report {
  // Timestamp of the time when the report message was emitted
  google.protobuf.Timestamp time = 1;

  // The unique ID of this experiment assigned by the experimenter.  
  // If the report has no associated or known experiment id this 
  // field will not be present.
  google.protobuf.StringValue experiment_id =2;

  // A unique ID that was generated by the runners attempt to run the experiment.
  // This value will change between attempts. If the report has no associated or
  // known experiment id this field will not be present.
  google.protobuf.StringValue unique_id = 3;

  // A unique ID denoting the host, pod, or node that this experiment attempt
  // is being performed on.
  google.protobuf.StringValue executor_id = 4;

  oneof payload {
      google.protobuf.Any proto_any = 10;

      // The log entry payload, represented as a Unicode string (UTF-8).
      google.protobuf.StringValue text= 11;

      // A structured log message from the runner
      LogEntry logging = 12;

      // A progress message generated by the experiment
      Progress progress = 13;
  }
}


enum LogSeverity {
  // (0) The log entry has no assigned severity level.
  DEFAULT = 0;

  // (100) Trace information.
  TRACE = 100;

  // (200) Debug information.
  DEBUG = 200;

  // (300) Routine information, such as ongoing status or performance.
  INFO = 300;

  // (400) Normal but significant events, such as start up, shut down, or
  // a configuration change.
  WARNING = 400;

  // (500) Error events are likely to cause problems.
  ERROR = 500;

  // (600) One or more systems are unusable.
  FATAL = 600;
}


// Structured log message
message LogEntry {
  // Timestamp of the time when the log entry was generated
  google.protobuf.Timestamp time = 1;
  // Severity code for the log entry
  LogSeverity severity = 2;
  // Mesage string
  google.protobuf.StringValue message = 3;
  // Key value pairs of context information
  map<string, string> fields = 4;
}


enum TaskState {
  // (0) The Task is in an intialization phase and has not started
  Prestart = 0;

  // (1) The task is in a starting state, optional transitional state
  Started = 1;

  // (2) The task is stopping, optional transitional state
  Stopping = 2;

  // (20) Terminal state indicating the task failed
  Failed = 20;

  // (21) Terminal state indicating the task completed successfully
  Success = 21;
}

// JSON messages emitted by the experiment application code.  These messages
// should conform to the format documented in [docs/metadata.md](docs/metadata.md#JSON-Document)
message Progress {
  // Timestamp of the time when the json payload was generated by the experiment
  google.protobuf.Timestamp time = 1;

  // The valid json payload emitted by the experiment, or empty if the message is generated
  // by the runner itself
  google.protobuf.StringValue json = 2;

  // This field is used to indicated the state of the task to which this Progress message relates
  TaskState state = 3;

  // This field is used to send any available failure information such as an error code
  message Error {
    // The text message associated with an error
    google.protobuf.StringValue msg = 20;

    // If an error code is available it will be included in the code value
    int32 code = 21;
  }

  Error error = 4;
}
