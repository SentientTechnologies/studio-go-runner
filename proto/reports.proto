// Copyright Â© 2019-2020 Cognizant Digital Business, Evolutionary AI. All rights reserved. Issued under the Apache 2.0 license.

syntax = "proto3";

package dev.studio_go_runner.reports;

import "google/protobuf/timestamp.proto";
import "google/logging/type/log_severity.proto";
import "google/protobuf/any.proto";

option go_package = "dev.cognizant_dev.ai/genproto/studio-go-runner/reports/v1;reports";

// Queue message format. All messages conform to this format
message Report {
  // Timestamp of the time when the report message was emitted
  google.protobuf.Timestamp time = 1;

  // The unique ID of this experiment assigned by the experimenter.  
  // If the report has no associated or known experiment id this 
  // field will not be present.
  optional string experiment_id =2;

  // A unique ID that was generated by the runners attempt to run the experiment.
  // This value will change between attempts. If the report has no associated or
  // known experiment id this field will not be present.
  optional string unique_id = 3;

  // A unique ID denoting the host, pod, or node that this experiment attempt
  // is being performed on.
  string executor_id = 4;

  oneof payload {
      google.protobuf.Any proto_any = 10;

      // The log entry payload, represented as a Unicode string (UTF-8).
      string text= 11;

      // A structured log message from the runner
      LogEntry logging = 12;

      // A progress message generated by the experiment
      Progress progress = 13;
  }
}


// Structured log message
message LogEntry {
  // Timestamp of the time when the log entry was generated
  google.protobuf.Timestamp time = 1;
  // Severity code for the log entry
  google.logging.type.LogSeverity severity = 2
  // Mesage string
  string message = 3;
  // Key value pairs of context information
  map<string, string> fields = 4;
}


// JSON messages emitted by the experiment application code.  These messages
// should conform to the format documented in [docs/metadata.md](docs/metadata.md#JSON-Document)
message Progress {
  // Timestamp of the time when the json payload was generated by the experiment
  google.protobuf.Timestamp time = 1;

  // The valid json payload emitted by the experiment
  string json = 2;

  // This field is used by the runner when the experiment is deemed to have
  // been completed including any needed uploads to storage platform etc.
  bool finished = 3 [default = false];
}
